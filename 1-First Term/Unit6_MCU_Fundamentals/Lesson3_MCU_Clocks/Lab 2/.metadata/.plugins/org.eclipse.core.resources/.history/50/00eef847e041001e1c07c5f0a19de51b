/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



#include"Platform_Types.h"


#define SET_BIT(REG, BIT_NUMBER) REG |= (1U<<BIT_NUMBER)

//RCC Configuration

#define RCC_BASE             0x40021000
#define RCC_APB2ENR_OFFSET   0x18
#define RCC_CFGR_OFFSET      0x04
#define RCC_APB2ENR          *(vuint32 *)(RCC_BASE + RCC_APB2ENR_OFFSET) //APB2 clock enable register
#define RCC_CFGR             *(vuint32 *)(RCC_BASE + RCC_CFGR_OFFSET)
#define IOPAEN               2        //GPOIA enable bit

/*APB1 clock  prescaler*/
#define PPRE1_0              8
#define PPRE1_1              9
#define PPRE1_2              10

/*APB2 clock  prescaler*/
#define PPRE2_0              11
#define PPRE2_1              12
#define PPRE2_2              13



//GPIOA Configurations
#define GPIOA_BASE   0x40010800
#define GPIOA_CRH   *(vuint32 *)(GPIOA_BASE + 0x04) //CTRL REG
#define GPIOA_ODR   *(vuint32 *)(GPIOA_BASE + 0x0c) //Output Data REG


#define GPIOA13     (1UL<<13)

typedef union
{
	vsint32 all_fields;
	struct
	{
		vsint32 reserved :13;
		vsint32 pin_13 	 :1;
	}Pin;
}R_ODR_t;

volatile R_ODR_t* R_ODR = (volatile R_ODR_t*)(GPIOA_BASE + 0x0C);

int main(void)
{
	GPIOA_CRH    &=  0xFF0FFFFF;
	GPIOA_CRH    |=  0x00200000;

	//APB1 frequency 4 MHz
	SET_BIT(RCC_CFGR, PPRE1_2); //set bit 10 in RCC_CFGR

	//APB2 frequency 2 MHz
	SET_BIT(RCC_CFGR, PPRE2_0); //set bit 11 in RCC_CFGR
	SET_BIT(RCC_CFGR, PPRE2_2); //set bit 13 in RCC_CFGR

	//set GPIOA enable bit
	SET_BIT(RCC_APB2ENR, 2);

	while(1)
	{
		R_ODR->Pin.pin_13 = 1;
		for(int i = 0; i < 50000; i++);

		R_ODR->Pin.pin_13 = 0;
		for(int i = 0; i < 50000; i++);

	}

	return 0;
}
