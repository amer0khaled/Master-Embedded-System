
WDT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000da  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  000008a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004e0  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a3  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000433  00000000  00000000  00000fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001400  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cd  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	//1. Make Pin0 on PortC as Output
	DDRC |= (1<<0);
  92:	a0 9a       	sbi	0x14, 0	; 20
	
	//_delay_ms(1000);
	while (1)
	{
		PORTC ^= (1<<0);
  94:	c1 e0       	ldi	r28, 0x01	; 1
  96:	85 b3       	in	r24, 0x15	; 21
  98:	8c 27       	eor	r24, r28
  9a:	85 bb       	out	0x15, r24	; 21
		WDT_START(WDT_TIM_OUT_1P0_SEC);
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	0e 94 5d 00 	call	0xba	; 0xba <WDT_START>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	98 ef       	ldi	r25, 0xF8	; 248
  a6:	a5 e1       	ldi	r26, 0x15	; 21
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	a0 40       	sbci	r26, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
  b2:	00 00       	nop
		_delay_ms(900);
		WDT_STOP();
  b4:	0e 94 66 00 	call	0xcc	; 0xcc <WDT_STOP>
  b8:	ee cf       	rjmp	.-36     	; 0x96 <main+0x4>

000000ba <WDT_START>:


void WDT_START(WDT_TimeOut Time_Out)
{
	//enable WDT
	WDTCR |= (1<<WDE);
  ba:	91 b5       	in	r25, 0x21	; 33
  bc:	98 60       	ori	r25, 0x08	; 8
  be:	91 bd       	out	0x21, r25	; 33
	
	//adjust WDT Clock
	if ( (WDT_TIM_OUT_16P3_MS<=Time_Out) && (WDT_TIM_OUT_2P1_SEC>=Time_Out) )
  c0:	88 30       	cpi	r24, 0x08	; 8
  c2:	18 f4       	brcc	.+6      	; 0xca <WDT_START+0x10>
	{
		WDTCR |= (Time_Out << 0);
  c4:	91 b5       	in	r25, 0x21	; 33
  c6:	89 2b       	or	r24, r25
  c8:	81 bd       	out	0x21, r24	; 33
  ca:	08 95       	ret

000000cc <WDT_STOP>:
	
}

void WDT_STOP()
{
	WDTCR |= (1<<WDE) | (WDTOE);
  cc:	81 b5       	in	r24, 0x21	; 33
  ce:	8c 60       	ori	r24, 0x0C	; 12
  d0:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00;
  d2:	11 bc       	out	0x21, r1	; 33
}
  d4:	08 95       	ret

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
