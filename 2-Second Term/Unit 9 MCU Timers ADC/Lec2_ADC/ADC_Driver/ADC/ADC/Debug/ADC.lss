
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000dd6  00000e6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  00000e70  2**0
                  ALLOC
  3 .stab         000016e0  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000522  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea9  00000000  00000000  00002b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000469  00000000  00000000  00003a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cc  00000000  00000000  00003eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00004678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033d  00000000  00000000  00004864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bd  00000000  00000000  00004ba1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  8a:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MCAL_ADC_Init>:
ADC_Config * GP_UserConfig;



void MCAL_ADC_Init(ADC_Config * UserConfig)
{
  92:	fc 01       	movw	r30, r24
	GP_UserConfig = UserConfig;
  94:	90 93 67 00 	sts	0x0067, r25
  98:	80 93 66 00 	sts	0x0066, r24
	
	//ADC Prescaler
	ADCSRA |= UserConfig->ADC_Prescaler;
  9c:	96 b1       	in	r25, 0x06	; 6
  9e:	80 81       	ld	r24, Z
  a0:	89 2b       	or	r24, r25
  a2:	86 b9       	out	0x06, r24	; 6
	
	//Left Adjust state
	ADMUX |= UserConfig->ADC_LeftAdjust;
  a4:	97 b1       	in	r25, 0x07	; 7
  a6:	83 81       	ldd	r24, Z+3	; 0x03
  a8:	89 2b       	or	r24, r25
  aa:	87 b9       	out	0x07, r24	; 7
	
	//ADC Reference Voltage
	ADMUX |= UserConfig->ADC_RefVoltage;
  ac:	97 b1       	in	r25, 0x07	; 7
  ae:	82 81       	ldd	r24, Z+2	; 0x02
  b0:	89 2b       	or	r24, r25
  b2:	87 b9       	out	0x07, r24	; 7
	
	//config ADC channel and make it as Input pin
	ADMUX &= ~(0b11111 << 0);
  b4:	87 b1       	in	r24, 0x07	; 7
  b6:	80 7e       	andi	r24, 0xE0	; 224
  b8:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (UserConfig->ADC_Channel);
  ba:	97 b1       	in	r25, 0x07	; 7
  bc:	84 81       	ldd	r24, Z+4	; 0x04
  be:	89 2b       	or	r24, r25
  c0:	87 b9       	out	0x07, r24	; 7
	//DDRA &= ~(1<<(UserConfig->ADC_Channel));
	CLEAR_BIT(DDRA, UserConfig->ADC_Channel);
  c2:	4a b3       	in	r20, 0x1a	; 26
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	c9 01       	movw	r24, r18
  ca:	04 80       	ldd	r0, Z+4	; 0x04
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <MCAL_ADC_Init+0x40>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <MCAL_ADC_Init+0x3c>
  d6:	80 95       	com	r24
  d8:	84 23       	and	r24, r20
  da:	8a bb       	out	0x1a, r24	; 26
	
	
	//ADC IRQ
	ADCSRA |= UserConfig->ADC_IRQ_Enable;
  dc:	96 b1       	in	r25, 0x06	; 6
  de:	85 81       	ldd	r24, Z+5	; 0x05
  e0:	89 2b       	or	r24, r25
  e2:	86 b9       	out	0x06, r24	; 6
	
	if (UserConfig->ADC_IRQ_Enable == ADC_IRQ_Enable_ADIE)
  e4:	85 81       	ldd	r24, Z+5	; 0x05
  e6:	88 30       	cpi	r24, 0x08	; 8
  e8:	09 f4       	brne	.+2      	; 0xec <MCAL_ADC_Init+0x5a>
	{
		sei();
  ea:	78 94       	sei
	}
	
	//ADC Enable
	ADCSRA |= (1<<ADEN);
  ec:	37 9a       	sbi	0x06, 7	; 6
	
	if (UserConfig->ADC_Mode == ADC_Mode_Free_Running)
  ee:	81 81       	ldd	r24, Z+1	; 0x01
  f0:	88 23       	and	r24, r24
  f2:	09 f4       	brne	.+2      	; 0xf6 <MCAL_ADC_Init+0x64>
	{
		ADCSRA |= (1<<ADSC);
  f4:	36 9a       	sbi	0x06, 6	; 6
  f6:	08 95       	ret

000000f8 <MCAL_ADC_DeInit>:
}


void MCAL_ADC_DeInit(void)
{
	ADMUX = 0x00;
  f8:	17 b8       	out	0x07, r1	; 7
	ADCSRA =0x00;
  fa:	16 b8       	out	0x06, r1	; 6
	SFIOR &= ~(1<<5 | 1<<6 | 1<<7);
  fc:	80 b7       	in	r24, 0x30	; 48
  fe:	8f 71       	andi	r24, 0x1F	; 31
 100:	80 bf       	out	0x30, r24	; 48
}
 102:	08 95       	ret

00000104 <MCAL_ADC_Start_Conversion>:


void MCAL_ADC_Start_Conversion(void)
{
	if (GP_UserConfig->ADC_Mode == ADC_Mode_Single_Conversion)
 104:	e0 91 66 00 	lds	r30, 0x0066
 108:	f0 91 67 00 	lds	r31, 0x0067
 10c:	81 81       	ldd	r24, Z+1	; 0x01
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	09 f4       	brne	.+2      	; 0x114 <MCAL_ADC_Start_Conversion+0x10>
	{
		ADCSRA |= (1<<ADSC);
 112:	36 9a       	sbi	0x06, 6	; 6
 114:	08 95       	ret

00000116 <MCAl_ADC_Read>:
	}
}

void MCAl_ADC_Read(uint16_t * AdcResult, PollingMechanism polling)
{
 116:	fc 01       	movw	r30, r24
	if (polling == Enable)
 118:	61 30       	cpi	r22, 0x01	; 1
 11a:	11 f4       	brne	.+4      	; 0x120 <MCAl_ADC_Read+0xa>
	{
		while( ( (ADCSRA & (1<<ADIF)) >> ADIF) == 0);
 11c:	34 9b       	sbis	0x06, 4	; 6
 11e:	fe cf       	rjmp	.-4      	; 0x11c <MCAl_ADC_Read+0x6>
	}
	
	
	if (GP_UserConfig->ADC_LeftAdjust == ADC_LeftAdjust_Disable)
 120:	a0 91 66 00 	lds	r26, 0x0066
 124:	b0 91 67 00 	lds	r27, 0x0067
 128:	13 96       	adiw	r26, 0x03	; 3
 12a:	8c 91       	ld	r24, X
 12c:	13 97       	sbiw	r26, 0x03	; 3
 12e:	88 23       	and	r24, r24
 130:	61 f4       	brne	.+24     	; 0x14a <MCAl_ADC_Read+0x34>
	{
		*AdcResult = ADCL;
 132:	24 b1       	in	r18, 0x04	; 4
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	31 83       	std	Z+1, r19	; 0x01
 138:	20 83       	st	Z, r18
		*AdcResult |= (ADCH<<8);
 13a:	45 b1       	in	r20, 0x05	; 5
 13c:	94 2f       	mov	r25, r20
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	82 2b       	or	r24, r18
 142:	93 2b       	or	r25, r19
 144:	91 83       	std	Z+1, r25	; 0x01
 146:	80 83       	st	Z, r24
 148:	08 95       	ret
	}
	else
	{
		*AdcResult = (ADCH << 2);
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	91 83       	std	Z+1, r25	; 0x01
 158:	80 83       	st	Z, r24
 15a:	08 95       	ret

0000015c <main>:
#include "ADC.h"
#include "DIO.h"
#include "LCD.h"

int main(void)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	28 97       	sbiw	r28, 0x08	; 8
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
	
	LCD_INIT();
 170:	0e 94 0b 05 	call	0xa16	; 0xa16 <LCD_INIT>
	
	ADC_Config adc;
	adc.ADC_Channel = ADC_Channel_3;
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	8d 83       	std	Y+5, r24	; 0x05
	adc.ADC_IRQ_Enable = ADC_IRQ_Enable_None;
 178:	1e 82       	std	Y+6, r1	; 0x06
	adc.ADC_LeftAdjust=ADC_LeftAdjust_Disable;
 17a:	1c 82       	std	Y+4, r1	; 0x04
	adc.ADC_Mode=ADC_Mode_Single_Conversion;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	8a 83       	std	Y+2, r24	; 0x02
	adc.ADC_Prescaler=ADC_Prescaler_64;
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	89 83       	std	Y+1, r24	; 0x01
	adc.ADC_RefVoltage=ADC_RefVoltage_AVCC_EXT;
 184:	80 e4       	ldi	r24, 0x40	; 64
 186:	8b 83       	std	Y+3, r24	; 0x03
	adc.P_CallBack = 0;
 188:	18 86       	std	Y+8, r1	; 0x08
 18a:	1f 82       	std	Y+7, r1	; 0x07
	
	DIO_SET_PIN_DIR('a',3,0);
 18c:	81 e6       	ldi	r24, 0x61	; 97
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SET_PIN_DIR>
	MCAL_ADC_Init(&adc);
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_ADC_Init>
	
	uint16_t * AdcData;
	uint16_t vin;
	int temp;
	
	LCD_SEND_STRING("val:");
 19e:	80 e6       	ldi	r24, 0x60	; 96
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_SEND_STRING>
		{
			LCD_SEND_CHAR(temp + '0');
		}
		else if (temp >= 10)
		{
			LCD_SEND_CHAR((temp/10) + '0');
 1a6:	0f 2e       	mov	r0, r31
 1a8:	fa e0       	ldi	r31, 0x0A	; 10
 1aa:	ef 2e       	mov	r14, r31
 1ac:	ff 24       	eor	r15, r15
 1ae:	f0 2d       	mov	r31, r0
	LCD_SEND_STRING("val:");
	
	
    while(1)
    {
        MCAL_ADC_Start_Conversion();
 1b0:	0e 94 82 00 	call	0x104	; 0x104 <MCAL_ADC_Start_Conversion>
		MCAl_ADC_Read(AdcData, Enable);
 1b4:	00 e0       	ldi	r16, 0x00	; 0
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	c8 01       	movw	r24, r16
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	0e 94 8b 00 	call	0x116	; 0x116 <MCAl_ADC_Read>
		LCD_MOVE_CURSOR(1, 6);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	66 e0       	ldi	r22, 0x06	; 6
 1c4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_MOVE_CURSOR>
		
		temp = ((*AdcData)*(5.0/1023.0))*100.0;
 1c8:	f8 01       	movw	r30, r16
 1ca:	60 81       	ld	r22, Z
 1cc:	71 81       	ldd	r23, Z+1	; 0x01
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 d1 05 	call	0xba2	; 0xba2 <__floatunsisf>
 1d6:	2a e0       	ldi	r18, 0x0A	; 10
 1d8:	38 e2       	ldi	r19, 0x28	; 40
 1da:	40 ea       	ldi	r20, 0xA0	; 160
 1dc:	5b e3       	ldi	r21, 0x3B	; 59
 1de:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	48 ec       	ldi	r20, 0xC8	; 200
 1e8:	52 e4       	ldi	r21, 0x42	; 66
 1ea:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 1ee:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fixsfsi>
 1f2:	dc 01       	movw	r26, r24
 1f4:	cb 01       	movw	r24, r22
		if (temp < 10)
 1f6:	8a 30       	cpi	r24, 0x0A	; 10
 1f8:	91 05       	cpc	r25, r1
 1fa:	24 f4       	brge	.+8      	; 0x204 <main+0xa8>
		{
			LCD_SEND_CHAR(temp + '0');
 1fc:	80 5d       	subi	r24, 0xD0	; 208
 1fe:	0e 94 6a 05 	call	0xad4	; 0xad4 <LCD_SEND_CHAR>
 202:	d6 cf       	rjmp	.-84     	; 0x1b0 <main+0x54>
		}
		else if (temp >= 10)
		{
			LCD_SEND_CHAR((temp/10) + '0');
 204:	b7 01       	movw	r22, r14
 206:	0e 94 c2 06 	call	0xd84	; 0xd84 <__divmodhi4>
 20a:	08 2f       	mov	r16, r24
 20c:	86 2f       	mov	r24, r22
 20e:	80 5d       	subi	r24, 0xD0	; 208
 210:	0e 94 6a 05 	call	0xad4	; 0xad4 <LCD_SEND_CHAR>
			LCD_MOVE_CURSOR(1,7);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	67 e0       	ldi	r22, 0x07	; 7
 218:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_MOVE_CURSOR>
			LCD_SEND_CHAR((temp%10) + '0');
 21c:	80 2f       	mov	r24, r16
 21e:	80 5d       	subi	r24, 0xD0	; 208
 220:	0e 94 6a 05 	call	0xad4	; 0xad4 <LCD_SEND_CHAR>
 224:	c5 cf       	rjmp	.-118    	; 0x1b0 <main+0x54>

00000226 <DIO_SET_PIN_DIR>:

#include "DIO.h"

void DIO_SET_PIN_DIR(unsigned char port, unsigned char pin, unsigned char dir)
{
	switch(port)
 226:	84 34       	cpi	r24, 0x44	; 68
 228:	09 f4       	brne	.+2      	; 0x22c <DIO_SET_PIN_DIR+0x6>
 22a:	71 c0       	rjmp	.+226    	; 0x30e <DIO_SET_PIN_DIR+0xe8>
 22c:	85 34       	cpi	r24, 0x45	; 69
 22e:	48 f4       	brcc	.+18     	; 0x242 <DIO_SET_PIN_DIR+0x1c>
 230:	82 34       	cpi	r24, 0x42	; 66
 232:	99 f1       	breq	.+102    	; 0x29a <DIO_SET_PIN_DIR+0x74>
 234:	83 34       	cpi	r24, 0x43	; 67
 236:	08 f0       	brcs	.+2      	; 0x23a <DIO_SET_PIN_DIR+0x14>
 238:	4d c0       	rjmp	.+154    	; 0x2d4 <DIO_SET_PIN_DIR+0xae>
 23a:	81 34       	cpi	r24, 0x41	; 65
 23c:	09 f0       	breq	.+2      	; 0x240 <DIO_SET_PIN_DIR+0x1a>
 23e:	83 c0       	rjmp	.+262    	; 0x346 <DIO_SET_PIN_DIR+0x120>
 240:	0f c0       	rjmp	.+30     	; 0x260 <DIO_SET_PIN_DIR+0x3a>
 242:	82 36       	cpi	r24, 0x62	; 98
 244:	51 f1       	breq	.+84     	; 0x29a <DIO_SET_PIN_DIR+0x74>
 246:	83 36       	cpi	r24, 0x63	; 99
 248:	20 f4       	brcc	.+8      	; 0x252 <DIO_SET_PIN_DIR+0x2c>
 24a:	81 36       	cpi	r24, 0x61	; 97
 24c:	09 f0       	breq	.+2      	; 0x250 <DIO_SET_PIN_DIR+0x2a>
 24e:	7b c0       	rjmp	.+246    	; 0x346 <DIO_SET_PIN_DIR+0x120>
 250:	07 c0       	rjmp	.+14     	; 0x260 <DIO_SET_PIN_DIR+0x3a>
 252:	83 36       	cpi	r24, 0x63	; 99
 254:	09 f4       	brne	.+2      	; 0x258 <DIO_SET_PIN_DIR+0x32>
 256:	3e c0       	rjmp	.+124    	; 0x2d4 <DIO_SET_PIN_DIR+0xae>
 258:	84 36       	cpi	r24, 0x64	; 100
 25a:	09 f0       	breq	.+2      	; 0x25e <DIO_SET_PIN_DIR+0x38>
 25c:	74 c0       	rjmp	.+232    	; 0x346 <DIO_SET_PIN_DIR+0x120>
 25e:	57 c0       	rjmp	.+174    	; 0x30e <DIO_SET_PIN_DIR+0xe8>
	{
		case 'A':
		case 'a':
		if (dir == 1)
 260:	41 30       	cpi	r20, 0x01	; 1
 262:	69 f4       	brne	.+26     	; 0x27e <DIO_SET_PIN_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
 264:	2a b3       	in	r18, 0x1a	; 26
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	ac 01       	movw	r20, r24
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_SET_PIN_DIR+0x4c>
 26e:	44 0f       	add	r20, r20
 270:	55 1f       	adc	r21, r21
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_SET_PIN_DIR+0x48>
 276:	ba 01       	movw	r22, r20
 278:	62 2b       	or	r22, r18
 27a:	6a bb       	out	0x1a, r22	; 26
 27c:	08 95       	ret
		} 
		else
		{
			CLEAR_BIT(DDRA,pin);
 27e:	2a b3       	in	r18, 0x1a	; 26
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac 01       	movw	r20, r24
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SET_PIN_DIR+0x66>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SET_PIN_DIR+0x62>
 290:	ba 01       	movw	r22, r20
 292:	60 95       	com	r22
 294:	62 23       	and	r22, r18
 296:	6a bb       	out	0x1a, r22	; 26
 298:	08 95       	ret
		break;
		
		
		case 'B':
		case 'b':
		if (dir == 1)
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	69 f4       	brne	.+26     	; 0x2b8 <DIO_SET_PIN_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
 29e:	27 b3       	in	r18, 0x17	; 23
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	ac 01       	movw	r20, r24
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_SET_PIN_DIR+0x86>
 2a8:	44 0f       	add	r20, r20
 2aa:	55 1f       	adc	r21, r21
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_SET_PIN_DIR+0x82>
 2b0:	ba 01       	movw	r22, r20
 2b2:	62 2b       	or	r22, r18
 2b4:	67 bb       	out	0x17, r22	; 23
 2b6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
 2b8:	27 b3       	in	r18, 0x17	; 23
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	ac 01       	movw	r20, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_SET_PIN_DIR+0xa0>
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_SET_PIN_DIR+0x9c>
 2ca:	ba 01       	movw	r22, r20
 2cc:	60 95       	com	r22
 2ce:	62 23       	and	r22, r18
 2d0:	67 bb       	out	0x17, r22	; 23
 2d2:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (dir == 1)
 2d4:	41 30       	cpi	r20, 0x01	; 1
 2d6:	69 f4       	brne	.+26     	; 0x2f2 <DIO_SET_PIN_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
 2d8:	24 b3       	in	r18, 0x14	; 20
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	ac 01       	movw	r20, r24
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_SET_PIN_DIR+0xc0>
 2e2:	44 0f       	add	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_SET_PIN_DIR+0xbc>
 2ea:	ba 01       	movw	r22, r20
 2ec:	62 2b       	or	r22, r18
 2ee:	64 bb       	out	0x14, r22	; 20
 2f0:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
 2f2:	24 b3       	in	r18, 0x14	; 20
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	ac 01       	movw	r20, r24
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_SET_PIN_DIR+0xda>
 2fc:	44 0f       	add	r20, r20
 2fe:	55 1f       	adc	r21, r21
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_SET_PIN_DIR+0xd6>
 304:	ba 01       	movw	r22, r20
 306:	60 95       	com	r22
 308:	62 23       	and	r22, r18
 30a:	64 bb       	out	0x14, r22	; 20
 30c:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (dir == 1)
 30e:	41 30       	cpi	r20, 0x01	; 1
 310:	69 f4       	brne	.+26     	; 0x32c <DIO_SET_PIN_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
 312:	21 b3       	in	r18, 0x11	; 17
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	ac 01       	movw	r20, r24
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_SET_PIN_DIR+0xfa>
 31c:	44 0f       	add	r20, r20
 31e:	55 1f       	adc	r21, r21
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_SET_PIN_DIR+0xf6>
 324:	ba 01       	movw	r22, r20
 326:	62 2b       	or	r22, r18
 328:	61 bb       	out	0x11, r22	; 17
 32a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
 32c:	21 b3       	in	r18, 0x11	; 17
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	ac 01       	movw	r20, r24
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_SET_PIN_DIR+0x114>
 336:	44 0f       	add	r20, r20
 338:	55 1f       	adc	r21, r21
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_SET_PIN_DIR+0x110>
 33e:	ba 01       	movw	r22, r20
 340:	60 95       	com	r22
 342:	62 23       	and	r22, r18
 344:	61 bb       	out	0x11, r22	; 17
 346:	08 95       	ret

00000348 <DIO_SET_PORT_DIR>:
	}
}

void DIO_SET_PORT_DIR(unsigned char port, unsigned char dir)
{
	switch (port)
 348:	84 34       	cpi	r24, 0x44	; 68
 34a:	d9 f0       	breq	.+54     	; 0x382 <DIO_SET_PORT_DIR+0x3a>
 34c:	85 34       	cpi	r24, 0x45	; 69
 34e:	38 f4       	brcc	.+14     	; 0x35e <DIO_SET_PORT_DIR+0x16>
 350:	82 34       	cpi	r24, 0x42	; 66
 352:	99 f0       	breq	.+38     	; 0x37a <DIO_SET_PORT_DIR+0x32>
 354:	83 34       	cpi	r24, 0x43	; 67
 356:	98 f4       	brcc	.+38     	; 0x37e <DIO_SET_PORT_DIR+0x36>
 358:	81 34       	cpi	r24, 0x41	; 65
 35a:	a1 f4       	brne	.+40     	; 0x384 <DIO_SET_PORT_DIR+0x3c>
 35c:	0c c0       	rjmp	.+24     	; 0x376 <DIO_SET_PORT_DIR+0x2e>
 35e:	82 36       	cpi	r24, 0x62	; 98
 360:	61 f0       	breq	.+24     	; 0x37a <DIO_SET_PORT_DIR+0x32>
 362:	83 36       	cpi	r24, 0x63	; 99
 364:	18 f4       	brcc	.+6      	; 0x36c <DIO_SET_PORT_DIR+0x24>
 366:	81 36       	cpi	r24, 0x61	; 97
 368:	69 f4       	brne	.+26     	; 0x384 <DIO_SET_PORT_DIR+0x3c>
 36a:	05 c0       	rjmp	.+10     	; 0x376 <DIO_SET_PORT_DIR+0x2e>
 36c:	83 36       	cpi	r24, 0x63	; 99
 36e:	39 f0       	breq	.+14     	; 0x37e <DIO_SET_PORT_DIR+0x36>
 370:	84 36       	cpi	r24, 0x64	; 100
 372:	41 f4       	brne	.+16     	; 0x384 <DIO_SET_PORT_DIR+0x3c>
 374:	06 c0       	rjmp	.+12     	; 0x382 <DIO_SET_PORT_DIR+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
 376:	6a bb       	out	0x1a, r22	; 26
		break;
 378:	08 95       	ret
		
		case 'B':
		case 'b':
		DDRB=dir;
 37a:	67 bb       	out	0x17, r22	; 23
		break;
 37c:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC=dir;
 37e:	64 bb       	out	0x14, r22	; 20
		break;
 380:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD=dir;
 382:	61 bb       	out	0x11, r22	; 17
 384:	08 95       	ret

00000386 <DIO_WRITE_PIN>:
	}
}

void DIO_WRITE_PIN(unsigned char port, unsigned char pin, unsigned char data )
{
	switch(port)
 386:	84 34       	cpi	r24, 0x44	; 68
 388:	09 f4       	brne	.+2      	; 0x38c <DIO_WRITE_PIN+0x6>
 38a:	71 c0       	rjmp	.+226    	; 0x46e <DIO_WRITE_PIN+0xe8>
 38c:	85 34       	cpi	r24, 0x45	; 69
 38e:	48 f4       	brcc	.+18     	; 0x3a2 <DIO_WRITE_PIN+0x1c>
 390:	82 34       	cpi	r24, 0x42	; 66
 392:	99 f1       	breq	.+102    	; 0x3fa <DIO_WRITE_PIN+0x74>
 394:	83 34       	cpi	r24, 0x43	; 67
 396:	08 f0       	brcs	.+2      	; 0x39a <DIO_WRITE_PIN+0x14>
 398:	4d c0       	rjmp	.+154    	; 0x434 <DIO_WRITE_PIN+0xae>
 39a:	81 34       	cpi	r24, 0x41	; 65
 39c:	09 f0       	breq	.+2      	; 0x3a0 <DIO_WRITE_PIN+0x1a>
 39e:	83 c0       	rjmp	.+262    	; 0x4a6 <DIO_WRITE_PIN+0x120>
 3a0:	0f c0       	rjmp	.+30     	; 0x3c0 <DIO_WRITE_PIN+0x3a>
 3a2:	82 36       	cpi	r24, 0x62	; 98
 3a4:	51 f1       	breq	.+84     	; 0x3fa <DIO_WRITE_PIN+0x74>
 3a6:	83 36       	cpi	r24, 0x63	; 99
 3a8:	20 f4       	brcc	.+8      	; 0x3b2 <DIO_WRITE_PIN+0x2c>
 3aa:	81 36       	cpi	r24, 0x61	; 97
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <DIO_WRITE_PIN+0x2a>
 3ae:	7b c0       	rjmp	.+246    	; 0x4a6 <DIO_WRITE_PIN+0x120>
 3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <DIO_WRITE_PIN+0x3a>
 3b2:	83 36       	cpi	r24, 0x63	; 99
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <DIO_WRITE_PIN+0x32>
 3b6:	3e c0       	rjmp	.+124    	; 0x434 <DIO_WRITE_PIN+0xae>
 3b8:	84 36       	cpi	r24, 0x64	; 100
 3ba:	09 f0       	breq	.+2      	; 0x3be <DIO_WRITE_PIN+0x38>
 3bc:	74 c0       	rjmp	.+232    	; 0x4a6 <DIO_WRITE_PIN+0x120>
 3be:	57 c0       	rjmp	.+174    	; 0x46e <DIO_WRITE_PIN+0xe8>
	{
		case 'A':
		case 'a':
		if (data == 1)
 3c0:	41 30       	cpi	r20, 0x01	; 1
 3c2:	69 f4       	brne	.+26     	; 0x3de <DIO_WRITE_PIN+0x58>
		{
			SET_BIT(PORTA,pin);
 3c4:	2b b3       	in	r18, 0x1b	; 27
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	ac 01       	movw	r20, r24
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_WRITE_PIN+0x4c>
 3ce:	44 0f       	add	r20, r20
 3d0:	55 1f       	adc	r21, r21
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_WRITE_PIN+0x48>
 3d6:	ba 01       	movw	r22, r20
 3d8:	62 2b       	or	r22, r18
 3da:	6b bb       	out	0x1b, r22	; 27
 3dc:	08 95       	ret
		} 
		else
		{
			CLEAR_BIT(PORTA,pin);
 3de:	2b b3       	in	r18, 0x1b	; 27
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	ac 01       	movw	r20, r24
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_WRITE_PIN+0x66>
 3e8:	44 0f       	add	r20, r20
 3ea:	55 1f       	adc	r21, r21
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_WRITE_PIN+0x62>
 3f0:	ba 01       	movw	r22, r20
 3f2:	60 95       	com	r22
 3f4:	62 23       	and	r22, r18
 3f6:	6b bb       	out	0x1b, r22	; 27
 3f8:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (data == 1)
 3fa:	41 30       	cpi	r20, 0x01	; 1
 3fc:	69 f4       	brne	.+26     	; 0x418 <DIO_WRITE_PIN+0x92>
		{
			SET_BIT(PORTB,pin);
 3fe:	28 b3       	in	r18, 0x18	; 24
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	ac 01       	movw	r20, r24
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_WRITE_PIN+0x86>
 408:	44 0f       	add	r20, r20
 40a:	55 1f       	adc	r21, r21
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_WRITE_PIN+0x82>
 410:	ba 01       	movw	r22, r20
 412:	62 2b       	or	r22, r18
 414:	68 bb       	out	0x18, r22	; 24
 416:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
 418:	28 b3       	in	r18, 0x18	; 24
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	ac 01       	movw	r20, r24
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_WRITE_PIN+0xa0>
 422:	44 0f       	add	r20, r20
 424:	55 1f       	adc	r21, r21
 426:	6a 95       	dec	r22
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_WRITE_PIN+0x9c>
 42a:	ba 01       	movw	r22, r20
 42c:	60 95       	com	r22
 42e:	62 23       	and	r22, r18
 430:	68 bb       	out	0x18, r22	; 24
 432:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (data == 1)
 434:	41 30       	cpi	r20, 0x01	; 1
 436:	69 f4       	brne	.+26     	; 0x452 <DIO_WRITE_PIN+0xcc>
		{
			SET_BIT(PORTC,pin);
 438:	25 b3       	in	r18, 0x15	; 21
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	ac 01       	movw	r20, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_WRITE_PIN+0xc0>
 442:	44 0f       	add	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_WRITE_PIN+0xbc>
 44a:	ba 01       	movw	r22, r20
 44c:	62 2b       	or	r22, r18
 44e:	65 bb       	out	0x15, r22	; 21
 450:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
 452:	25 b3       	in	r18, 0x15	; 21
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	ac 01       	movw	r20, r24
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_WRITE_PIN+0xda>
 45c:	44 0f       	add	r20, r20
 45e:	55 1f       	adc	r21, r21
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_WRITE_PIN+0xd6>
 464:	ba 01       	movw	r22, r20
 466:	60 95       	com	r22
 468:	62 23       	and	r22, r18
 46a:	65 bb       	out	0x15, r22	; 21
 46c:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (data == 1)
 46e:	41 30       	cpi	r20, 0x01	; 1
 470:	69 f4       	brne	.+26     	; 0x48c <DIO_WRITE_PIN+0x106>
		{
			SET_BIT(PORTD,pin);
 472:	22 b3       	in	r18, 0x12	; 18
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	ac 01       	movw	r20, r24
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_WRITE_PIN+0xfa>
 47c:	44 0f       	add	r20, r20
 47e:	55 1f       	adc	r21, r21
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_WRITE_PIN+0xf6>
 484:	ba 01       	movw	r22, r20
 486:	62 2b       	or	r22, r18
 488:	62 bb       	out	0x12, r22	; 18
 48a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
 48c:	22 b3       	in	r18, 0x12	; 18
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	ac 01       	movw	r20, r24
 494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_WRITE_PIN+0x114>
 496:	44 0f       	add	r20, r20
 498:	55 1f       	adc	r21, r21
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_WRITE_PIN+0x110>
 49e:	ba 01       	movw	r22, r20
 4a0:	60 95       	com	r22
 4a2:	62 23       	and	r22, r18
 4a4:	62 bb       	out	0x12, r22	; 18
 4a6:	08 95       	ret

000004a8 <DIO_WRITE_PORT>:
	}
}

void DIO_WRITE_PORT(unsigned char port, unsigned char data)
{
	switch(port)
 4a8:	84 34       	cpi	r24, 0x44	; 68
 4aa:	d9 f0       	breq	.+54     	; 0x4e2 <DIO_WRITE_PORT+0x3a>
 4ac:	85 34       	cpi	r24, 0x45	; 69
 4ae:	38 f4       	brcc	.+14     	; 0x4be <DIO_WRITE_PORT+0x16>
 4b0:	82 34       	cpi	r24, 0x42	; 66
 4b2:	99 f0       	breq	.+38     	; 0x4da <DIO_WRITE_PORT+0x32>
 4b4:	83 34       	cpi	r24, 0x43	; 67
 4b6:	98 f4       	brcc	.+38     	; 0x4de <DIO_WRITE_PORT+0x36>
 4b8:	81 34       	cpi	r24, 0x41	; 65
 4ba:	a1 f4       	brne	.+40     	; 0x4e4 <DIO_WRITE_PORT+0x3c>
 4bc:	0c c0       	rjmp	.+24     	; 0x4d6 <DIO_WRITE_PORT+0x2e>
 4be:	82 36       	cpi	r24, 0x62	; 98
 4c0:	61 f0       	breq	.+24     	; 0x4da <DIO_WRITE_PORT+0x32>
 4c2:	83 36       	cpi	r24, 0x63	; 99
 4c4:	18 f4       	brcc	.+6      	; 0x4cc <DIO_WRITE_PORT+0x24>
 4c6:	81 36       	cpi	r24, 0x61	; 97
 4c8:	69 f4       	brne	.+26     	; 0x4e4 <DIO_WRITE_PORT+0x3c>
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <DIO_WRITE_PORT+0x2e>
 4cc:	83 36       	cpi	r24, 0x63	; 99
 4ce:	39 f0       	breq	.+14     	; 0x4de <DIO_WRITE_PORT+0x36>
 4d0:	84 36       	cpi	r24, 0x64	; 100
 4d2:	41 f4       	brne	.+16     	; 0x4e4 <DIO_WRITE_PORT+0x3c>
 4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <DIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=data;
 4d6:	6b bb       	out	0x1b, r22	; 27
		break;
 4d8:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB=data;
 4da:	68 bb       	out	0x18, r22	; 24
		break;
 4dc:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC=data;
 4de:	65 bb       	out	0x15, r22	; 21
		break;
 4e0:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD=data;
 4e2:	62 bb       	out	0x12, r22	; 18
 4e4:	08 95       	ret

000004e6 <DIO_TOG_PIN>:
	}
}

void DIO_TOG_PIN(unsigned char port, unsigned char pin)
{
	switch (port)
 4e6:	84 34       	cpi	r24, 0x44	; 68
 4e8:	09 f4       	brne	.+2      	; 0x4ec <DIO_TOG_PIN+0x6>
 4ea:	3d c0       	rjmp	.+122    	; 0x566 <DIO_TOG_PIN+0x80>
 4ec:	85 34       	cpi	r24, 0x45	; 69
 4ee:	40 f4       	brcc	.+16     	; 0x500 <DIO_TOG_PIN+0x1a>
 4f0:	82 34       	cpi	r24, 0x42	; 66
 4f2:	f9 f0       	breq	.+62     	; 0x532 <DIO_TOG_PIN+0x4c>
 4f4:	83 34       	cpi	r24, 0x43	; 67
 4f6:	50 f5       	brcc	.+84     	; 0x54c <DIO_TOG_PIN+0x66>
 4f8:	81 34       	cpi	r24, 0x41	; 65
 4fa:	09 f0       	breq	.+2      	; 0x4fe <DIO_TOG_PIN+0x18>
 4fc:	40 c0       	rjmp	.+128    	; 0x57e <DIO_TOG_PIN+0x98>
 4fe:	0c c0       	rjmp	.+24     	; 0x518 <DIO_TOG_PIN+0x32>
 500:	82 36       	cpi	r24, 0x62	; 98
 502:	b9 f0       	breq	.+46     	; 0x532 <DIO_TOG_PIN+0x4c>
 504:	83 36       	cpi	r24, 0x63	; 99
 506:	18 f4       	brcc	.+6      	; 0x50e <DIO_TOG_PIN+0x28>
 508:	81 36       	cpi	r24, 0x61	; 97
 50a:	c9 f5       	brne	.+114    	; 0x57e <DIO_TOG_PIN+0x98>
 50c:	05 c0       	rjmp	.+10     	; 0x518 <DIO_TOG_PIN+0x32>
 50e:	83 36       	cpi	r24, 0x63	; 99
 510:	e9 f0       	breq	.+58     	; 0x54c <DIO_TOG_PIN+0x66>
 512:	84 36       	cpi	r24, 0x64	; 100
 514:	a1 f5       	brne	.+104    	; 0x57e <DIO_TOG_PIN+0x98>
 516:	27 c0       	rjmp	.+78     	; 0x566 <DIO_TOG_PIN+0x80>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA,pin);
 518:	2b b3       	in	r18, 0x1b	; 27
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	ac 01       	movw	r20, r24
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_TOG_PIN+0x40>
 522:	44 0f       	add	r20, r20
 524:	55 1f       	adc	r21, r21
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_TOG_PIN+0x3c>
 52a:	ba 01       	movw	r22, r20
 52c:	62 27       	eor	r22, r18
 52e:	6b bb       	out	0x1b, r22	; 27
		break;
 530:	08 95       	ret
		
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB,pin);
 532:	28 b3       	in	r18, 0x18	; 24
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	ac 01       	movw	r20, r24
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_TOG_PIN+0x5a>
 53c:	44 0f       	add	r20, r20
 53e:	55 1f       	adc	r21, r21
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_TOG_PIN+0x56>
 544:	ba 01       	movw	r22, r20
 546:	62 27       	eor	r22, r18
 548:	68 bb       	out	0x18, r22	; 24
		break;
 54a:	08 95       	ret
		
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC,pin);
 54c:	25 b3       	in	r18, 0x15	; 21
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	ac 01       	movw	r20, r24
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_TOG_PIN+0x74>
 556:	44 0f       	add	r20, r20
 558:	55 1f       	adc	r21, r21
 55a:	6a 95       	dec	r22
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_TOG_PIN+0x70>
 55e:	ba 01       	movw	r22, r20
 560:	62 27       	eor	r22, r18
 562:	65 bb       	out	0x15, r22	; 21
		break;
 564:	08 95       	ret
		
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD,pin);
 566:	22 b3       	in	r18, 0x12	; 18
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	ac 01       	movw	r20, r24
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_TOG_PIN+0x8e>
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_TOG_PIN+0x8a>
 578:	ba 01       	movw	r22, r20
 57a:	62 27       	eor	r22, r18
 57c:	62 bb       	out	0x12, r22	; 18
 57e:	08 95       	ret

00000580 <DIO_TOG_PORT>:
}


void DIO_TOG_PORT(unsigned char port)
{
	switch(port)
 580:	84 34       	cpi	r24, 0x44	; 68
 582:	09 f4       	brne	.+2      	; 0x586 <DIO_TOG_PORT+0x6>
 584:	7a c0       	rjmp	.+244    	; 0x67a <DIO_TOG_PORT+0xfa>
 586:	85 34       	cpi	r24, 0x45	; 69
 588:	48 f4       	brcc	.+18     	; 0x59c <DIO_TOG_PORT+0x1c>
 58a:	82 34       	cpi	r24, 0x42	; 66
 58c:	b1 f1       	breq	.+108    	; 0x5fa <DIO_TOG_PORT+0x7a>
 58e:	83 34       	cpi	r24, 0x43	; 67
 590:	08 f0       	brcs	.+2      	; 0x594 <DIO_TOG_PORT+0x14>
 592:	53 c0       	rjmp	.+166    	; 0x63a <DIO_TOG_PORT+0xba>
 594:	81 34       	cpi	r24, 0x41	; 65
 596:	09 f0       	breq	.+2      	; 0x59a <DIO_TOG_PORT+0x1a>
 598:	8f c0       	rjmp	.+286    	; 0x6b8 <DIO_TOG_PORT+0x138>
 59a:	0f c0       	rjmp	.+30     	; 0x5ba <DIO_TOG_PORT+0x3a>
 59c:	82 36       	cpi	r24, 0x62	; 98
 59e:	69 f1       	breq	.+90     	; 0x5fa <DIO_TOG_PORT+0x7a>
 5a0:	83 36       	cpi	r24, 0x63	; 99
 5a2:	20 f4       	brcc	.+8      	; 0x5ac <DIO_TOG_PORT+0x2c>
 5a4:	81 36       	cpi	r24, 0x61	; 97
 5a6:	09 f0       	breq	.+2      	; 0x5aa <DIO_TOG_PORT+0x2a>
 5a8:	87 c0       	rjmp	.+270    	; 0x6b8 <DIO_TOG_PORT+0x138>
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <DIO_TOG_PORT+0x3a>
 5ac:	83 36       	cpi	r24, 0x63	; 99
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <DIO_TOG_PORT+0x32>
 5b0:	44 c0       	rjmp	.+136    	; 0x63a <DIO_TOG_PORT+0xba>
 5b2:	84 36       	cpi	r24, 0x64	; 100
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <DIO_TOG_PORT+0x38>
 5b6:	80 c0       	rjmp	.+256    	; 0x6b8 <DIO_TOG_PORT+0x138>
 5b8:	60 c0       	rjmp	.+192    	; 0x67a <DIO_TOG_PORT+0xfa>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA,0);
 5ba:	9b b3       	in	r25, 0x1b	; 27
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	89 27       	eor	r24, r25
 5c0:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,1);
 5c2:	9b b3       	in	r25, 0x1b	; 27
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	89 27       	eor	r24, r25
 5c8:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,2);
 5ca:	9b b3       	in	r25, 0x1b	; 27
 5cc:	84 e0       	ldi	r24, 0x04	; 4
 5ce:	89 27       	eor	r24, r25
 5d0:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,3);
 5d2:	9b b3       	in	r25, 0x1b	; 27
 5d4:	88 e0       	ldi	r24, 0x08	; 8
 5d6:	89 27       	eor	r24, r25
 5d8:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,4);
 5da:	9b b3       	in	r25, 0x1b	; 27
 5dc:	80 e1       	ldi	r24, 0x10	; 16
 5de:	89 27       	eor	r24, r25
 5e0:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,5);
 5e2:	9b b3       	in	r25, 0x1b	; 27
 5e4:	80 e2       	ldi	r24, 0x20	; 32
 5e6:	89 27       	eor	r24, r25
 5e8:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,6);
 5ea:	9b b3       	in	r25, 0x1b	; 27
 5ec:	80 e4       	ldi	r24, 0x40	; 64
 5ee:	89 27       	eor	r24, r25
 5f0:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,7);
 5f2:	8b b3       	in	r24, 0x1b	; 27
 5f4:	80 58       	subi	r24, 0x80	; 128
 5f6:	8b bb       	out	0x1b, r24	; 27
		break;
 5f8:	08 95       	ret
		
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB,0);
 5fa:	98 b3       	in	r25, 0x18	; 24
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	89 27       	eor	r24, r25
 600:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,1);
 602:	98 b3       	in	r25, 0x18	; 24
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	89 27       	eor	r24, r25
 608:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,2);
 60a:	98 b3       	in	r25, 0x18	; 24
 60c:	84 e0       	ldi	r24, 0x04	; 4
 60e:	89 27       	eor	r24, r25
 610:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,3);
 612:	98 b3       	in	r25, 0x18	; 24
 614:	88 e0       	ldi	r24, 0x08	; 8
 616:	89 27       	eor	r24, r25
 618:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,4);
 61a:	98 b3       	in	r25, 0x18	; 24
 61c:	80 e1       	ldi	r24, 0x10	; 16
 61e:	89 27       	eor	r24, r25
 620:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,5);
 622:	98 b3       	in	r25, 0x18	; 24
 624:	80 e2       	ldi	r24, 0x20	; 32
 626:	89 27       	eor	r24, r25
 628:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,6);
 62a:	98 b3       	in	r25, 0x18	; 24
 62c:	80 e4       	ldi	r24, 0x40	; 64
 62e:	89 27       	eor	r24, r25
 630:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,7);
 632:	88 b3       	in	r24, 0x18	; 24
 634:	80 58       	subi	r24, 0x80	; 128
 636:	88 bb       	out	0x18, r24	; 24
		break;
 638:	08 95       	ret
		
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC,0);
 63a:	95 b3       	in	r25, 0x15	; 21
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	89 27       	eor	r24, r25
 640:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,1);
 642:	95 b3       	in	r25, 0x15	; 21
 644:	82 e0       	ldi	r24, 0x02	; 2
 646:	89 27       	eor	r24, r25
 648:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,2);
 64a:	95 b3       	in	r25, 0x15	; 21
 64c:	84 e0       	ldi	r24, 0x04	; 4
 64e:	89 27       	eor	r24, r25
 650:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,3);
 652:	95 b3       	in	r25, 0x15	; 21
 654:	88 e0       	ldi	r24, 0x08	; 8
 656:	89 27       	eor	r24, r25
 658:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,4);
 65a:	95 b3       	in	r25, 0x15	; 21
 65c:	80 e1       	ldi	r24, 0x10	; 16
 65e:	89 27       	eor	r24, r25
 660:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,5);
 662:	95 b3       	in	r25, 0x15	; 21
 664:	80 e2       	ldi	r24, 0x20	; 32
 666:	89 27       	eor	r24, r25
 668:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,6);
 66a:	95 b3       	in	r25, 0x15	; 21
 66c:	80 e4       	ldi	r24, 0x40	; 64
 66e:	89 27       	eor	r24, r25
 670:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,7);
 672:	85 b3       	in	r24, 0x15	; 21
 674:	80 58       	subi	r24, 0x80	; 128
 676:	85 bb       	out	0x15, r24	; 21
		break;
 678:	08 95       	ret
		
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD,0);
 67a:	92 b3       	in	r25, 0x12	; 18
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	89 27       	eor	r24, r25
 680:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,1);
 682:	92 b3       	in	r25, 0x12	; 18
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	89 27       	eor	r24, r25
 688:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,2);
 68a:	92 b3       	in	r25, 0x12	; 18
 68c:	84 e0       	ldi	r24, 0x04	; 4
 68e:	89 27       	eor	r24, r25
 690:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,3);
 692:	92 b3       	in	r25, 0x12	; 18
 694:	88 e0       	ldi	r24, 0x08	; 8
 696:	89 27       	eor	r24, r25
 698:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,4);
 69a:	92 b3       	in	r25, 0x12	; 18
 69c:	80 e1       	ldi	r24, 0x10	; 16
 69e:	89 27       	eor	r24, r25
 6a0:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,5);
 6a2:	92 b3       	in	r25, 0x12	; 18
 6a4:	80 e2       	ldi	r24, 0x20	; 32
 6a6:	89 27       	eor	r24, r25
 6a8:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,6);
 6aa:	92 b3       	in	r25, 0x12	; 18
 6ac:	80 e4       	ldi	r24, 0x40	; 64
 6ae:	89 27       	eor	r24, r25
 6b0:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,7);
 6b2:	82 b3       	in	r24, 0x12	; 18
 6b4:	80 58       	subi	r24, 0x80	; 128
 6b6:	82 bb       	out	0x12, r24	; 18
 6b8:	08 95       	ret

000006ba <DIO_READ_PIN>:

unsigned char DIO_READ_PIN(unsigned char port, unsigned char pin)
{
	unsigned char data;
	
	switch(port)
 6ba:	84 34       	cpi	r24, 0x44	; 68
 6bc:	09 f4       	brne	.+2      	; 0x6c0 <DIO_READ_PIN+0x6>
 6be:	51 c0       	rjmp	.+162    	; 0x762 <DIO_READ_PIN+0xa8>
 6c0:	85 34       	cpi	r24, 0x45	; 69
 6c2:	40 f4       	brcc	.+16     	; 0x6d4 <DIO_READ_PIN+0x1a>
 6c4:	82 34       	cpi	r24, 0x42	; 66
 6c6:	39 f1       	breq	.+78     	; 0x716 <DIO_READ_PIN+0x5c>
 6c8:	83 34       	cpi	r24, 0x43	; 67
 6ca:	c0 f5       	brcc	.+112    	; 0x73c <DIO_READ_PIN+0x82>
 6cc:	81 34       	cpi	r24, 0x41	; 65
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <DIO_READ_PIN+0x18>
 6d0:	5a c0       	rjmp	.+180    	; 0x786 <DIO_READ_PIN+0xcc>
 6d2:	0e c0       	rjmp	.+28     	; 0x6f0 <DIO_READ_PIN+0x36>
 6d4:	82 36       	cpi	r24, 0x62	; 98
 6d6:	f9 f0       	breq	.+62     	; 0x716 <DIO_READ_PIN+0x5c>
 6d8:	83 36       	cpi	r24, 0x63	; 99
 6da:	20 f4       	brcc	.+8      	; 0x6e4 <DIO_READ_PIN+0x2a>
 6dc:	81 36       	cpi	r24, 0x61	; 97
 6de:	09 f0       	breq	.+2      	; 0x6e2 <DIO_READ_PIN+0x28>
 6e0:	52 c0       	rjmp	.+164    	; 0x786 <DIO_READ_PIN+0xcc>
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <DIO_READ_PIN+0x36>
 6e4:	83 36       	cpi	r24, 0x63	; 99
 6e6:	51 f1       	breq	.+84     	; 0x73c <DIO_READ_PIN+0x82>
 6e8:	84 36       	cpi	r24, 0x64	; 100
 6ea:	09 f0       	breq	.+2      	; 0x6ee <DIO_READ_PIN+0x34>
 6ec:	4c c0       	rjmp	.+152    	; 0x786 <DIO_READ_PIN+0xcc>
 6ee:	39 c0       	rjmp	.+114    	; 0x762 <DIO_READ_PIN+0xa8>
	{
		case 'A':
		case 'a':
		data=READ_BIT(PINA,pin);
 6f0:	29 b3       	in	r18, 0x19	; 25
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	06 2e       	mov	r0, r22
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_READ_PIN+0x44>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	0a 94       	dec	r0
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_READ_PIN+0x40>
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	82 23       	and	r24, r18
 706:	93 23       	and	r25, r19
 708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_READ_PIN+0x54>
 70a:	95 95       	asr	r25
 70c:	87 95       	ror	r24
 70e:	6a 95       	dec	r22
 710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_READ_PIN+0x50>
 712:	98 2f       	mov	r25, r24
		break;
 714:	38 c0       	rjmp	.+112    	; 0x786 <DIO_READ_PIN+0xcc>
		
		case 'B':
		case 'b':
		data=READ_BIT(PINB,pin);
 716:	26 b3       	in	r18, 0x16	; 22
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	06 2e       	mov	r0, r22
 71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_READ_PIN+0x6a>
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	0a 94       	dec	r0
 726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_READ_PIN+0x66>
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	82 23       	and	r24, r18
 72c:	93 23       	and	r25, r19
 72e:	02 c0       	rjmp	.+4      	; 0x734 <DIO_READ_PIN+0x7a>
 730:	95 95       	asr	r25
 732:	87 95       	ror	r24
 734:	6a 95       	dec	r22
 736:	e2 f7       	brpl	.-8      	; 0x730 <DIO_READ_PIN+0x76>
 738:	98 2f       	mov	r25, r24
		break;
 73a:	25 c0       	rjmp	.+74     	; 0x786 <DIO_READ_PIN+0xcc>
		
		case 'C':
		case 'c':
		data=READ_BIT(PINC,pin);
 73c:	23 b3       	in	r18, 0x13	; 19
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	06 2e       	mov	r0, r22
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_READ_PIN+0x90>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	0a 94       	dec	r0
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_READ_PIN+0x8c>
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	82 23       	and	r24, r18
 752:	93 23       	and	r25, r19
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_READ_PIN+0xa0>
 756:	95 95       	asr	r25
 758:	87 95       	ror	r24
 75a:	6a 95       	dec	r22
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_READ_PIN+0x9c>
 75e:	98 2f       	mov	r25, r24
		break;
 760:	12 c0       	rjmp	.+36     	; 0x786 <DIO_READ_PIN+0xcc>
		
		case 'D':
		case 'd':
		data=READ_BIT(PIND,pin);
 762:	20 b3       	in	r18, 0x10	; 16
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	06 2e       	mov	r0, r22
 76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_READ_PIN+0xb6>
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	0a 94       	dec	r0
 772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_READ_PIN+0xb2>
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	82 23       	and	r24, r18
 778:	93 23       	and	r25, r19
 77a:	02 c0       	rjmp	.+4      	; 0x780 <DIO_READ_PIN+0xc6>
 77c:	95 95       	asr	r25
 77e:	87 95       	ror	r24
 780:	6a 95       	dec	r22
 782:	e2 f7       	brpl	.-8      	; 0x77c <DIO_READ_PIN+0xc2>
 784:	98 2f       	mov	r25, r24
		break;
	}
	
	return data;
}
 786:	89 2f       	mov	r24, r25
 788:	08 95       	ret

0000078a <DIO_READ_PORT>:

unsigned char DIO_READ_PORT(unsigned char port)
{
	unsigned char data;
	switch(port)
 78a:	84 34       	cpi	r24, 0x44	; 68
 78c:	d9 f0       	breq	.+54     	; 0x7c4 <DIO_READ_PORT+0x3a>
 78e:	85 34       	cpi	r24, 0x45	; 69
 790:	38 f4       	brcc	.+14     	; 0x7a0 <DIO_READ_PORT+0x16>
 792:	82 34       	cpi	r24, 0x42	; 66
 794:	99 f0       	breq	.+38     	; 0x7bc <DIO_READ_PORT+0x32>
 796:	83 34       	cpi	r24, 0x43	; 67
 798:	98 f4       	brcc	.+38     	; 0x7c0 <DIO_READ_PORT+0x36>
 79a:	81 34       	cpi	r24, 0x41	; 65
 79c:	a1 f4       	brne	.+40     	; 0x7c6 <DIO_READ_PORT+0x3c>
 79e:	0c c0       	rjmp	.+24     	; 0x7b8 <DIO_READ_PORT+0x2e>
 7a0:	82 36       	cpi	r24, 0x62	; 98
 7a2:	61 f0       	breq	.+24     	; 0x7bc <DIO_READ_PORT+0x32>
 7a4:	83 36       	cpi	r24, 0x63	; 99
 7a6:	18 f4       	brcc	.+6      	; 0x7ae <DIO_READ_PORT+0x24>
 7a8:	81 36       	cpi	r24, 0x61	; 97
 7aa:	69 f4       	brne	.+26     	; 0x7c6 <DIO_READ_PORT+0x3c>
 7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <DIO_READ_PORT+0x2e>
 7ae:	83 36       	cpi	r24, 0x63	; 99
 7b0:	39 f0       	breq	.+14     	; 0x7c0 <DIO_READ_PORT+0x36>
 7b2:	84 36       	cpi	r24, 0x64	; 100
 7b4:	41 f4       	brne	.+16     	; 0x7c6 <DIO_READ_PORT+0x3c>
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		data=PINA;
 7b8:	99 b3       	in	r25, 0x19	; 25
		break;
 7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <DIO_READ_PORT+0x3c>
		
		case 'B':
		case 'b':
		data=PINB;
 7bc:	96 b3       	in	r25, 0x16	; 22
		break;
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <DIO_READ_PORT+0x3c>
		
		case 'C':
		case 'c':
		data=PINC;
 7c0:	93 b3       	in	r25, 0x13	; 19
		break;
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <DIO_READ_PORT+0x3c>
		
		case 'D':
		case 'd':
		data=PIND;
 7c4:	90 b3       	in	r25, 0x10	; 16
		break;
		
	}
	
	return data;
}
 7c6:	89 2f       	mov	r24, r25
 7c8:	08 95       	ret

000007ca <DIO_ACTIVE_INTERNAL_PULL_UP>:

void DIO_ACTIVE_INTERNAL_PULL_UP(unsigned char port, unsigned char pin)
{
	switch(port)
 7ca:	84 34       	cpi	r24, 0x44	; 68
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <DIO_ACTIVE_INTERNAL_PULL_UP+0x6>
 7ce:	3d c0       	rjmp	.+122    	; 0x84a <DIO_ACTIVE_INTERNAL_PULL_UP+0x80>
 7d0:	85 34       	cpi	r24, 0x45	; 69
 7d2:	40 f4       	brcc	.+16     	; 0x7e4 <DIO_ACTIVE_INTERNAL_PULL_UP+0x1a>
 7d4:	82 34       	cpi	r24, 0x42	; 66
 7d6:	f9 f0       	breq	.+62     	; 0x816 <DIO_ACTIVE_INTERNAL_PULL_UP+0x4c>
 7d8:	83 34       	cpi	r24, 0x43	; 67
 7da:	50 f5       	brcc	.+84     	; 0x830 <DIO_ACTIVE_INTERNAL_PULL_UP+0x66>
 7dc:	81 34       	cpi	r24, 0x41	; 65
 7de:	09 f0       	breq	.+2      	; 0x7e2 <DIO_ACTIVE_INTERNAL_PULL_UP+0x18>
 7e0:	40 c0       	rjmp	.+128    	; 0x862 <__stack+0x3>
 7e2:	0c c0       	rjmp	.+24     	; 0x7fc <DIO_ACTIVE_INTERNAL_PULL_UP+0x32>
 7e4:	82 36       	cpi	r24, 0x62	; 98
 7e6:	b9 f0       	breq	.+46     	; 0x816 <DIO_ACTIVE_INTERNAL_PULL_UP+0x4c>
 7e8:	83 36       	cpi	r24, 0x63	; 99
 7ea:	18 f4       	brcc	.+6      	; 0x7f2 <DIO_ACTIVE_INTERNAL_PULL_UP+0x28>
 7ec:	81 36       	cpi	r24, 0x61	; 97
 7ee:	c9 f5       	brne	.+114    	; 0x862 <__stack+0x3>
 7f0:	05 c0       	rjmp	.+10     	; 0x7fc <DIO_ACTIVE_INTERNAL_PULL_UP+0x32>
 7f2:	83 36       	cpi	r24, 0x63	; 99
 7f4:	e9 f0       	breq	.+58     	; 0x830 <DIO_ACTIVE_INTERNAL_PULL_UP+0x66>
 7f6:	84 36       	cpi	r24, 0x64	; 100
 7f8:	a1 f5       	brne	.+104    	; 0x862 <__stack+0x3>
 7fa:	27 c0       	rjmp	.+78     	; 0x84a <DIO_ACTIVE_INTERNAL_PULL_UP+0x80>
	{
		case 'A':
		case 'a':
		SET_BIT(PORTA,pin);
 7fc:	2b b3       	in	r18, 0x1b	; 27
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	ac 01       	movw	r20, r24
 804:	02 c0       	rjmp	.+4      	; 0x80a <DIO_ACTIVE_INTERNAL_PULL_UP+0x40>
 806:	44 0f       	add	r20, r20
 808:	55 1f       	adc	r21, r21
 80a:	6a 95       	dec	r22
 80c:	e2 f7       	brpl	.-8      	; 0x806 <DIO_ACTIVE_INTERNAL_PULL_UP+0x3c>
 80e:	ba 01       	movw	r22, r20
 810:	62 2b       	or	r22, r18
 812:	6b bb       	out	0x1b, r22	; 27
		break;
 814:	08 95       	ret
		
		case 'B':
		case 'b':
		SET_BIT(PORTB,pin);
 816:	28 b3       	in	r18, 0x18	; 24
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	ac 01       	movw	r20, r24
 81e:	02 c0       	rjmp	.+4      	; 0x824 <DIO_ACTIVE_INTERNAL_PULL_UP+0x5a>
 820:	44 0f       	add	r20, r20
 822:	55 1f       	adc	r21, r21
 824:	6a 95       	dec	r22
 826:	e2 f7       	brpl	.-8      	; 0x820 <DIO_ACTIVE_INTERNAL_PULL_UP+0x56>
 828:	ba 01       	movw	r22, r20
 82a:	62 2b       	or	r22, r18
 82c:	68 bb       	out	0x18, r22	; 24
		break;
 82e:	08 95       	ret
		
		case 'C':
		case 'c':
		SET_BIT(PORTC,pin);
 830:	25 b3       	in	r18, 0x15	; 21
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	ac 01       	movw	r20, r24
 838:	02 c0       	rjmp	.+4      	; 0x83e <DIO_ACTIVE_INTERNAL_PULL_UP+0x74>
 83a:	44 0f       	add	r20, r20
 83c:	55 1f       	adc	r21, r21
 83e:	6a 95       	dec	r22
 840:	e2 f7       	brpl	.-8      	; 0x83a <DIO_ACTIVE_INTERNAL_PULL_UP+0x70>
 842:	ba 01       	movw	r22, r20
 844:	62 2b       	or	r22, r18
 846:	65 bb       	out	0x15, r22	; 21
		break;
 848:	08 95       	ret
		
		case 'D':
		case 'd':
		SET_BIT(PORTD,pin);
 84a:	22 b3       	in	r18, 0x12	; 18
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	ac 01       	movw	r20, r24
 852:	02 c0       	rjmp	.+4      	; 0x858 <DIO_ACTIVE_INTERNAL_PULL_UP+0x8e>
 854:	44 0f       	add	r20, r20
 856:	55 1f       	adc	r21, r21
 858:	6a 95       	dec	r22
 85a:	e2 f7       	brpl	.-8      	; 0x854 <DIO_ACTIVE_INTERNAL_PULL_UP+0x8a>
 85c:	ba 01       	movw	r22, r20
 85e:	62 2b       	or	r22, r18
 860:	62 bb       	out	0x12, r22	; 18
 862:	08 95       	ret

00000864 <DIO_WRITE_LOW_NIBBLE>:
	}
}

void DIO_WRITE_LOW_NIBBLE(unsigned char port, unsigned char data)
{
	data&=0x0f;
 864:	6f 70       	andi	r22, 0x0F	; 15
	
	switch(port)
 866:	84 34       	cpi	r24, 0x44	; 68
 868:	51 f1       	breq	.+84     	; 0x8be <DIO_WRITE_LOW_NIBBLE+0x5a>
 86a:	85 34       	cpi	r24, 0x45	; 69
 86c:	38 f4       	brcc	.+14     	; 0x87c <DIO_WRITE_LOW_NIBBLE+0x18>
 86e:	82 34       	cpi	r24, 0x42	; 66
 870:	c1 f0       	breq	.+48     	; 0x8a2 <DIO_WRITE_LOW_NIBBLE+0x3e>
 872:	83 34       	cpi	r24, 0x43	; 67
 874:	e8 f4       	brcc	.+58     	; 0x8b0 <DIO_WRITE_LOW_NIBBLE+0x4c>
 876:	81 34       	cpi	r24, 0x41	; 65
 878:	41 f5       	brne	.+80     	; 0x8ca <DIO_WRITE_LOW_NIBBLE+0x66>
 87a:	0c c0       	rjmp	.+24     	; 0x894 <DIO_WRITE_LOW_NIBBLE+0x30>
 87c:	82 36       	cpi	r24, 0x62	; 98
 87e:	89 f0       	breq	.+34     	; 0x8a2 <DIO_WRITE_LOW_NIBBLE+0x3e>
 880:	83 36       	cpi	r24, 0x63	; 99
 882:	18 f4       	brcc	.+6      	; 0x88a <DIO_WRITE_LOW_NIBBLE+0x26>
 884:	81 36       	cpi	r24, 0x61	; 97
 886:	09 f5       	brne	.+66     	; 0x8ca <DIO_WRITE_LOW_NIBBLE+0x66>
 888:	05 c0       	rjmp	.+10     	; 0x894 <DIO_WRITE_LOW_NIBBLE+0x30>
 88a:	83 36       	cpi	r24, 0x63	; 99
 88c:	89 f0       	breq	.+34     	; 0x8b0 <DIO_WRITE_LOW_NIBBLE+0x4c>
 88e:	84 36       	cpi	r24, 0x64	; 100
 890:	e1 f4       	brne	.+56     	; 0x8ca <DIO_WRITE_LOW_NIBBLE+0x66>
 892:	15 c0       	rjmp	.+42     	; 0x8be <DIO_WRITE_LOW_NIBBLE+0x5a>
	{
		case 'A':
		case 'a':
		PORTA&=0xf0;
 894:	8b b3       	in	r24, 0x1b	; 27
 896:	80 7f       	andi	r24, 0xF0	; 240
 898:	8b bb       	out	0x1b, r24	; 27
		PORTA|=data;
 89a:	8b b3       	in	r24, 0x1b	; 27
 89c:	68 2b       	or	r22, r24
 89e:	6b bb       	out	0x1b, r22	; 27
		break;
 8a0:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB&=0xf0;
 8a2:	88 b3       	in	r24, 0x18	; 24
 8a4:	80 7f       	andi	r24, 0xF0	; 240
 8a6:	88 bb       	out	0x18, r24	; 24
		PORTB|=data;
 8a8:	88 b3       	in	r24, 0x18	; 24
 8aa:	68 2b       	or	r22, r24
 8ac:	68 bb       	out	0x18, r22	; 24
		break;
 8ae:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC&=0xf0;
 8b0:	85 b3       	in	r24, 0x15	; 21
 8b2:	80 7f       	andi	r24, 0xF0	; 240
 8b4:	85 bb       	out	0x15, r24	; 21
		PORTC|=data;
 8b6:	85 b3       	in	r24, 0x15	; 21
 8b8:	68 2b       	or	r22, r24
 8ba:	65 bb       	out	0x15, r22	; 21
		break;
 8bc:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD&=0xf0;
 8be:	82 b3       	in	r24, 0x12	; 18
 8c0:	80 7f       	andi	r24, 0xF0	; 240
 8c2:	82 bb       	out	0x12, r24	; 18
		PORTD|=data;
 8c4:	82 b3       	in	r24, 0x12	; 18
 8c6:	68 2b       	or	r22, r24
 8c8:	62 bb       	out	0x12, r22	; 18
 8ca:	08 95       	ret

000008cc <DIO_WRITE_HIGH_NIBBLE>:
	}
}

void DIO_WRITE_HIGH_NIBBLE(unsigned char port, unsigned char data)
{
	data<<=4;
 8cc:	62 95       	swap	r22
 8ce:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(port)
 8d0:	84 34       	cpi	r24, 0x44	; 68
 8d2:	51 f1       	breq	.+84     	; 0x928 <DIO_WRITE_HIGH_NIBBLE+0x5c>
 8d4:	85 34       	cpi	r24, 0x45	; 69
 8d6:	38 f4       	brcc	.+14     	; 0x8e6 <DIO_WRITE_HIGH_NIBBLE+0x1a>
 8d8:	82 34       	cpi	r24, 0x42	; 66
 8da:	c1 f0       	breq	.+48     	; 0x90c <DIO_WRITE_HIGH_NIBBLE+0x40>
 8dc:	83 34       	cpi	r24, 0x43	; 67
 8de:	e8 f4       	brcc	.+58     	; 0x91a <DIO_WRITE_HIGH_NIBBLE+0x4e>
 8e0:	81 34       	cpi	r24, 0x41	; 65
 8e2:	41 f5       	brne	.+80     	; 0x934 <DIO_WRITE_HIGH_NIBBLE+0x68>
 8e4:	0c c0       	rjmp	.+24     	; 0x8fe <DIO_WRITE_HIGH_NIBBLE+0x32>
 8e6:	82 36       	cpi	r24, 0x62	; 98
 8e8:	89 f0       	breq	.+34     	; 0x90c <DIO_WRITE_HIGH_NIBBLE+0x40>
 8ea:	83 36       	cpi	r24, 0x63	; 99
 8ec:	18 f4       	brcc	.+6      	; 0x8f4 <DIO_WRITE_HIGH_NIBBLE+0x28>
 8ee:	81 36       	cpi	r24, 0x61	; 97
 8f0:	09 f5       	brne	.+66     	; 0x934 <DIO_WRITE_HIGH_NIBBLE+0x68>
 8f2:	05 c0       	rjmp	.+10     	; 0x8fe <DIO_WRITE_HIGH_NIBBLE+0x32>
 8f4:	83 36       	cpi	r24, 0x63	; 99
 8f6:	89 f0       	breq	.+34     	; 0x91a <DIO_WRITE_HIGH_NIBBLE+0x4e>
 8f8:	84 36       	cpi	r24, 0x64	; 100
 8fa:	e1 f4       	brne	.+56     	; 0x934 <DIO_WRITE_HIGH_NIBBLE+0x68>
 8fc:	15 c0       	rjmp	.+42     	; 0x928 <DIO_WRITE_HIGH_NIBBLE+0x5c>
	{
		case 'A':
		case 'a':
		PORTA&=0x0f;
 8fe:	8b b3       	in	r24, 0x1b	; 27
 900:	8f 70       	andi	r24, 0x0F	; 15
 902:	8b bb       	out	0x1b, r24	; 27
		PORTA|=data;
 904:	8b b3       	in	r24, 0x1b	; 27
 906:	68 2b       	or	r22, r24
 908:	6b bb       	out	0x1b, r22	; 27
		break;
 90a:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB&=0x0f;
 90c:	88 b3       	in	r24, 0x18	; 24
 90e:	8f 70       	andi	r24, 0x0F	; 15
 910:	88 bb       	out	0x18, r24	; 24
		PORTB|=data;
 912:	88 b3       	in	r24, 0x18	; 24
 914:	68 2b       	or	r22, r24
 916:	68 bb       	out	0x18, r22	; 24
		break;
 918:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC&=0x0f;
 91a:	85 b3       	in	r24, 0x15	; 21
 91c:	8f 70       	andi	r24, 0x0F	; 15
 91e:	85 bb       	out	0x15, r24	; 21
		PORTC|=data;
 920:	85 b3       	in	r24, 0x15	; 21
 922:	68 2b       	or	r22, r24
 924:	65 bb       	out	0x15, r22	; 21
		break;
 926:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD&=0x0f;
 928:	82 b3       	in	r24, 0x12	; 18
 92a:	8f 70       	andi	r24, 0x0F	; 15
 92c:	82 bb       	out	0x12, r24	; 18
		PORTD|=data;
 92e:	82 b3       	in	r24, 0x12	; 18
 930:	68 2b       	or	r22, r24
 932:	62 bb       	out	0x12, r22	; 18
 934:	08 95       	ret

00000936 <LCD_ENABLE>:
	LCD_SEND_CMD(CLEAR_SCREEN);
}

void LCD_ENABLE()
{
	DIO_WRITE_PIN(CTRL_PORT , EN , 1);
 936:	82 e6       	ldi	r24, 0x62	; 98
 938:	61 e0       	ldi	r22, 0x01	; 1
 93a:	41 e0       	ldi	r20, 0x01	; 1
 93c:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_WRITE_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 940:	8f e9       	ldi	r24, 0x9F	; 159
 942:	9f e0       	ldi	r25, 0x0F	; 15
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	f1 f7       	brne	.-4      	; 0x944 <LCD_ENABLE+0xe>
 948:	00 c0       	rjmp	.+0      	; 0x94a <LCD_ENABLE+0x14>
 94a:	00 00       	nop
	
	_delay_ms(2);
	
	DIO_WRITE_PIN(CTRL_PORT , EN , 0);
 94c:	82 e6       	ldi	r24, 0x62	; 98
 94e:	61 e0       	ldi	r22, 0x01	; 1
 950:	40 e0       	ldi	r20, 0x00	; 0
 952:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_WRITE_PIN>
 956:	8f e9       	ldi	r24, 0x9F	; 159
 958:	9f e0       	ldi	r25, 0x0F	; 15
 95a:	01 97       	sbiw	r24, 0x01	; 1
 95c:	f1 f7       	brne	.-4      	; 0x95a <LCD_ENABLE+0x24>
 95e:	00 c0       	rjmp	.+0      	; 0x960 <LCD_ENABLE+0x2a>
 960:	00 00       	nop
	
	_delay_ms(2);
 962:	08 95       	ret

00000964 <LCD_SEND_CMD>:
	
	#endif
}

void LCD_SEND_CMD(unsigned char cmd)
{	
 964:	cf 93       	push	r28
 966:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	
	#elif defined FOUR_BIT_MODE
	
	/*configure the read/write pin*/
	DIO_WRITE_PIN(DATA_PORT , RW , 0);
 968:	82 e6       	ldi	r24, 0x62	; 98
 96a:	62 e0       	ldi	r22, 0x02	; 2
 96c:	40 e0       	ldi	r20, 0x00	; 0
 96e:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_WRITE_PIN>
	
	/*WRITE MOST FOUR BIT TO COMMAND REGISTER*/
	DIO_WRITE_HIGH_NIBBLE(DATA_PORT , cmd>>4);
 972:	6c 2f       	mov	r22, r28
 974:	62 95       	swap	r22
 976:	6f 70       	andi	r22, 0x0F	; 15
 978:	82 e6       	ldi	r24, 0x62	; 98
 97a:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_WRITE_HIGH_NIBBLE>
	
	/*save in command register*/
	DIO_WRITE_PIN(CTRL_PORT , RS , 0);
 97e:	82 e6       	ldi	r24, 0x62	; 98
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	40 e0       	ldi	r20, 0x00	; 0
 984:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_WRITE_PIN>
	
	/*send pulse on the enable pin*/
	LCD_ENABLE();
 988:	0e 94 9b 04 	call	0x936	; 0x936 <LCD_ENABLE>
	
	/*WRITE LEAST FOUR BIT TO COMMAND REGISTER*/
	DIO_WRITE_HIGH_NIBBLE(DATA_PORT , cmd);
 98c:	82 e6       	ldi	r24, 0x62	; 98
 98e:	6c 2f       	mov	r22, r28
 990:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_WRITE_HIGH_NIBBLE>
	
	/*save in command register*/
	DIO_WRITE_PIN(CTRL_PORT , RS , 0);
 994:	82 e6       	ldi	r24, 0x62	; 98
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	40 e0       	ldi	r20, 0x00	; 0
 99a:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_WRITE_PIN>
	
	/*send pulse on the enable pin*/
	LCD_ENABLE();
 99e:	0e 94 9b 04 	call	0x936	; 0x936 <LCD_ENABLE>
 9a2:	8f ec       	ldi	r24, 0xCF	; 207
 9a4:	97 e0       	ldi	r25, 0x07	; 7
 9a6:	01 97       	sbiw	r24, 0x01	; 1
 9a8:	f1 f7       	brne	.-4      	; 0x9a6 <LCD_SEND_CMD+0x42>
 9aa:	00 c0       	rjmp	.+0      	; 0x9ac <LCD_SEND_CMD+0x48>
 9ac:	00 00       	nop
	
	_delay_ms(1);
	
	#endif
}
 9ae:	cf 91       	pop	r28
 9b0:	08 95       	ret

000009b2 <LCD_CLEAR_SCREEN>:
	_delay_ms(1);
}

void LCD_CLEAR_SCREEN()
{
	LCD_SEND_CMD(CLEAR_SCREEN);
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_SEND_CMD>
}
 9b8:	08 95       	ret

000009ba <LCD_MOVE_CURSOR>:

void LCD_MOVE_CURSOR(unsigned char row , unsigned char col)
{	
	unsigned char position;
	
	if (row == 1)
 9ba:	81 30       	cpi	r24, 0x01	; 1
 9bc:	19 f4       	brne	.+6      	; 0x9c4 <LCD_MOVE_CURSOR+0xa>
	{
		position = 0x80 + col -1;
 9be:	96 2f       	mov	r25, r22
 9c0:	91 58       	subi	r25, 0x81	; 129
 9c2:	1f c0       	rjmp	.+62     	; 0xa02 <LCD_MOVE_CURSOR+0x48>
	}
	else if(row == 2)
 9c4:	82 30       	cpi	r24, 0x02	; 2
 9c6:	19 f4       	brne	.+6      	; 0x9ce <LCD_MOVE_CURSOR+0x14>
	{
		position = 0xc0 + col -1;
 9c8:	96 2f       	mov	r25, r22
 9ca:	91 54       	subi	r25, 0x41	; 65
 9cc:	1a c0       	rjmp	.+52     	; 0xa02 <LCD_MOVE_CURSOR+0x48>
	}
	else if (row == 3)
 9ce:	83 30       	cpi	r24, 0x03	; 3
 9d0:	19 f4       	brne	.+6      	; 0x9d8 <LCD_MOVE_CURSOR+0x1e>
	{
		position = 0x94 + col -1;
 9d2:	96 2f       	mov	r25, r22
 9d4:	9d 56       	subi	r25, 0x6D	; 109
 9d6:	15 c0       	rjmp	.+42     	; 0xa02 <LCD_MOVE_CURSOR+0x48>
	}
	else if (row == 4)
 9d8:	84 30       	cpi	r24, 0x04	; 4
 9da:	19 f4       	brne	.+6      	; 0x9e2 <LCD_MOVE_CURSOR+0x28>
	{
		position = 0xD4 + col -1;
 9dc:	96 2f       	mov	r25, r22
 9de:	9d 52       	subi	r25, 0x2D	; 45
 9e0:	10 c0       	rjmp	.+32     	; 0xa02 <LCD_MOVE_CURSOR+0x48>
	}
	else if ((row > 4)||(col > 20)||(row < 1)||(col < 1))
 9e2:	85 30       	cpi	r24, 0x05	; 5
 9e4:	38 f4       	brcc	.+14     	; 0x9f4 <LCD_MOVE_CURSOR+0x3a>
 9e6:	65 31       	cpi	r22, 0x15	; 21
 9e8:	38 f4       	brcc	.+14     	; 0x9f8 <LCD_MOVE_CURSOR+0x3e>
 9ea:	88 23       	and	r24, r24
 9ec:	39 f0       	breq	.+14     	; 0x9fc <LCD_MOVE_CURSOR+0x42>
 9ee:	66 23       	and	r22, r22
 9f0:	39 f0       	breq	.+14     	; 0xa00 <LCD_MOVE_CURSOR+0x46>
 9f2:	07 c0       	rjmp	.+14     	; 0xa02 <LCD_MOVE_CURSOR+0x48>
	{
		position = 0x80;
 9f4:	90 e8       	ldi	r25, 0x80	; 128
 9f6:	05 c0       	rjmp	.+10     	; 0xa02 <LCD_MOVE_CURSOR+0x48>
 9f8:	90 e8       	ldi	r25, 0x80	; 128
 9fa:	03 c0       	rjmp	.+6      	; 0xa02 <LCD_MOVE_CURSOR+0x48>
 9fc:	90 e8       	ldi	r25, 0x80	; 128
 9fe:	01 c0       	rjmp	.+2      	; 0xa02 <LCD_MOVE_CURSOR+0x48>
 a00:	90 e8       	ldi	r25, 0x80	; 128
	}
	
	LCD_SEND_CMD(position);
 a02:	89 2f       	mov	r24, r25
 a04:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_SEND_CMD>
 a08:	8f ec       	ldi	r24, 0xCF	; 207
 a0a:	97 e0       	ldi	r25, 0x07	; 7
 a0c:	01 97       	sbiw	r24, 0x01	; 1
 a0e:	f1 f7       	brne	.-4      	; 0xa0c <LCD_MOVE_CURSOR+0x52>
 a10:	00 c0       	rjmp	.+0      	; 0xa12 <LCD_MOVE_CURSOR+0x58>
 a12:	00 00       	nop
	
	_delay_ms(1);
}
 a14:	08 95       	ret

00000a16 <LCD_INIT>:
 a16:	8f e7       	ldi	r24, 0x7F	; 127
 a18:	98 e3       	ldi	r25, 0x38	; 56
 a1a:	a1 e0       	ldi	r26, 0x01	; 1
 a1c:	81 50       	subi	r24, 0x01	; 1
 a1e:	90 40       	sbci	r25, 0x00	; 0
 a20:	a0 40       	sbci	r26, 0x00	; 0
 a22:	e1 f7       	brne	.-8      	; 0xa1c <LCD_INIT+0x6>
 a24:	00 c0       	rjmp	.+0      	; 0xa26 <LCD_INIT+0x10>
 a26:	00 00       	nop
	LCD_SEND_CMD(ENTRY_MODE);
	_delay_ms(2);
	
	#elif defined FOUR_BIT_MODE
	
	DIO_SET_PIN_DIR(DATA_PORT , 4 ,1);
 a28:	82 e6       	ldi	r24, 0x62	; 98
 a2a:	64 e0       	ldi	r22, 0x04	; 4
 a2c:	41 e0       	ldi	r20, 0x01	; 1
 a2e:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(DATA_PORT , 5 ,1);
 a32:	82 e6       	ldi	r24, 0x62	; 98
 a34:	65 e0       	ldi	r22, 0x05	; 5
 a36:	41 e0       	ldi	r20, 0x01	; 1
 a38:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(DATA_PORT , 6 ,1);
 a3c:	82 e6       	ldi	r24, 0x62	; 98
 a3e:	66 e0       	ldi	r22, 0x06	; 6
 a40:	41 e0       	ldi	r20, 0x01	; 1
 a42:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(DATA_PORT , 7 ,1);
 a46:	82 e6       	ldi	r24, 0x62	; 98
 a48:	67 e0       	ldi	r22, 0x07	; 7
 a4a:	41 e0       	ldi	r20, 0x01	; 1
 a4c:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SET_PIN_DIR>
	
	DIO_SET_PIN_DIR(CTRL_PORT , RW ,1);
 a50:	82 e6       	ldi	r24, 0x62	; 98
 a52:	62 e0       	ldi	r22, 0x02	; 2
 a54:	41 e0       	ldi	r20, 0x01	; 1
 a56:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(CTRL_PORT , EN ,1);
 a5a:	82 e6       	ldi	r24, 0x62	; 98
 a5c:	61 e0       	ldi	r22, 0x01	; 1
 a5e:	41 e0       	ldi	r20, 0x01	; 1
 a60:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(CTRL_PORT , RS ,1);
 a64:	82 e6       	ldi	r24, 0x62	; 98
 a66:	60 e0       	ldi	r22, 0x00	; 0
 a68:	41 e0       	ldi	r20, 0x01	; 1
 a6a:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SET_PIN_DIR>
	
	DIO_WRITE_PIN(CTRL_PORT , RW , 0);
 a6e:	82 e6       	ldi	r24, 0x62	; 98
 a70:	62 e0       	ldi	r22, 0x02	; 2
 a72:	40 e0       	ldi	r20, 0x00	; 0
 a74:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_WRITE_PIN>
	
	LCD_SEND_CMD(RETURN_HOME);
 a78:	82 e0       	ldi	r24, 0x02	; 2
 a7a:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_SEND_CMD>
 a7e:	af ec       	ldi	r26, 0xCF	; 207
 a80:	b7 e0       	ldi	r27, 0x07	; 7
 a82:	11 97       	sbiw	r26, 0x01	; 1
 a84:	f1 f7       	brne	.-4      	; 0xa82 <LCD_INIT+0x6c>
 a86:	00 c0       	rjmp	.+0      	; 0xa88 <LCD_INIT+0x72>
 a88:	00 00       	nop
	_delay_ms(1);
	
	LCD_SEND_CMD(FUNCTION_SET_TO_FOUR_BIT_MODE);
 a8a:	88 e2       	ldi	r24, 0x28	; 40
 a8c:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_SEND_CMD>
 a90:	8f ec       	ldi	r24, 0xCF	; 207
 a92:	97 e0       	ldi	r25, 0x07	; 7
 a94:	01 97       	sbiw	r24, 0x01	; 1
 a96:	f1 f7       	brne	.-4      	; 0xa94 <LCD_INIT+0x7e>
 a98:	00 c0       	rjmp	.+0      	; 0xa9a <LCD_INIT+0x84>
 a9a:	00 00       	nop
	_delay_ms(1);
	
	LCD_SEND_CMD(DISPLAY_ON_CURSOR_ON);
 a9c:	8e e0       	ldi	r24, 0x0E	; 14
 a9e:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_SEND_CMD>
 aa2:	af ec       	ldi	r26, 0xCF	; 207
 aa4:	b7 e0       	ldi	r27, 0x07	; 7
 aa6:	11 97       	sbiw	r26, 0x01	; 1
 aa8:	f1 f7       	brne	.-4      	; 0xaa6 <LCD_INIT+0x90>
 aaa:	00 c0       	rjmp	.+0      	; 0xaac <LCD_INIT+0x96>
 aac:	00 00       	nop
	_delay_ms(1);
	
	LCD_SEND_CMD(CLEAR_SCREEN);
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_SEND_CMD>
 ab4:	8f e6       	ldi	r24, 0x6F	; 111
 ab6:	97 e1       	ldi	r25, 0x17	; 23
 ab8:	01 97       	sbiw	r24, 0x01	; 1
 aba:	f1 f7       	brne	.-4      	; 0xab8 <LCD_INIT+0xa2>
 abc:	00 c0       	rjmp	.+0      	; 0xabe <LCD_INIT+0xa8>
 abe:	00 00       	nop
	_delay_ms(3);
	
	LCD_SEND_CMD(ENTRY_MODE);
 ac0:	86 e0       	ldi	r24, 0x06	; 6
 ac2:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_SEND_CMD>
 ac6:	af e9       	ldi	r26, 0x9F	; 159
 ac8:	bf e0       	ldi	r27, 0x0F	; 15
 aca:	11 97       	sbiw	r26, 0x01	; 1
 acc:	f1 f7       	brne	.-4      	; 0xaca <LCD_INIT+0xb4>
 ace:	00 c0       	rjmp	.+0      	; 0xad0 <LCD_INIT+0xba>
 ad0:	00 00       	nop
	_delay_ms(2);
	
	#endif
	
}
 ad2:	08 95       	ret

00000ad4 <LCD_SEND_CHAR>:

void LCD_SEND_CHAR(unsigned char data)
{
 ad4:	cf 93       	push	r28
 ad6:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	
	#elif defined FOUR_BIT_MODE
	
	/*configure read/write pin*/
	DIO_WRITE_PIN(CTRL_PORT , RW , 0);
 ad8:	82 e6       	ldi	r24, 0x62	; 98
 ada:	62 e0       	ldi	r22, 0x02	; 2
 adc:	40 e0       	ldi	r20, 0x00	; 0
 ade:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_WRITE_PIN>
	
	/*WRITE MOST FOUR BITS TO DATA REGISTER FIRSTLY*/
	DIO_WRITE_HIGH_NIBBLE(DATA_PORT , data>>4);
 ae2:	6c 2f       	mov	r22, r28
 ae4:	62 95       	swap	r22
 ae6:	6f 70       	andi	r22, 0x0F	; 15
 ae8:	82 e6       	ldi	r24, 0x62	; 98
 aea:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_WRITE_HIGH_NIBBLE>
	
	/*save in data register*/
	DIO_WRITE_PIN(CTRL_PORT , RS , 1);
 aee:	82 e6       	ldi	r24, 0x62	; 98
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	41 e0       	ldi	r20, 0x01	; 1
 af4:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_WRITE_PIN>
	
	/*send pulse on the enable pin*/
	LCD_ENABLE();
 af8:	0e 94 9b 04 	call	0x936	; 0x936 <LCD_ENABLE>
	
	/*WRITE LEAST FOUR BITS TO DATA REGISTER */
	DIO_WRITE_HIGH_NIBBLE(DATA_PORT , data);
 afc:	82 e6       	ldi	r24, 0x62	; 98
 afe:	6c 2f       	mov	r22, r28
 b00:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_WRITE_HIGH_NIBBLE>
	
	/*save in data register*/
	DIO_WRITE_PIN(CTRL_PORT , RS , 1);
 b04:	82 e6       	ldi	r24, 0x62	; 98
 b06:	60 e0       	ldi	r22, 0x00	; 0
 b08:	41 e0       	ldi	r20, 0x01	; 1
 b0a:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_WRITE_PIN>
		
	/*send pulse on the enable pin*/
	LCD_ENABLE();
 b0e:	0e 94 9b 04 	call	0x936	; 0x936 <LCD_ENABLE>
 b12:	8f ec       	ldi	r24, 0xCF	; 207
 b14:	97 e0       	ldi	r25, 0x07	; 7
 b16:	01 97       	sbiw	r24, 0x01	; 1
 b18:	f1 f7       	brne	.-4      	; 0xb16 <LCD_SEND_CHAR+0x42>
 b1a:	00 c0       	rjmp	.+0      	; 0xb1c <LCD_SEND_CHAR+0x48>
 b1c:	00 00       	nop
	 
	 
	_delay_ms(1);
	
	#endif
}
 b1e:	cf 91       	pop	r28
 b20:	08 95       	ret

00000b22 <LCD_SEND_STRING>:
	
	#endif
}

void LCD_SEND_STRING(const unsigned char * data)
{	
 b22:	cf 93       	push	r28
 b24:	df 93       	push	r29
 b26:	ec 01       	movw	r28, r24
	while(*data != '\0')
 b28:	88 81       	ld	r24, Y
 b2a:	88 23       	and	r24, r24
 b2c:	31 f0       	breq	.+12     	; 0xb3a <LCD_SEND_STRING+0x18>
	_delay_ms(1);
	
	#endif
}

void LCD_SEND_STRING(const unsigned char * data)
 b2e:	21 96       	adiw	r28, 0x01	; 1
{	
	while(*data != '\0')
	{
		LCD_SEND_CHAR(*data);
 b30:	0e 94 6a 05 	call	0xad4	; 0xad4 <LCD_SEND_CHAR>
	#endif
}

void LCD_SEND_STRING(const unsigned char * data)
{	
	while(*data != '\0')
 b34:	89 91       	ld	r24, Y+
 b36:	88 23       	and	r24, r24
 b38:	d9 f7       	brne	.-10     	; 0xb30 <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}		
	 
}
 b3a:	df 91       	pop	r29
 b3c:	cf 91       	pop	r28
 b3e:	08 95       	ret

00000b40 <__fixsfsi>:
 b40:	04 d0       	rcall	.+8      	; 0xb4a <__fixunssfsi>
 b42:	68 94       	set
 b44:	b1 11       	cpse	r27, r1
 b46:	8d c0       	rjmp	.+282    	; 0xc62 <__fp_szero>
 b48:	08 95       	ret

00000b4a <__fixunssfsi>:
 b4a:	70 d0       	rcall	.+224    	; 0xc2c <__fp_splitA>
 b4c:	88 f0       	brcs	.+34     	; 0xb70 <__fixunssfsi+0x26>
 b4e:	9f 57       	subi	r25, 0x7F	; 127
 b50:	90 f0       	brcs	.+36     	; 0xb76 <__fixunssfsi+0x2c>
 b52:	b9 2f       	mov	r27, r25
 b54:	99 27       	eor	r25, r25
 b56:	b7 51       	subi	r27, 0x17	; 23
 b58:	a0 f0       	brcs	.+40     	; 0xb82 <__fixunssfsi+0x38>
 b5a:	d1 f0       	breq	.+52     	; 0xb90 <__fixunssfsi+0x46>
 b5c:	66 0f       	add	r22, r22
 b5e:	77 1f       	adc	r23, r23
 b60:	88 1f       	adc	r24, r24
 b62:	99 1f       	adc	r25, r25
 b64:	1a f0       	brmi	.+6      	; 0xb6c <__fixunssfsi+0x22>
 b66:	ba 95       	dec	r27
 b68:	c9 f7       	brne	.-14     	; 0xb5c <__fixunssfsi+0x12>
 b6a:	12 c0       	rjmp	.+36     	; 0xb90 <__fixunssfsi+0x46>
 b6c:	b1 30       	cpi	r27, 0x01	; 1
 b6e:	81 f0       	breq	.+32     	; 0xb90 <__fixunssfsi+0x46>
 b70:	77 d0       	rcall	.+238    	; 0xc60 <__fp_zero>
 b72:	b1 e0       	ldi	r27, 0x01	; 1
 b74:	08 95       	ret
 b76:	74 c0       	rjmp	.+232    	; 0xc60 <__fp_zero>
 b78:	67 2f       	mov	r22, r23
 b7a:	78 2f       	mov	r23, r24
 b7c:	88 27       	eor	r24, r24
 b7e:	b8 5f       	subi	r27, 0xF8	; 248
 b80:	39 f0       	breq	.+14     	; 0xb90 <__fixunssfsi+0x46>
 b82:	b9 3f       	cpi	r27, 0xF9	; 249
 b84:	cc f3       	brlt	.-14     	; 0xb78 <__fixunssfsi+0x2e>
 b86:	86 95       	lsr	r24
 b88:	77 95       	ror	r23
 b8a:	67 95       	ror	r22
 b8c:	b3 95       	inc	r27
 b8e:	d9 f7       	brne	.-10     	; 0xb86 <__fixunssfsi+0x3c>
 b90:	3e f4       	brtc	.+14     	; 0xba0 <__fixunssfsi+0x56>
 b92:	90 95       	com	r25
 b94:	80 95       	com	r24
 b96:	70 95       	com	r23
 b98:	61 95       	neg	r22
 b9a:	7f 4f       	sbci	r23, 0xFF	; 255
 b9c:	8f 4f       	sbci	r24, 0xFF	; 255
 b9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ba0:	08 95       	ret

00000ba2 <__floatunsisf>:
 ba2:	e8 94       	clt
 ba4:	09 c0       	rjmp	.+18     	; 0xbb8 <__floatsisf+0x12>

00000ba6 <__floatsisf>:
 ba6:	97 fb       	bst	r25, 7
 ba8:	3e f4       	brtc	.+14     	; 0xbb8 <__floatsisf+0x12>
 baa:	90 95       	com	r25
 bac:	80 95       	com	r24
 bae:	70 95       	com	r23
 bb0:	61 95       	neg	r22
 bb2:	7f 4f       	sbci	r23, 0xFF	; 255
 bb4:	8f 4f       	sbci	r24, 0xFF	; 255
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	99 23       	and	r25, r25
 bba:	a9 f0       	breq	.+42     	; 0xbe6 <__floatsisf+0x40>
 bbc:	f9 2f       	mov	r31, r25
 bbe:	96 e9       	ldi	r25, 0x96	; 150
 bc0:	bb 27       	eor	r27, r27
 bc2:	93 95       	inc	r25
 bc4:	f6 95       	lsr	r31
 bc6:	87 95       	ror	r24
 bc8:	77 95       	ror	r23
 bca:	67 95       	ror	r22
 bcc:	b7 95       	ror	r27
 bce:	f1 11       	cpse	r31, r1
 bd0:	f8 cf       	rjmp	.-16     	; 0xbc2 <__floatsisf+0x1c>
 bd2:	fa f4       	brpl	.+62     	; 0xc12 <__floatsisf+0x6c>
 bd4:	bb 0f       	add	r27, r27
 bd6:	11 f4       	brne	.+4      	; 0xbdc <__floatsisf+0x36>
 bd8:	60 ff       	sbrs	r22, 0
 bda:	1b c0       	rjmp	.+54     	; 0xc12 <__floatsisf+0x6c>
 bdc:	6f 5f       	subi	r22, 0xFF	; 255
 bde:	7f 4f       	sbci	r23, 0xFF	; 255
 be0:	8f 4f       	sbci	r24, 0xFF	; 255
 be2:	9f 4f       	sbci	r25, 0xFF	; 255
 be4:	16 c0       	rjmp	.+44     	; 0xc12 <__floatsisf+0x6c>
 be6:	88 23       	and	r24, r24
 be8:	11 f0       	breq	.+4      	; 0xbee <__floatsisf+0x48>
 bea:	96 e9       	ldi	r25, 0x96	; 150
 bec:	11 c0       	rjmp	.+34     	; 0xc10 <__floatsisf+0x6a>
 bee:	77 23       	and	r23, r23
 bf0:	21 f0       	breq	.+8      	; 0xbfa <__floatsisf+0x54>
 bf2:	9e e8       	ldi	r25, 0x8E	; 142
 bf4:	87 2f       	mov	r24, r23
 bf6:	76 2f       	mov	r23, r22
 bf8:	05 c0       	rjmp	.+10     	; 0xc04 <__floatsisf+0x5e>
 bfa:	66 23       	and	r22, r22
 bfc:	71 f0       	breq	.+28     	; 0xc1a <__floatsisf+0x74>
 bfe:	96 e8       	ldi	r25, 0x86	; 134
 c00:	86 2f       	mov	r24, r22
 c02:	70 e0       	ldi	r23, 0x00	; 0
 c04:	60 e0       	ldi	r22, 0x00	; 0
 c06:	2a f0       	brmi	.+10     	; 0xc12 <__floatsisf+0x6c>
 c08:	9a 95       	dec	r25
 c0a:	66 0f       	add	r22, r22
 c0c:	77 1f       	adc	r23, r23
 c0e:	88 1f       	adc	r24, r24
 c10:	da f7       	brpl	.-10     	; 0xc08 <__floatsisf+0x62>
 c12:	88 0f       	add	r24, r24
 c14:	96 95       	lsr	r25
 c16:	87 95       	ror	r24
 c18:	97 f9       	bld	r25, 7
 c1a:	08 95       	ret

00000c1c <__fp_split3>:
 c1c:	57 fd       	sbrc	r21, 7
 c1e:	90 58       	subi	r25, 0x80	; 128
 c20:	44 0f       	add	r20, r20
 c22:	55 1f       	adc	r21, r21
 c24:	59 f0       	breq	.+22     	; 0xc3c <__fp_splitA+0x10>
 c26:	5f 3f       	cpi	r21, 0xFF	; 255
 c28:	71 f0       	breq	.+28     	; 0xc46 <__fp_splitA+0x1a>
 c2a:	47 95       	ror	r20

00000c2c <__fp_splitA>:
 c2c:	88 0f       	add	r24, r24
 c2e:	97 fb       	bst	r25, 7
 c30:	99 1f       	adc	r25, r25
 c32:	61 f0       	breq	.+24     	; 0xc4c <__fp_splitA+0x20>
 c34:	9f 3f       	cpi	r25, 0xFF	; 255
 c36:	79 f0       	breq	.+30     	; 0xc56 <__fp_splitA+0x2a>
 c38:	87 95       	ror	r24
 c3a:	08 95       	ret
 c3c:	12 16       	cp	r1, r18
 c3e:	13 06       	cpc	r1, r19
 c40:	14 06       	cpc	r1, r20
 c42:	55 1f       	adc	r21, r21
 c44:	f2 cf       	rjmp	.-28     	; 0xc2a <__fp_split3+0xe>
 c46:	46 95       	lsr	r20
 c48:	f1 df       	rcall	.-30     	; 0xc2c <__fp_splitA>
 c4a:	08 c0       	rjmp	.+16     	; 0xc5c <__fp_splitA+0x30>
 c4c:	16 16       	cp	r1, r22
 c4e:	17 06       	cpc	r1, r23
 c50:	18 06       	cpc	r1, r24
 c52:	99 1f       	adc	r25, r25
 c54:	f1 cf       	rjmp	.-30     	; 0xc38 <__fp_splitA+0xc>
 c56:	86 95       	lsr	r24
 c58:	71 05       	cpc	r23, r1
 c5a:	61 05       	cpc	r22, r1
 c5c:	08 94       	sec
 c5e:	08 95       	ret

00000c60 <__fp_zero>:
 c60:	e8 94       	clt

00000c62 <__fp_szero>:
 c62:	bb 27       	eor	r27, r27
 c64:	66 27       	eor	r22, r22
 c66:	77 27       	eor	r23, r23
 c68:	cb 01       	movw	r24, r22
 c6a:	97 f9       	bld	r25, 7
 c6c:	08 95       	ret

00000c6e <__mulsf3>:
 c6e:	0b d0       	rcall	.+22     	; 0xc86 <__mulsf3x>
 c70:	78 c0       	rjmp	.+240    	; 0xd62 <__fp_round>
 c72:	69 d0       	rcall	.+210    	; 0xd46 <__fp_pscA>
 c74:	28 f0       	brcs	.+10     	; 0xc80 <__mulsf3+0x12>
 c76:	6e d0       	rcall	.+220    	; 0xd54 <__fp_pscB>
 c78:	18 f0       	brcs	.+6      	; 0xc80 <__mulsf3+0x12>
 c7a:	95 23       	and	r25, r21
 c7c:	09 f0       	breq	.+2      	; 0xc80 <__mulsf3+0x12>
 c7e:	5a c0       	rjmp	.+180    	; 0xd34 <__fp_inf>
 c80:	5f c0       	rjmp	.+190    	; 0xd40 <__fp_nan>
 c82:	11 24       	eor	r1, r1
 c84:	ee cf       	rjmp	.-36     	; 0xc62 <__fp_szero>

00000c86 <__mulsf3x>:
 c86:	ca df       	rcall	.-108    	; 0xc1c <__fp_split3>
 c88:	a0 f3       	brcs	.-24     	; 0xc72 <__mulsf3+0x4>

00000c8a <__mulsf3_pse>:
 c8a:	95 9f       	mul	r25, r21
 c8c:	d1 f3       	breq	.-12     	; 0xc82 <__mulsf3+0x14>
 c8e:	95 0f       	add	r25, r21
 c90:	50 e0       	ldi	r21, 0x00	; 0
 c92:	55 1f       	adc	r21, r21
 c94:	62 9f       	mul	r22, r18
 c96:	f0 01       	movw	r30, r0
 c98:	72 9f       	mul	r23, r18
 c9a:	bb 27       	eor	r27, r27
 c9c:	f0 0d       	add	r31, r0
 c9e:	b1 1d       	adc	r27, r1
 ca0:	63 9f       	mul	r22, r19
 ca2:	aa 27       	eor	r26, r26
 ca4:	f0 0d       	add	r31, r0
 ca6:	b1 1d       	adc	r27, r1
 ca8:	aa 1f       	adc	r26, r26
 caa:	64 9f       	mul	r22, r20
 cac:	66 27       	eor	r22, r22
 cae:	b0 0d       	add	r27, r0
 cb0:	a1 1d       	adc	r26, r1
 cb2:	66 1f       	adc	r22, r22
 cb4:	82 9f       	mul	r24, r18
 cb6:	22 27       	eor	r18, r18
 cb8:	b0 0d       	add	r27, r0
 cba:	a1 1d       	adc	r26, r1
 cbc:	62 1f       	adc	r22, r18
 cbe:	73 9f       	mul	r23, r19
 cc0:	b0 0d       	add	r27, r0
 cc2:	a1 1d       	adc	r26, r1
 cc4:	62 1f       	adc	r22, r18
 cc6:	83 9f       	mul	r24, r19
 cc8:	a0 0d       	add	r26, r0
 cca:	61 1d       	adc	r22, r1
 ccc:	22 1f       	adc	r18, r18
 cce:	74 9f       	mul	r23, r20
 cd0:	33 27       	eor	r19, r19
 cd2:	a0 0d       	add	r26, r0
 cd4:	61 1d       	adc	r22, r1
 cd6:	23 1f       	adc	r18, r19
 cd8:	84 9f       	mul	r24, r20
 cda:	60 0d       	add	r22, r0
 cdc:	21 1d       	adc	r18, r1
 cde:	82 2f       	mov	r24, r18
 ce0:	76 2f       	mov	r23, r22
 ce2:	6a 2f       	mov	r22, r26
 ce4:	11 24       	eor	r1, r1
 ce6:	9f 57       	subi	r25, 0x7F	; 127
 ce8:	50 40       	sbci	r21, 0x00	; 0
 cea:	8a f0       	brmi	.+34     	; 0xd0e <__mulsf3_pse+0x84>
 cec:	e1 f0       	breq	.+56     	; 0xd26 <__mulsf3_pse+0x9c>
 cee:	88 23       	and	r24, r24
 cf0:	4a f0       	brmi	.+18     	; 0xd04 <__mulsf3_pse+0x7a>
 cf2:	ee 0f       	add	r30, r30
 cf4:	ff 1f       	adc	r31, r31
 cf6:	bb 1f       	adc	r27, r27
 cf8:	66 1f       	adc	r22, r22
 cfa:	77 1f       	adc	r23, r23
 cfc:	88 1f       	adc	r24, r24
 cfe:	91 50       	subi	r25, 0x01	; 1
 d00:	50 40       	sbci	r21, 0x00	; 0
 d02:	a9 f7       	brne	.-22     	; 0xcee <__mulsf3_pse+0x64>
 d04:	9e 3f       	cpi	r25, 0xFE	; 254
 d06:	51 05       	cpc	r21, r1
 d08:	70 f0       	brcs	.+28     	; 0xd26 <__mulsf3_pse+0x9c>
 d0a:	14 c0       	rjmp	.+40     	; 0xd34 <__fp_inf>
 d0c:	aa cf       	rjmp	.-172    	; 0xc62 <__fp_szero>
 d0e:	5f 3f       	cpi	r21, 0xFF	; 255
 d10:	ec f3       	brlt	.-6      	; 0xd0c <__mulsf3_pse+0x82>
 d12:	98 3e       	cpi	r25, 0xE8	; 232
 d14:	dc f3       	brlt	.-10     	; 0xd0c <__mulsf3_pse+0x82>
 d16:	86 95       	lsr	r24
 d18:	77 95       	ror	r23
 d1a:	67 95       	ror	r22
 d1c:	b7 95       	ror	r27
 d1e:	f7 95       	ror	r31
 d20:	e7 95       	ror	r30
 d22:	9f 5f       	subi	r25, 0xFF	; 255
 d24:	c1 f7       	brne	.-16     	; 0xd16 <__mulsf3_pse+0x8c>
 d26:	fe 2b       	or	r31, r30
 d28:	88 0f       	add	r24, r24
 d2a:	91 1d       	adc	r25, r1
 d2c:	96 95       	lsr	r25
 d2e:	87 95       	ror	r24
 d30:	97 f9       	bld	r25, 7
 d32:	08 95       	ret

00000d34 <__fp_inf>:
 d34:	97 f9       	bld	r25, 7
 d36:	9f 67       	ori	r25, 0x7F	; 127
 d38:	80 e8       	ldi	r24, 0x80	; 128
 d3a:	70 e0       	ldi	r23, 0x00	; 0
 d3c:	60 e0       	ldi	r22, 0x00	; 0
 d3e:	08 95       	ret

00000d40 <__fp_nan>:
 d40:	9f ef       	ldi	r25, 0xFF	; 255
 d42:	80 ec       	ldi	r24, 0xC0	; 192
 d44:	08 95       	ret

00000d46 <__fp_pscA>:
 d46:	00 24       	eor	r0, r0
 d48:	0a 94       	dec	r0
 d4a:	16 16       	cp	r1, r22
 d4c:	17 06       	cpc	r1, r23
 d4e:	18 06       	cpc	r1, r24
 d50:	09 06       	cpc	r0, r25
 d52:	08 95       	ret

00000d54 <__fp_pscB>:
 d54:	00 24       	eor	r0, r0
 d56:	0a 94       	dec	r0
 d58:	12 16       	cp	r1, r18
 d5a:	13 06       	cpc	r1, r19
 d5c:	14 06       	cpc	r1, r20
 d5e:	05 06       	cpc	r0, r21
 d60:	08 95       	ret

00000d62 <__fp_round>:
 d62:	09 2e       	mov	r0, r25
 d64:	03 94       	inc	r0
 d66:	00 0c       	add	r0, r0
 d68:	11 f4       	brne	.+4      	; 0xd6e <__fp_round+0xc>
 d6a:	88 23       	and	r24, r24
 d6c:	52 f0       	brmi	.+20     	; 0xd82 <__fp_round+0x20>
 d6e:	bb 0f       	add	r27, r27
 d70:	40 f4       	brcc	.+16     	; 0xd82 <__fp_round+0x20>
 d72:	bf 2b       	or	r27, r31
 d74:	11 f4       	brne	.+4      	; 0xd7a <__fp_round+0x18>
 d76:	60 ff       	sbrs	r22, 0
 d78:	04 c0       	rjmp	.+8      	; 0xd82 <__fp_round+0x20>
 d7a:	6f 5f       	subi	r22, 0xFF	; 255
 d7c:	7f 4f       	sbci	r23, 0xFF	; 255
 d7e:	8f 4f       	sbci	r24, 0xFF	; 255
 d80:	9f 4f       	sbci	r25, 0xFF	; 255
 d82:	08 95       	ret

00000d84 <__divmodhi4>:
 d84:	97 fb       	bst	r25, 7
 d86:	09 2e       	mov	r0, r25
 d88:	07 26       	eor	r0, r23
 d8a:	0a d0       	rcall	.+20     	; 0xda0 <__divmodhi4_neg1>
 d8c:	77 fd       	sbrc	r23, 7
 d8e:	04 d0       	rcall	.+8      	; 0xd98 <__divmodhi4_neg2>
 d90:	0c d0       	rcall	.+24     	; 0xdaa <__udivmodhi4>
 d92:	06 d0       	rcall	.+12     	; 0xda0 <__divmodhi4_neg1>
 d94:	00 20       	and	r0, r0
 d96:	1a f4       	brpl	.+6      	; 0xd9e <__divmodhi4_exit>

00000d98 <__divmodhi4_neg2>:
 d98:	70 95       	com	r23
 d9a:	61 95       	neg	r22
 d9c:	7f 4f       	sbci	r23, 0xFF	; 255

00000d9e <__divmodhi4_exit>:
 d9e:	08 95       	ret

00000da0 <__divmodhi4_neg1>:
 da0:	f6 f7       	brtc	.-4      	; 0xd9e <__divmodhi4_exit>
 da2:	90 95       	com	r25
 da4:	81 95       	neg	r24
 da6:	9f 4f       	sbci	r25, 0xFF	; 255
 da8:	08 95       	ret

00000daa <__udivmodhi4>:
 daa:	aa 1b       	sub	r26, r26
 dac:	bb 1b       	sub	r27, r27
 dae:	51 e1       	ldi	r21, 0x11	; 17
 db0:	07 c0       	rjmp	.+14     	; 0xdc0 <__udivmodhi4_ep>

00000db2 <__udivmodhi4_loop>:
 db2:	aa 1f       	adc	r26, r26
 db4:	bb 1f       	adc	r27, r27
 db6:	a6 17       	cp	r26, r22
 db8:	b7 07       	cpc	r27, r23
 dba:	10 f0       	brcs	.+4      	; 0xdc0 <__udivmodhi4_ep>
 dbc:	a6 1b       	sub	r26, r22
 dbe:	b7 0b       	sbc	r27, r23

00000dc0 <__udivmodhi4_ep>:
 dc0:	88 1f       	adc	r24, r24
 dc2:	99 1f       	adc	r25, r25
 dc4:	5a 95       	dec	r21
 dc6:	a9 f7       	brne	.-22     	; 0xdb2 <__udivmodhi4_loop>
 dc8:	80 95       	com	r24
 dca:	90 95       	com	r25
 dcc:	bc 01       	movw	r22, r24
 dce:	cd 01       	movw	r24, r26
 dd0:	08 95       	ret

00000dd2 <_exit>:
 dd2:	f8 94       	cli

00000dd4 <__stop_program>:
 dd4:	ff cf       	rjmp	.-2      	; 0xdd4 <__stop_program>
