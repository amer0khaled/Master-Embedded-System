/*
 * STM32_I2C.h
 *
 *  Created on: Oct 22, 2023
 *      Author: Amer_Khaled
 */

#ifndef INTERFACE_STM32_I2C_H_
#define INTERFACE_STM32_I2C_H_


/////////////Note//////////////
/* ToDo
 * this device driver :
 *
 * 1- not support 10 bit addressing mode
 * 2- not support Fast mode (FM)
 * 3- not support Dual Addressing mode
 * 4- not support General Call mode
 * 5- not support SMbus mode
 *
 */


//---------------------------------------------------
//Includes
//---------------------------------------------------

#include "stm32f103x8.h"
#include "STM32_GPIO.h"
#include "STM32_RCC.h"

//---------------------------------------------------
//User Type Definition (Structures)
//---------------------------------------------------



typedef enum
{
	Start,
	Repeated_satrt

}StartStatus;


typedef enum
{
	with_stop,
	without_stop

}Stop_Condition;




typedef enum
{
	I2C_EV_STOP,
	I2C_ERROR_AF,
	I2C_EV_ADDR_MATCHED,
	I2C_EV_DATA_REQ,
	I2C_EV_DATA_RCV

}Slave_State;



typedef struct
{
	uint8_t Enable_Dual_Address;	//specifies whether the slave device operates in dual or single address mode
									//this parameter must be set based on @ref I2C_Addressing_Mode_defne

	uint16_t Primary_Address;

	uint8_t Secondary_Address;	//In case of you Enabled Dual Address

	uint8_t Addressing_Mode;	//specifies whether the addressing mode is 7 bit or 10 bit
								//this parameter must be set based on @ref I2C_Slave_Addressing_Mode_define

}I2C_Device_Address;




typedef struct
{
	uint8_t I2C_CLK_Speed; 						//specifies the clock that I2C needs for operation
	 	 	 	 	 	   	   	   	    		//this parameter must be set based on @ref I2C_CLK_Speed_define

	uint8_t I2C_CLK_Strerch;					//specifies whether enable clock stretch or not
												//this parameter must be set based on @ref I2C_CLK_Strerch_define

	uint8_t I2C_Mode;							//specifies whether the I2C operates as I2C or SMBus
												//this parameter must be set based on @ref I2C_Mode_define

	I2C_Device_Address I2C_Slave_Addressing_Mode;

	void (*P_Slave_Event_CallBack)(Slave_State state);

}I2C_Config;

//---------------------------------------------------
//Macros Configuration References
//---------------------------------------------------


/*
• Program the peripheral input clock in I2C_CR2 Register in order to generate correct
timings

• Configure the clock control registers

• Configure the rise time register

• Program the I2C_CR1 register to enable the peripheral

• Set the START bit in the I2C_CR1 register to generate a Start condition
The peripheral input clock frequency must be at least:
 2 MHz in Sm mode
 4 MHz in Fm mode
 */



//---------------------------------------------------
//@ref Module REF Name define
//---------------------------------------------------

//@ref I2C_CLK_Speed_define


#define I2C_CLK_Speed_SM_10KHz		0
#define I2C_CLK_Speed_SM_20KHz		1
#define I2C_CLK_Speed_SM_30KHz		2
#define I2C_CLK_Speed_SM_40KHz		3
#define I2C_CLK_Speed_SM_50KHz		4
#define I2C_CLK_Speed_SM_60KHz		5
#define I2C_CLK_Speed_SM_70KHz		6
#define I2C_CLK_Speed_SM_80KHz		7
#define I2C_CLK_Speed_SM_90KHz		8
#define I2C_CLK_Speed_SM_100KHz		9


//@ref I2C_CLK_Strerch_define

#define I2C_CLK_Strerch_DIS		0		//I2C_CR1.bit7 = 1
#define I2C_CLK_Strerch_EN		1		//I2C_CR1.bit7 = 0


//@ref I2C_Mode_define

#define I2C_Mode_I2C		0		//I2C_CR1.bit1 = 0
#define I2C_Mode_SMBus		1		//I2C_CR1.bit1 = 1  [not supported for now]


//@ref I2C_Slave_Addressing_Mode_define

//I2C_OAR1.Bit 15 ADDMODE Addressing mode (slave mode)
#define I2C_Slave_Addressing_Mode_7bit		0
#define I2C_Slave_Addressing_Mode_10bit		1  //[not supported for now]


//@ref I2C_Addressing_Mode_defne

//I2C_OAR2.Bit 0 ENDUAL: Dual addressing mode enable
#define I2C_Addressing_Mode_Dual_DIS	0
#define I2C_Addressing_Mode_Dual_EN		1


//---------------------------------------------------
//APIs Supported by "MCAL I2C Driver"
//---------------------------------------------------

void MCAL_I2C_Init(I2C_TypeDef * I2C_Instant, I2C_Config * I2C_CFG);

void MCAL_I2C_DeInit(I2C_TypeDef * I2C_Instant);

void MCAL_I2C_GPIO_SetPin(I2C_TypeDef * I2C_Instant);

void MCAL_I2C_Trasmitt(I2C_TypeDef *I2C_Instant, uint8_t *dataOut, uint32_t dataLen, uint16_t devadd, StartStatus start_bit, StopCondition_State stop_state);

void MCAL_I2C_Receive(I2C_TypeDef *I2C_Instant, uint8_t *dataIn, uint32_t dataLen, uint16_t devadd, StartStatus start_bit, StopCondition_State stop_state);

void MCAL_I2C_SlaveSendData(I2C_TypeDef I2C_Instant, uint8_t data);

void MCAL_I2C_SlaveReceiveData(I2C_TypeDef I2C_Instant);


#endif /* INTERFACE_STM32_I2C_H_ */
