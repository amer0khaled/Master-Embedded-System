#ifndef STM32F103X8_H_
#define STM32F103X8_H_
//---------------------------------------------------
//Includes
//---------------------------------------------------

#include<stdlib.h>
#include<stdint.h>


//---------------------------------------------------
//Base Addresses for Memories
//---------------------------------------------------

#define Flash_Memory_Base 					0x08000000
#define System_Memory_Base 					0x1FFFF000
#define SRAM_Memory_Base 					0x20000000
#define Peripherals_Base 					0x40000000
#define CortexM3_Internal_Peripherals_Base 	0xE0000000

//NVIC Base Address

#define NVIC_Base		 0xE000E100UL

//NVIC register map

//interrupt set enable registers
#define NVIC_ISER0		*((volatile uint32_t*)(NVIC_Base + 0x000))
#define NVIC_ISER1		*((volatile uint32_t*)(NVIC_Base + 0x004))
#define NVIC_ISER2		*((volatile uint32_t*)(NVIC_Base + 0x008))

//interrupt clear enable register
#define NVIC_ICER0		*((volatile uint32_t*)(NVIC_Base + 0x080))
#define NVIC_ICER1		*((volatile uint32_t*)(NVIC_Base + 0x084))
#define NVIC_ICER2		*((volatile uint32_t*)(NVIC_Base + 0x088))



//---------------------------------------------------
//Base Addresses for AHB Peripherals
//---------------------------------------------------

#define RCC_BASE 0x40021000


//---------------------------------------------------
//Base Addresses for APB2 Peripherals 
//---------------------------------------------------

//GPIO 
//A, B are fully included in LQFP48 Package

#define GPIOA_BASE 		0x40010800
#define GPIOB_BASE 		0x40010C00

//C, D are partially included in LQFP48 Package

#define GPIOC_BASE 		0x40011000
#define GPIOD_BASE 		0x40011400

//E is not included in LQFP48 Package

#define GPIOE_BASE 		0x40011800


//EXTI
#define EXTI_BASE 		0x40010400


//AFIO
#define AFIO_BASE 		0x40010000



//USART1
#define USART1_BASE		0x40013800


//SPI1
#define SPI1_BASE		0x40013000


//---------------------------------------------------
//Base Addresses for APB1 Peripherals
//---------------------------------------------------


//USART2
#define USART2_BASE		0x40004400


//USART3
#define USART3_BASE		0x40004800


//SPI2
#define SPI2_BASE		0x40003800


//I2C1
#define I2C1_BASE		0x40005400


//I2C2
#define I2C2_BASE		0x40005800


//---------------------------------------------------
//Peripheral Register: GPIO
//---------------------------------------------------


typedef struct
{
	volatile uint32_t GPIOx_CRL;
	volatile uint32_t GPIOx_CRH;
	volatile uint32_t GPIOx_IDR;
	volatile uint32_t GPIOx_ODR;
	volatile uint32_t GPIOx_BSRR;
	volatile uint32_t GPIOx_BRR;
	volatile uint32_t GPIOx_LCKR;

}GPIO_TypeDef;


//---------------------------------------------------
//Peripheral Register: RCC
//---------------------------------------------------

typedef struct 
{
	volatile uint32_t RCC_CR;
	volatile uint32_t RCC_CFGR;
	volatile uint32_t RCC_CIR;
	volatile uint32_t RCC_APB2RSTR;
	volatile uint32_t RCC_APB1RSTR;
	volatile uint32_t RCC_AHBENR;
	volatile uint32_t RCC_APB2ENR;
	volatile uint32_t RCC_APB1ENR;
	volatile uint32_t RCC_BDCR;
	volatile uint32_t RCC_CSR;

}RCC_TypeDef;



//---------------------------------------------------
//Peripheral Register: AFIO
//---------------------------------------------------

typedef struct 
{
	volatile uint32_t AFIO_EVCR;
	volatile uint32_t AFIO_MAPR;
	volatile uint32_t AFIO_EXTICR[4];
	volatile uint32_t RESERVED0;
	volatile uint32_t AFIO_MAPR2;

}AFIO_TypeDef;




//---------------------------------------------------
//Peripheral Register: EXTI
//---------------------------------------------------

typedef struct 
{
	volatile uint32_t EXTI_IMR;
	volatile uint32_t EXTI_EMR;
	volatile uint32_t EXTI_RTSR;
	volatile uint32_t EXTI_FTSR;
	volatile uint32_t EXTI_SWIER;
	volatile uint32_t EXTI_PR;

}EXTI_TypeDef;



//---------------------------------------------------
//Peripheral Register: USART
//---------------------------------------------------

typedef struct
{
	volatile uint32_t USART_SR;
	volatile uint32_t USART_DR;
	volatile uint32_t USART_BRR;
	volatile uint32_t USART_CR1;
	volatile uint32_t USART_CR2;
	volatile uint32_t USART_CR3;
	volatile uint32_t USART_GTPR;


}USART_TypeDef;



//---------------------------------------------------
//Peripheral Register: SPI
//---------------------------------------------------


typedef struct
{
	volatile uint32_t SPI_CR1;
	volatile uint32_t SPI_CR2;
	volatile uint32_t SPI_SR;
	volatile uint32_t SPI_DR;
	volatile uint32_t SPI_CRCPR;
	volatile uint32_t SPI_RXCRCR;
	volatile uint32_t SPI_TXCRCR;
	volatile uint32_t SPI_I2SCFGR;
	volatile uint32_t SPI_I2SPR;

}SPI_TypeDef;

typedef union
{

	uint32_t All_Register;

	struct SPI_SR_Bits
	{
		uint16_t RXNE      : 1;
		uint16_t TXE       : 1;
		uint16_t CHSIDE    : 1;
		uint16_t UDR       : 1;
		uint16_t CRCERR    : 1;
		uint16_t MODF      : 1;
		uint16_t OVR       : 1;
		uint16_t BSY       : 1;
		uint16_t Reserved  : 8;


	}Bit_Name;


}SPI_SR;




//---------------------------------------------------
//Peripheral Register: I2C
//---------------------------------------------------

typedef struct
{
	volatile uint32_t  I2C_CR1;
	volatile uint32_t  I2C_CR2;
	volatile uint32_t  I2C_OAR1;
	volatile uint32_t  I2C_OAR2;
	volatile uint32_t  I2C_DR;
	volatile uint32_t  I2C_SR1;
	volatile uint32_t  I2C_SR2;
	volatile uint32_t  I2C_CCR;
	volatile uint32_t  I2C_TRISE;

}I2C_TypeDef;



//---------------------------------------------------
// Peripheral Instants:
//---------------------------------------------------

//GPIO
#define GPIOA ((GPIO_TypeDef *)(GPIOA_BASE))
#define GPIOB ((GPIO_TypeDef *)(GPIOB_BASE))
#define GPIOC ((GPIO_TypeDef *)(GPIOC_BASE))
#define GPIOD ((GPIO_TypeDef *)(GPIOD_BASE))
#define GPIOE ((GPIO_TypeDef *)(GPIOE_BASE))


//RCC
#define RCC ((RCC_TypeDef *)(RCC_BASE)) 


//AFIO
#define AFIO ((AFIO_TypeDef *)(AFIO_BASE))


//EXTI
#define EXTI ((EXTI_TypeDef *)(EXTI_BASE))


//USART
#define USART1 ((USART_TypeDef *)(USART1_BASE))
#define USART2 ((USART_TypeDef *)(USART2_BASE))
#define USART3 ((USART_TypeDef *)(USART3_BASE))


//SPI
#define SPI1 ((SPI_TypeDef *)(SPI1_BASE))
#define SPI2 ((SPI_TypeDef *)(SPI2_BASE))


//I2C
#define I2C1 ((I2C_TypeDef *)(I2C1_BASE))
#define I2C2 ((I2C_TypeDef *)(I2C2_BASE))


/*________IVT______*/


//IVT IRQ Numbers

#define EXTI0_IRQ		6U		/*IVT IRQ Number6*/
#define EXTI1_IRQ		7U		/*IVT IRQ Number7*/
#define EXTI2_IRQ		8U		/*IVT IRQ Number8*/
#define EXTI3_IRQ		9U		/*IVT IRQ Number9*/
#define EXTI4_IRQ		10U		/*IVT IRQ Number10*/
#define EXTI5_IRQ		23U		/*IVT IRQ Number23*/
#define EXTI6_IRQ		23U		/*IVT IRQ Number23*/
#define EXTI7_IRQ		23U		/*IVT IRQ Number23*/
#define EXTI8_IRQ		23U		/*IVT IRQ Number23*/
#define EXTI9_IRQ		23U		/*IVT IRQ Number23*/
#define EXTI10_IRQ		40U		/*IVT IRQ Number40*/
#define EXTI11_IRQ		40U		/*IVT IRQ Number40*/
#define EXTI12_IRQ		40U		/*IVT IRQ Number40*/
#define EXTI13_IRQ		40U		/*IVT IRQ Number40*/
#define EXTI14_IRQ		40U		/*IVT IRQ Number40*/
#define EXTI15_IRQ		40U		/*IVT IRQ Number40*/

#define USART1_IRQ		37U		/*IVT IRQ Number37*/
#define USART2_IRQ		38U		/*IVT IRQ Number38*/
#define USART3_IRQ		39U		/*IVT IRQ Number39*/

#define SPI1_IRQ		35U		/*IVT IRQ Number35*/
#define SPI2_IRQ		36U		/*IVT IRQ Number36*/

#define I2C1_EV_IRQ		31U		/*IVT IRQ Number 31*/
#define I2C1_ER_IRQ		32U		/*IVT IRQ Number 32*/
#define I2C2_EV_IRQ		33U		/*IVT IRQ Number 33*/
#define I2C2_ER_IRQ		34U		/*IVT IRQ Number 34*/


//---------------------------------------------------
// Clock Enable Macros:
//---------------------------------------------------

//GPIO
#define RCC_GPIOA_CLK_EN()    (RCC->RCC_APB2ENR |= 1<<2)
#define RCC_GPIOB_CLK_EN()    (RCC->RCC_APB2ENR |= 1<<3)
#define RCC_GPIOC_CLK_EN()    (RCC->RCC_APB2ENR |= 1<<4)
#define RCC_GPIOD_CLK_EN()    (RCC->RCC_APB2ENR |= 1<<5)
#define RCC_GPIOE_CLK_EN()    (RCC->RCC_APB2ENR |= 1<<6)


//AFIO
#define RCC_AFIO_CLK_EN()    (RCC->RCC_APB2ENR |= 1<<0)


//USART
#define RCC_USART1_CLK_EN()	(RCC->RCC_APB2ENR |= 1<<14)
#define RCC_USART2_CLK_EN()	(RCC->RCC_APB2ENR |= 1<<17)
#define RCC_USART3_CLK_EN()	(RCC->RCC_APB2ENR |= 1<<18)


//SPI
#define RCC_SPI1_CLK_EN()	(RCC->RCC_APB2ENR |= 1<<12)
#define RCC_SPI2_CLK_EN()	(RCC->RCC_APB1ENR |= 1<<14)


//I2C
#define RCC_I2C1_CLK_EN()	(RCC->RCC_APB1ENR |= 1<<21)
#define RCC_I2C2_CLK_EN()	(RCC->RCC_APB1ENR |= 1<<22)

//---------------------------------------------------
// Clock Disable Macros:
//---------------------------------------------------

//GPIO
#define RCC_GPIOA_CLK_DIS()    (RCC->RCC_APB2RSTR |= 1<<2)
#define RCC_GPIOB_CLK_DIS()    (RCC->RCC_APB2RSTR |= 1<<3)
#define RCC_GPIOC_CLK_DIS()    (RCC->RCC_APB2RSTR |= 1<<4)
#define RCC_GPIOD_CLK_DIS()    (RCC->RCC_APB2RSTR |= 1<<5)
#define RCC_GPIOE_CLK_DIS()    (RCC->RCC_APB2RSTR |= 1<<6)


//AFIO
#define RCC_AFIO_CLK_DIS()    (RCC->RCC_APB2RSTR |= 1<<0)


//USART
#define RCC_USART1_CLK_DIS()	(RCC->RCC_APB2RSTR |= 1<<14)
#define RCC_USART2_CLK_DIS()	(RCC->RCC_APB1RSTR |= 1<<17)
#define RCC_USART3_CLK_DIS()	(RCC->RCC_APB1RSTR |= 1<<18)


//SPI
#define RCC_SPI1_CLK_DIS()	(RCC->RCC_APB2RSTR |= 1<<12)
#define RCC_SPI2_CLK_DIS()	(RCC->RCC_APB1RSTR |= 1<<14)


//I2C
#define RCC_I2C1_CLK_DIS()	(RCC->RCC_APB1RSTR |= 1<<21)
#define RCC_I2C2_CLK_DIS()	(RCC->RCC_APB1RSTR |= 1<<22)


//---------------------------------------------------
// NVIC IRQ Enable Macros:
//---------------------------------------------------

//Enable EXTI_IRQ
#define NVIC_Enable_EXTI0_IRQ6			SET_BIT(NVIC_ISER0, 6)
#define NVIC_Enable_EXTI1_IRQ7			SET_BIT(NVIC_ISER0, 7)
#define NVIC_Enable_EXTI2_IRQ8			SET_BIT(NVIC_ISER0, 8)
#define NVIC_Enable_EXTI3_IRQ9			SET_BIT(NVIC_ISER0, 9)
#define NVIC_Enable_EXTI4_IRQ10			SET_BIT(NVIC_ISER0, 10)
#define NVIC_Enable_EXTI9_5_IRQ23		SET_BIT(NVIC_ISER0, 23)
#define NVIC_Enable_EXTI15_10_IRQ40		SET_BIT(NVIC_ISER1, 8)	// 40 - 32 = 8

//Enable USART_IRQ
#define NVIC_Enable_USART1_IRQ37		SET_BIT(NVIC_ISER1, 5)	// 37 - 32 = 5
#define NVIC_Enable_USART2_IRQ38		SET_BIT(NVIC_ISER1, 6)	// 38 - 32 = 6
#define NVIC_Enable_USART3_IRQ39		SET_BIT(NVIC_ISER1, 7)	// 39 - 32 = 7


//Enable SPI_IRQ
#define NVIC_Enable_SPI1_IRQ35			SET_BIT(NVIC_ISER1, 3)	// 35 - 32 = 3
#define NVIC_Enable_SPI2_IRQ36			SET_BIT(NVIC_ISER1, 4)	// 36 - 32 = 4


//Enable I2C_IRQ
#define NVIC_Enable_I2C1_EV_IRQ31			SET_BIT(NVIC_ISER0, 31)
#define NVIC_Enable_I2C1_ER_IRQ32			SET_BIT(NVIC_ISER1, 0)	// 32 - 32 = 0
#define NVIC_Enable_I2C2_EV_IRQ33			SET_BIT(NVIC_ISER1, 1)  //33 - 32  = 1
#define NVIC_Enable_I2C2_ER_IRQ34			SET_BIT(NVIC_ISER1, 2)	// 32 - 32 = 0

//---------------------------------------------------
// NVIC IRQ Disable Macros:
//---------------------------------------------------


//Disable EXTI_IRQ
#define NVIC_Disable_EXTI0_IRQ6			SET_BIT(NVIC_ICER0, 6)
#define NVIC_Disable_EXTI1_IRQ7			SET_BIT(NVIC_ICER0, 7)
#define NVIC_Disable_EXTI2_IRQ8			SET_BIT(NVIC_ICER0, 8)
#define NVIC_Disable_EXTI3_IRQ9			SET_BIT(NVIC_ICER0, 9)
#define NVIC_Disable_EXTI4_IRQ10		SET_BIT(NVIC_ICER0, 10)
#define NVIC_Disable_EXTI9_5_IRQ23		SET_BIT(NVIC_ICER0, 23)
#define NVIC_Disable_EXTI15_10_IRQ40	SET_BIT(NVIC_ICER1, 8)	// 40 - 32 = 8


//Disable USART_IRQ
#define NVIC_Disable_USART1_IRQ37		SET_BIT(NVIC_ICER1, 5)	// 37 - 32 = 5
#define NVIC_Disable_USART2_IRQ38		SET_BIT(NVIC_ICER1, 6)	// 38 - 32 = 6
#define NVIC_Disable_USART3_IRQ39		SET_BIT(NVIC_ICER1, 7)	// 39 - 32 = 7


//Disable SPI_IRQ
#define NVIC_Disable_SPI1_IRQ35			SET_BIT(NVIC_ICER1, 3)	// 35 - 32 = 3
#define NVIC_Disable_SPI2_IRQ36			SET_BIT(NVIC_ICER1, 4)	// 36 - 32 = 4


//Disable I2C_IRQ
#define NVIC_Disable_I2C1_EV_IRQ31			SET_BIT(NVIC_ICER0, 31)
#define NVIC_Disable_I2C1_ER_IRQ32			SET_BIT(NVIC_ICER1, 0)	// 32 - 32 = 0
#define NVIC_Disable_I2C2_EV_IRQ33			SET_BIT(NVIC_ICER1, 1)  //33 - 32  = 1
#define NVIC_Disable_I2C2_ER_IRQ34			SET_BIT(NVIC_ICER1, 2)	// 32 - 32 = 0



/********************************************************/
/********************************************************/
/********************************************************/
/*******************  Bit definition  ********************/
/********************************************************/
/********************************************************/



/*******************  Bit definition for I2C_CR1 register  ********************/
#define I2C_CR1_PE_Pos                      (0U)
#define I2C_CR1_PE_Msk                      (0x1UL << I2C_CR1_PE_Pos)           /*!< 0x00000001 */
#define I2C_CR1_PE                          I2C_CR1_PE_Msk                     /*!< Peripheral Enable */
#define I2C_CR1_SMBUS_Pos                   (1U)
#define I2C_CR1_SMBUS_Msk                   (0x1UL << I2C_CR1_SMBUS_Pos)        /*!< 0x00000002 */
#define I2C_CR1_SMBUS                       I2C_CR1_SMBUS_Msk                  /*!< SMBus Mode */
#define I2C_CR1_SMBTYPE_Pos                 (3U)
#define I2C_CR1_SMBTYPE_Msk                 (0x1UL << I2C_CR1_SMBTYPE_Pos)      /*!< 0x00000008 */
#define I2C_CR1_SMBTYPE                     I2C_CR1_SMBTYPE_Msk                /*!< SMBus Type */
#define I2C_CR1_ENARP_Pos                   (4U)
#define I2C_CR1_ENARP_Msk                   (0x1UL << I2C_CR1_ENARP_Pos)        /*!< 0x00000010 */
#define I2C_CR1_ENARP                       I2C_CR1_ENARP_Msk                  /*!< ARP Enable */
#define I2C_CR1_ENPEC_Pos                   (5U)
#define I2C_CR1_ENPEC_Msk                   (0x1UL << I2C_CR1_ENPEC_Pos)        /*!< 0x00000020 */
#define I2C_CR1_ENPEC                       I2C_CR1_ENPEC_Msk                  /*!< PEC Enable */
#define I2C_CR1_ENGC_Pos                    (6U)
#define I2C_CR1_ENGC_Msk                    (0x1UL << I2C_CR1_ENGC_Pos)         /*!< 0x00000040 */
#define I2C_CR1_ENGC                        I2C_CR1_ENGC_Msk                   /*!< General Call Enable */
#define I2C_CR1_NOSTRETCH_Pos               (7U)
#define I2C_CR1_NOSTRETCH_Msk               (0x1UL << I2C_CR1_NOSTRETCH_Pos)    /*!< 0x00000080 */
#define I2C_CR1_NOSTRETCH                   I2C_CR1_NOSTRETCH_Msk              /*!< Clock Stretching Disable (Slave mode) */
#define I2C_CR1_START_Pos                   (8U)
#define I2C_CR1_START_Msk                   (0x1UL << I2C_CR1_START_Pos)        /*!< 0x00000100 */
#define I2C_CR1_START                       I2C_CR1_START_Msk                  /*!< Start Generation */
#define I2C_CR1_STOP_Pos                    (9U)
#define I2C_CR1_STOP_Msk                    (0x1UL << I2C_CR1_STOP_Pos)         /*!< 0x00000200 */
#define I2C_CR1_STOP                        I2C_CR1_STOP_Msk                   /*!< Stop Generation */
#define I2C_CR1_ACK_Pos                     (10U)
#define I2C_CR1_ACK_Msk                     (0x1UL << I2C_CR1_ACK_Pos)          /*!< 0x00000400 */
#define I2C_CR1_ACK                         I2C_CR1_ACK_Msk                    /*!< Acknowledge Enable */
#define I2C_CR1_POS_Pos                     (11U)
#define I2C_CR1_POS_Msk                     (0x1UL << I2C_CR1_POS_Pos)          /*!< 0x00000800 */
#define I2C_CR1_POS                         I2C_CR1_POS_Msk                    /*!< Acknowledge/PEC Position (for data reception) */
#define I2C_CR1_PEC_Pos                     (12U)
#define I2C_CR1_PEC_Msk                     (0x1UL << I2C_CR1_PEC_Pos)          /*!< 0x00001000 */
#define I2C_CR1_PEC                         I2C_CR1_PEC_Msk                    /*!< Packet Error Checking */
#define I2C_CR1_ALERT_Pos                   (13U)
#define I2C_CR1_ALERT_Msk                   (0x1UL << I2C_CR1_ALERT_Pos)        /*!< 0x00002000 */
#define I2C_CR1_ALERT                       I2C_CR1_ALERT_Msk                  /*!< SMBus Alert */
#define I2C_CR1_SWRST_Pos                   (15U)
#define I2C_CR1_SWRST_Msk                   (0x1UL << I2C_CR1_SWRST_Pos)        /*!< 0x00008000 */
#define I2C_CR1_SWRST                       I2C_CR1_SWRST_Msk                  /*!< Software Reset */
/*******************  Bit definition for I2C_CR2 register  ********************/
#define I2C_CR2_FREQ_Pos                    (0U)
#define I2C_CR2_FREQ_Msk                    (0x3FUL << I2C_CR2_FREQ_Pos)        /*!< 0x0000003F */
#define I2C_CR2_FREQ                        I2C_CR2_FREQ_Msk                   /*!< FREQ[5:0] bits (Peripheral Clock Frequency) */
#define I2C_CR2_ITERREN_Pos                 (8U)
#define I2C_CR2_ITERREN_Msk                 (0x1UL << I2C_CR2_ITERREN_Pos)      /*!< 0x00000100 */
#define I2C_CR2_ITERREN                     I2C_CR2_ITERREN_Msk                /*!< Error Interrupt Enable */
#define I2C_CR2_ITEVTEN_Pos                 (9U)
#define I2C_CR2_ITEVTEN_Msk                 (0x1UL << I2C_CR2_ITEVTEN_Pos)      /*!< 0x00000200 */
#define I2C_CR2_ITEVTEN                     I2C_CR2_ITEVTEN_Msk                /*!< Event Interrupt Enable */
#define I2C_CR2_ITBUFEN_Pos                 (10U)
#define I2C_CR2_ITBUFEN_Msk                 (0x1UL << I2C_CR2_ITBUFEN_Pos)      /*!< 0x00000400 */
#define I2C_CR2_ITBUFEN                     I2C_CR2_ITBUFEN_Msk                /*!< Buffer Interrupt Enable */
#define I2C_CR2_DMAEN_Pos                   (11U)
#define I2C_CR2_DMAEN_Msk                   (0x1UL << I2C_CR2_DMAEN_Pos)        /*!< 0x00000800 */
#define I2C_CR2_DMAEN                       I2C_CR2_DMAEN_Msk                  /*!< DMA Requests Enable */
#define I2C_CR2_LAST_Pos                    (12U)
#define I2C_CR2_LAST_Msk                    (0x1UL << I2C_CR2_LAST_Pos)         /*!< 0x00001000 */
#define I2C_CR2_LAST                        I2C_CR2_LAST_Msk                   /*!< DMA Last Transfer */
/*******************  Bit definition for I2C_OAR2 register  *******************/
#define I2C_OAR2_ENDUAL_Pos                 (0U)
#define I2C_OAR2_ENDUAL_Msk                 (0x1UL << I2C_OAR2_ENDUAL_Pos)      /*!< 0x00000001 */
#define I2C_OAR2_ENDUAL                     I2C_OAR2_ENDUAL_Msk                /*!< Dual addressing mode enable */
#define I2C_OAR2_ADD2_Pos                   (1U)
/*******************  Bit definition for I2C_SR1 register  ********************/
#define I2C_SR1_SB_Pos                      (0U)
#define I2C_SR1_SB_Msk                      (0x1UL << I2C_SR1_SB_Pos)           /*!< 0x00000001 */
#define I2C_SR1_SB                          I2C_SR1_SB_Msk                     /*!< Start Bit (Master mode) */
#define I2C_SR1_ADDR_Pos                    (1U)
#define I2C_SR1_ADDR_Msk                    (0x1UL << I2C_SR1_ADDR_Pos)         /*!< 0x00000002 */
#define I2C_SR1_ADDR                        I2C_SR1_ADDR_Msk                   /*!< Address sent (master mode)/matched (slave mode) */
#define I2C_SR1_BTF_Pos                     (2U)
#define I2C_SR1_BTF_Msk                     (0x1UL << I2C_SR1_BTF_Pos)          /*!< 0x00000004 */
#define I2C_SR1_BTF                         I2C_SR1_BTF_Msk                    /*!< Byte Transfer Finished */
#define I2C_SR1_ADD10_Pos                   (3U)
#define I2C_SR1_ADD10_Msk                   (0x1UL << I2C_SR1_ADD10_Pos)        /*!< 0x00000008 */
#define I2C_SR1_ADD10                       I2C_SR1_ADD10_Msk                  /*!< 10-bit header sent (Master mode) */
#define I2C_SR1_STOPF_Pos                   (4U)
#define I2C_SR1_STOPF_Msk                   (0x1UL << I2C_SR1_STOPF_Pos)        /*!< 0x00000010 */
#define I2C_SR1_STOPF                       I2C_SR1_STOPF_Msk                  /*!< Stop detection (Slave mode) */
#define I2C_SR1_RXNE_Pos                    (6U)
#define I2C_SR1_RXNE_Msk                    (0x1UL << I2C_SR1_RXNE_Pos)         /*!< 0x00000040 */
#define I2C_SR1_RXNE                        I2C_SR1_RXNE_Msk                   /*!< Data Register not Empty (receivers) */
#define I2C_SR1_TXE_Pos                     (7U)
#define I2C_SR1_TXE_Msk                     (0x1UL << I2C_SR1_TXE_Pos)          /*!< 0x00000080 */
#define I2C_SR1_TXE                         I2C_SR1_TXE_Msk                    /*!< Data Register Empty (transmitters) */
#define I2C_SR1_BERR_Pos                    (8U)
#define I2C_SR1_BERR_Msk                    (0x1UL << I2C_SR1_BERR_Pos)         /*!< 0x00000100 */
#define I2C_SR1_BERR                        I2C_SR1_BERR_Msk                   /*!< Bus Error */
#define I2C_SR1_ARLO_Pos                    (9U)
#define I2C_SR1_ARLO_Msk                    (0x1UL << I2C_SR1_ARLO_Pos)         /*!< 0x00000200 */
#define I2C_SR1_ARLO                        I2C_SR1_ARLO_Msk                   /*!< Arbitration Lost (master mode) */
#define I2C_SR1_AF_Pos                      (10U)
#define I2C_SR1_AF_Msk                      (0x1UL << I2C_SR1_AF_Pos)           /*!< 0x00000400 */
#define I2C_SR1_AF                          I2C_SR1_AF_Msk                     /*!< Acknowledge Failure */
#define I2C_SR1_OVR_Pos                     (11U)
#define I2C_SR1_OVR_Msk                     (0x1UL << I2C_SR1_OVR_Pos)          /*!< 0x00000800 */
#define I2C_SR1_OVR                         I2C_SR1_OVR_Msk                    /*!< Overrun/Underrun */
#define I2C_SR1_PECERR_Pos                  (12U)
#define I2C_SR1_PECERR_Msk                  (0x1UL << I2C_SR1_PECERR_Pos)       /*!< 0x00001000 */
#define I2C_SR1_PECERR                      I2C_SR1_PECERR_Msk                 /*!< PEC Error in reception */
#define I2C_SR1_TIMEOUT_Pos                 (14U)
#define I2C_SR1_TIMEOUT_Msk                 (0x1UL << I2C_SR1_TIMEOUT_Pos)      /*!< 0x00004000 */
#define I2C_SR1_TIMEOUT                     I2C_SR1_TIMEOUT_Msk                /*!< Timeout or Tlow Error */
#define I2C_SR1_SMBALERT_Pos                (15U)
#define I2C_SR1_SMBALERT_Msk                (0x1UL << I2C_SR1_SMBALERT_Pos)     /*!< 0x00008000 */
#define I2C_SR1_SMBALERT                    I2C_SR1_SMBALERT_Msk               /*!< SMBus Alert */

/*******************  Bit definition for I2C_SR2 register  ********************/
#define I2C_SR2_MSL_Pos                     (0U)
#define I2C_SR2_MSL_Msk                     (0x1UL << I2C_SR2_MSL_Pos)          /*!< 0x00000001 */
#define I2C_SR2_MSL                         I2C_SR2_MSL_Msk                    /*!< Master/Slave */
#define I2C_SR2_BUSY_Pos                    (1U)
#define I2C_SR2_BUSY_Msk                    (0x1UL << I2C_SR2_BUSY_Pos)         /*!< 0x00000002 */
#define I2C_SR2_BUSY                        I2C_SR2_BUSY_Msk                   /*!< Bus Busy */
#define I2C_SR2_TRA_Pos                     (2U)
#define I2C_SR2_TRA_Msk                     (0x1UL << I2C_SR2_TRA_Pos)          /*!< 0x00000004 */
#define I2C_SR2_TRA                         I2C_SR2_TRA_Msk                    /*!< Transmitter/Receiver */
#define I2C_SR2_GENCALL_Pos                 (4U)
#define I2C_SR2_GENCALL_Msk                 (0x1UL << I2C_SR2_GENCALL_Pos)      /*!< 0x00000010 */
#define I2C_SR2_GENCALL                     I2C_SR2_GENCALL_Msk                /*!< General Call Address (Slave mode) */
#define I2C_SR2_SMBDEFAULT_Pos              (5U)
#define I2C_SR2_SMBDEFAULT_Msk              (0x1UL << I2C_SR2_SMBDEFAULT_Pos)   /*!< 0x00000020 */
#define I2C_SR2_SMBDEFAULT                  I2C_SR2_SMBDEFAULT_Msk             /*!< SMBus Device Default Address (Slave mode) */
#define I2C_SR2_SMBHOST_Pos                 (6U)
#define I2C_SR2_SMBHOST_Msk                 (0x1UL << I2C_SR2_SMBHOST_Pos)      /*!< 0x00000040 */
#define I2C_SR2_SMBHOST                     I2C_SR2_SMBHOST_Msk                /*!< SMBus Host Header (Slave mode) */
#define I2C_SR2_DUALF_Pos                   (7U)
#define I2C_SR2_DUALF_Msk                   (0x1UL << I2C_SR2_DUALF_Pos)        /*!< 0x00000080 */
#define I2C_SR2_DUALF                       I2C_SR2_DUALF_Msk                  /*!< Dual Flag (Slave mode) */
#define I2C_SR2_PEC_Pos                     (8U)
#define I2C_SR2_PEC_Msk                     (0xFFUL << I2C_SR2_PEC_Pos)         /*!< 0x0000FF00 */
#define I2C_SR2_PEC                         I2C_SR2_PEC_Msk                    /*!< Packet Error Checking Register */




//---------------------------------------------------
// Generic Macros:
//---------------------------------------------------

#define SET_BIT(REG, BIT)			REG |= (1U<<BIT)
#define CLEAR_BIT(REG, BIT)			REG &= ~(1U<<BIT)
#define READ_BIT(REG, BIT)			(REG & (1U<<BIT))>>BIT
#define TOGGLE_BIT(REG, BIT)		REG ^= (1U<<BIT)
#define READ_PORT(REG)				REG & 0xFFFF
#define TOGGLE_PORT(REG)			REG ^= 0xFFFF



#endif /*STM32F103X8_H_*/
