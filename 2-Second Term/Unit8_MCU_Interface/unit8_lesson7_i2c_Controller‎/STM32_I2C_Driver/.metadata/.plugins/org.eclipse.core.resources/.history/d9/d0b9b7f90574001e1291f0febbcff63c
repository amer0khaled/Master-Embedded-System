
/*
===========================================
		Includes
===========================================
 */

#include "STM32_I2C.h"


/*
===========================================
		Generic Variables
===========================================
 */

I2C_Config Global_I2C_Config[2] ;

typedef enum
{
	Disable,
	Enable
}Function_State;


typedef enum
{
	Reset_Flag,
	Set_Flag

}Flag_Status;

typedef enum
{
	SR1_SB,
	SR1_ADDR,
	SR1_BTF,
	SR1_TxE,
	SR1_ADD10,
	SR1_RxNE,
	SR2_MSL,
	SR2_Busy,
	SR2_TRA,
	MASTER_BYTE_TRANSMITTING = ((uint32_t)(0x00070080))		//TRA , BUSY, MSL , TxE flags

}Status;


typedef enum
{
	I2C_write,
	I2C_read
}I2C_Direction;




/*
===========================================
		Generic Macros
===========================================
 */

#define I2C1_INDEX		0
#define I2C2_INDEX		1


/*
===========================================
			Generic APIs
===========================================
 */

void I2C_Generate_Start(I2C_TypeDef* I2C_Instant, Function_State state, Repeated_Start start)
{
	if(start != repeated_satrt)
	{
		//check if the BUS is idle
		while(Get_Flag_Status(I2C2, SR2_Busy));

		if(state == Enable)
		{
			SET_BIT(I2C_Instant->I2C_CR1, 8);
		}
		else
		{
			CLEAR_BIT(I2C_Instant->I2C_CR1, 8);
		}
	}
}


Flag_Status I2C_GET_FLAG_STATUS( I2C_TypeDef *I2C_Instant , Status flag )
{
	volatile uint16_t dummy_read;
	Flag_Status status = Reset_Flag;
	uint16_t SR1_Reg;
	uint16_t SR2_Reg;
	uint32_t I2C_StatusRegs;

	switch(flag)
	{
	case SR1_SB:
		if(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_SB_Pos))
		{
			status = Set_Flag;
		}
		else
		{
			status = Reset_Flag;
		}
		break;

	case SR1_ADDR:
		if(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_ADDR_Pos))
		{
			status = Set_Flag;
		}
		else
		{
			status = Reset_Flag;
		}
		dummy_read = I2C2->I2C_SR2;
		break;

	case SR1_BTF:
		if(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_BTF_Pos))
		{
			status = Set_Flag;
		}
		else
		{
			status = Reset_Flag;
		}
		break;

	case SR1_TxE:
		if(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_TXE_Pos))
		{
			status = Set_Flag;
		}
		else
		{
			status = Reset_Flag;
		}
		break;

	case SR1_ADD10:
		if(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_ADD10_Pos))
		{
			status = Set_Flag;
		}
		else
		{
			status = Reset_Flag;
		}
		break;

	case SR1_RxNE:
		if(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_RXNE_Pos))
		{
			status = Set_Flag;
		}
		else
		{
			status = Reset_Flag;
		}
		break;

	case SR2_MSL:
		if(READ_BIT(I2C_Instant->I2C_SR2, I2C_SR2_MSL_Pos))
		{
			status = Set_Flag;
		}
		else
		{
			status = Reset_Flag;
		}
		break;

	case SR2_Busy:
		if(READ_BIT(I2C_Instant->I2C_SR2, I2C_SR2_BUSY_Pos))
		{
			status = Set_Flag;
		}
		else
		{
			status = Reset_Flag;
		}
		break;

	case SR2_TRA:
		if(READ_BIT(I2C_Instant->I2C_SR2, I2C_SR2_TRA_Pos))
		{
			status = Set_Flag;
		}
		else
		{
			status = Reset_Flag;
		}
		break;

	case MASTER_BYTE_TRANSMITTING:
		SR1_Reg = I2C_Instant->I2C_SR1;
		SR2_Reg = I2C_Instant->I2C_SR2;
		SR2_Reg = SR2_Reg << 16;

		//Concatenate SR1 with SR2
		I2C_StatusRegs = SR1_Reg | SR2_Reg;

		if(I2C_StatusRegs == flag)
		{
			status = Set_Flag;
		}
		else
		{
			status = Reset_Flag;
		}


	}

	return status;
}


void I2C_SendAddress(I2C_TypeDef* I2C_Instant, uint16_t address, I2C_Direction dir)
{
	//supported only 7 bit addressing mode
	address = address << 1;

	address |= dir;

	I2C_Instant->I2C_DR = address;
}


void I2C_Generate_Stop_Condition(I2C_TypeDef* I2C_Instant, Function_State NewState)
{
	if(NewState == Enable)
	{
		//Enable Stop Condition Generation
		SET_BIT(I2C_Instant->I2C_CR1, 9);
	}
	else
	{
		//Disable Stop Condition Generation
		CLEAR_BIT(I2C_Instant->I2C_CR1, 9);
	}
}

void I2C_AcknowledgeConfig(I2C_TypeDef * I2C_Instant, Function_State FNstate)
{
	if(FNstate == Enable)
	{
		//Enable ACK
		SET_BIT(I2C_Instant->I2C_CR1, 10);
	}
	else
	{
		//Disable ACK
		CLEAR_BIT(I2C_Instant->I2C_CR1, 10);
	}
}


/*
===========================================
			APIs
===========================================
 */


void MCAL_I2C_Init(I2C_TypeDef * I2C_Instant, I2C_Config * I2C_CFG)
{
	uint16_t TempReg = 0;
	uint32_t PCLK1 = 0;
	uint8_t Freq = 0;
	uint16_t CCR = 0;

	if(I2C_Instant == I2C1)
	{
		Global_I2C_Config[I2C1_INDEX] = * I2C_CFG;
	}
	else
	{
		Global_I2C_Config[I2C2_INDEX] = * I2C_CFG;
	}


	//------------------------------------------------
	//I2C_Mode
	if(I2C_CFG->I2C_Mode == I2C_Mode_I2C)
	{
		CLEAR_BIT(I2C_Instant->I2C_CR1, 1);

		/* Program the peripheral input clock in I2C_CR2 Register in order to generate correct
		timings*/
		PCLK1 = MCAL_RCC_GetPCLK1_Freq();

		Freq = (uint8_t)(PCLK1/(uint32_t)1000000);

		TempReg |= Freq;

		I2C_Instant->I2C_CR2 = TempReg;

		//------------------------------------------------
		//Configure the clock control registers
		TempReg = 0;


		//I2C Operates in Standard Mode (SM) >>> [This Device Driver Not Supported Fast Mode (FM)]
		TempReg &= ~(1<<15);

		//Configure CCR which Controls the SCL clock in master mode
		switch(I2C_CFG->I2C_CLK_Speed)
		{
		case I2C_CLK_Speed_SM_50KHz:
			CCR = PCLK1/(2*50000);
			break;

		case I2C_CLK_Speed_SM_60KHz:
			CCR = PCLK1/(2*60000);
			break;

		case I2C_CLK_Speed_SM_100KHz:
			CCR = PCLK1/(2*100000);
			break;

		}

		TempReg |= CCR;

		I2C_Instant->I2C_CCR = TempReg;

		//------------------------------------------------
		//Configure the rise time register
		I2C_Instant->I2C_TRISE = Freq + 1;


		//------------------------------------------------
		//Configure Clock Stretching
		TempReg = 0;

		if(I2C_CFG->I2C_CLK_Strerch == I2C_CLK_Strerch_EN)
		{
			CLEAR_BIT(TempReg, 7);
		}
		else
		{
			SET_BIT(TempReg, 7);
		}

		//------------------------------------------------
		//ACK Control
		if(I2C_CFG->I2C_ACK_Control == I2C_ACK_Control_EN)
		{
			SET_BIT(TempReg, 10);
		}
		else
		{
			CLEAR_BIT(TempReg, 10);
		}

		I2C_Instant->I2C_CR1 = TempReg;

		//------------------------------------------------
		//if the Device operates as a slave
		TempReg = 0;

		if(I2C_CFG->I2C_Slave_Addressing_Mode.Enable_Dual_Address == I2C_Addressing_Mode_Dual_EN)
		{
			//[Dual Addressing Mode Not Supported for Now]
		}
		else
		{
			CLEAR_BIT(TempReg, 0);
		}


		TempReg = 0;

		if(I2C_CFG->I2C_Slave_Addressing_Mode.Addressing_Mode == I2C_Slave_Addressing_Mode_7bit)
		{
			I2C_Instant->I2C_OAR1 = I2C_CFG->I2C_Slave_Addressing_Mode.Primary_Address   << 1;

			CLEAR_BIT(TempReg, 15);
		}

		else
		{
			//[10 bit addressing mode not supported]
		}

		I2C_Instant->I2C_OAR1 = TempReg;

	}
	else if(I2C_CFG->I2C_Mode == I2C_Mode_SMBus)
	{
		//Not Supported
	}

	//------------------------------------------------
	//Interrupt Enable (Slave Mode)
	if(I2C_CFG->P_Slave_Event_CallBack != NULL) //if CallBack Function != NULL ,then the I2C is salve
	{
		SET_BIT(I2C_Instant->I2C_CR2, 8);
		SET_BIT(I2C_Instant->I2C_CR2, 9);
		SET_BIT(I2C_Instant->I2C_CR2, 10);

		if(I2C_Instant == I2C1)
		{
			NVIC_Enable_I2C1_EV_IRQ31;
			NVIC_Enable_I2C1_ER_IRQ32;
		}
		else if(I2C_Instant == I2C2)
		{
			NVIC_Enable_I2C2_EV_IRQ33;
			NVIC_Enable_I2C2_ER_IRQ34;
		}

	}

	//Enable I2C Peripheral
	SET_BIT(I2C_Instant->I2C_CR1, 0);

}


void MCAL_I2C_DeInit(I2C_TypeDef * I2C_Instant)
{
	if(I2C_Instant == I2C1)
	{
		NVIC_Disable_I2C1_EV_IRQ31;
		NVIC_Disable_I2C1_ER_IRQ32;

		RCC_I2C1_CLK_DIS();
	}
	else if(I2C_Instant == I2C2)
	{
		NVIC_Disable_I2C2_EV_IRQ33;
		NVIC_Disable_I2C2_ER_IRQ34;
		RCC_I2C2_CLK_DIS();
	}
}


void MCAL_I2C_GPIO_SetPin(I2C_TypeDef * I2C_Instant)
{
	//I2C1_SMBAl >>> PB.5

	GPIO_PinConfig_t I2C_Pin;

	if(I2C_Instant == I2C1)
	{
		//I2C1_SCL   >>> PB.6
		I2C_Pin.GPIO_PinNumber = 6;
		I2C_Pin.GPIO_PinMode   = GPIO_MODE_AFIO_OUTPUT_OPEN_DRAIN;
		I2C_Pin.GPIO_PinSpeed  = GPIO_OUTPUT_SPEED_10MHz;

		MCAL_GPIO_Init(GPIOB, &I2C_Pin);

		//I2C1_SDA   >>> PB.7
		I2C_Pin.GPIO_PinNumber = 7;
		I2C_Pin.GPIO_PinMode   = GPIO_MODE_AFIO_OUTPUT_OPEN_DRAIN;
		I2C_Pin.GPIO_PinSpeed  = GPIO_OUTPUT_SPEED_10MHz;

		MCAL_GPIO_Init(GPIOB, &I2C_Pin);
	}
	else if(I2C_Instant == I2C2)
	{
		//I2C2_SCL  >>> PB.10
		I2C_Pin.GPIO_PinNumber = 10;
		I2C_Pin.GPIO_PinMode   = GPIO_MODE_AFIO_OUTPUT_OPEN_DRAIN;
		I2C_Pin.GPIO_PinSpeed  = GPIO_OUTPUT_SPEED_10MHz;

		MCAL_GPIO_Init(GPIOB, &I2C_Pin);

		//I2C2_SDA  >>> PB.11
		I2C_Pin.GPIO_PinNumber = 11;
		I2C_Pin.GPIO_PinMode   = GPIO_MODE_AFIO_OUTPUT_OPEN_DRAIN;
		I2C_Pin.GPIO_PinSpeed  = GPIO_OUTPUT_SPEED_10MHz;

		MCAL_GPIO_Init(GPIOB, &I2C_Pin);

	}


	//2C2_SMBAl >>> PB.12

}


void MCAL_I2C_Trasmitt(I2C_TypeDef *I2C_Instant, uint8_t *dataOut, uint32_t dataLen, uint16_t devadd, Repeated_Start start_bit, Stop_Condition stop)
{
	uint32_t iterator = 0;

	//1. set the start bit
	I2C_Generate_Start(I2C_Instant, Enable, start);

	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	//2. wait till SB = 1
	while(Get_Flag_Status(I2C_Instant, SR1_SB) != 1); //EV5

	//3. write DR with address
	I2C_SendAddress(I2C_Instant, devadd, I2C_write);

	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	//4. wait till ADDR = 1
	while(Get_Flag_Status(I2C_Instant, SR1_ADDR) != 1);

	//5. Check on TRA , BUSY, MSL , TxE flags
	while(Get_Flag_Status(I2C_Instant, MASTER_BYTE_TRANSMITTING) != 1);

	//6. write data on data register
	for(iterator = 0; iterator < dataLen; iterator++)
	{
		I2C_Instant->I2C_DR = dataOut[iterator];

		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(I2C_GET_FLAG_STATUS(I2C_Instant, SR1_TxE) != 1);
	}

	//EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	while( (I2C_GET_FLAG_STATUS(I2C_Instant, SR1_TxE) != 1) && (Get_Flag_Status(I2C_Instant, SR1_BTF) != 1) );

	//Generate Stop Condition
	if(stop == with_stop)
	{
		I2C_Generate_Stop_Condition(I2C_Instant, Enable);
	}

}


void MCAL_I2C_Receive(I2C_TypeDef *I2C_Instant, uint8_t *dataIn, uint32_t dataLen, uint16_t devadd, Repeated_Start start_bit, Stop_Condition stop)
{
	uint32_t iterator = 0;
	uint8_t index;

	//1. set the start bit
	I2C_Generate_Start(I2C_Instant, Enable, start);

	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	//2. wait till SB = 1
	while(Get_Flag_Status(I2C_Instant, SR1_SB) != 1); //EV5

	//3. write DR with address
	I2C_SendAddress(I2C_Instant, devadd, I2C_read);

	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	//4. wait till ADDR = 1
	while(Get_Flag_Status(I2C_Instant, SR1_ADDR) != 1);

	//to make sure that the ACK is Enabled before receiving data
	I2C_AcknowledgeConfig(I2C_Instant, Enable);

	//reading data
	for(iterator = 0; iterator < dataLen; iterator++)
	{
		//wait until data register being empty
		while(Get_Flag_Status(I2C_Instant, SR1_RxNE) == 1);

		dataIn[iterator] = I2C_Instant->I2C_DR;
	}

	//NotACK
	I2C_AcknowledgeConfig(I2C_Instant, Disable);

	//Generate Stop Condition
	if(stop == with_stop)
	{
		I2C_Generate_Stop_Condition(I2C_Instant, Enable);
	}

	//get I2C index
	if(I2C_Instant == I2C1)
	{
		index = I2C1_INDEX;
	}
	else if(I2C_Instant == I2C2)
	{
		index = I2C2_INDEX;
	}

	//reEnable ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_ACK_Control_EN)
	{
		I2C_AcknowledgeConfig(I2C_Instant, Enable);
	}
}


/*
void MCAL_I2C_SlaveSendData(I2C_TypeDef *I2C_Instant, uint8_t data)
{
	I2C_Instant->I2C_DR = data;
}

void MCAL_I2C_SlaveReceiveData(I2C_TypeDef *I2C_Instant)
{
	return (uint8_t) I2C_Instant->I2C_DR;
}
 */

/*Interrupt handlers for Slave device
///////ToDo/////


void I2C1_EV_IRQHandler(void);


void I2C1_ER_IRQHandler(void);


void I2C2_EV_IRQHandler(void);


void I2C2_ER_IRQHandler(void);

 */
