/*
 * I2C_Slave_EEPROM.c
 *
 *  Created on: Oct 26, 2023
 *      Author: Admin
 */

#include "I2C_Slave_EEPROM.h"

/*this is not an EEPROM device driver, it's just an APIs to Satisfy I2C Application*/

void HAL_EEPROM_Init(void)
{
	//I2C1_SCL   >>> PB.6
	//I2C1_SDA   >>> PB.7

	I2C_Config i2c;

	i2c.I2C_Mode                   = I2C_Mode_I2C;
	i2c.I2C_ACK_Control            = I2C_ACK_Control_EN;
	i2c.I2C_CLK_Speed              = I2C_CLK_Speed_SM_100KHz;
	i2c.I2C_CLK_Strerch            = I2C_CLK_Strerch_EN;
	i2c.I2C_Slave_Addressing_Mode.Addressing_Mode  = I2C_Slave_Addressing_Mode_7bit;
	i2c.P_Slave_Event_CallBack     = NULL;

	MCAL_I2C_Init(I2C1, &i2c);
	MCAL_I2C_GPIO_SetPin(I2C1);



}


uint8_t HAL_EEPROM_Write_Nbytes(uint32_t memory_address, uint8_t *dataIn, uint32_t dataLen)
{
	uint8_t iterator = 0;

	uint8_t DataBuffer[256] = {0};

	DataBuffer[0] = (uint8_t)(memory_address >> 8) 		//upper byte memory address
	DataBuffer[1] = (uint8_t)memory_address;			//lower byte memory address

	for(iterator = 2; iterator < (dataLen+2); iterator++)
	{
		DataBuffer[iterator] = dataIn[iterator - 2];
	}

	MCAL_I2C_Trasmitt(I2C1, DataBuffer, (dataLen+2), EEPROM_SLAVE_ADDRESS, start, with_stop);

	return 0;
}


uint8_t HAL_EEPROM_Read_Nbytes(uint32_t memory_address, uint8_t *dataOut, uint32_t dataLen)
{
	uint8_t AddressBuffer[2] = {0};
	AddressBuffer[0] = (uint8_t)(memory_address >> 8);    	//upper byte memory address
	AddressBuffer[1] = (uint8_t)memory_address;				//lower byte memory address

	MCAL_I2C_Trasmitt(I2C1, AddressBuffer, 2, EEPROM_SLAVE_ADDRESS, start, without_stop);	//write address

	MCAL_I2C_Receive(I2C1, dataOut, dataLen, EEPROM_SLAVE_ADDRESS, repeated_satrt, with_stop); //read data

	return 0;
}

