
Test_I2C_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e98  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fe8  08000fe8  00010ff0  2**0
                  CONTENTS
  4 .ARM          00000000  08000fe8  08000fe8  00010ff0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fe8  08000ff0  00010ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fe8  08000fe8  00010fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fec  08000fec  00010fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000000  08000ff0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08000ff0  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ff0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ca7  00000000  00000000  00011019  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010ad  00000000  00000000  00017cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000125e  00000000  00000000  00018d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002d0  00000000  00000000  00019fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000248  00000000  00000000  0001a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002f0b  00000000  00000000  0001a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000035f1  00000000  00000000  0001d3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c101  00000000  00000000  000209e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002cae5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000096c  00000000  00000000  0002cb60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fb0 	.word	0x08000fb0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000fb0 	.word	0x08000fb0

08000170 <HAL_EEPROM_Init>:
#include "I2C_Slave_EEPROM.h"

/*this is not an EEPROM device driver, it's just an APIs to Satisfy I2C Application*/

void HAL_EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
	//I2C1_SCL   >>> PB.6
	//I2C1_SDA   >>> PB.7

	I2C_Config i2c;

	i2c.I2C_Mode                                   = I2C_Mode_I2C;
 8000176:	2300      	movs	r3, #0
 8000178:	70bb      	strb	r3, [r7, #2]
	i2c.I2C_CLK_Speed                              = I2C_CLK_Speed_SM_100KHz;
 800017a:	2309      	movs	r3, #9
 800017c:	703b      	strb	r3, [r7, #0]
	i2c.I2C_CLK_Strerch                            = I2C_CLK_Strerch_EN;
 800017e:	2301      	movs	r3, #1
 8000180:	707b      	strb	r3, [r7, #1]
	i2c.I2C_Slave_Addressing_Mode.Addressing_Mode  = I2C_Slave_Addressing_Mode_7bit;
 8000182:	2300      	movs	r3, #0
 8000184:	727b      	strb	r3, [r7, #9]
	i2c.I2C_Slave_Addressing_Mode.Primary_Address  = EEPROM_SLAVE_ADDRESS;
 8000186:	232a      	movs	r3, #42	; 0x2a
 8000188:	80fb      	strh	r3, [r7, #6]
	i2c.P_Slave_Event_CallBack                     = NULL;
 800018a:	2300      	movs	r3, #0
 800018c:	60fb      	str	r3, [r7, #12]

	MCAL_I2C_Init(I2C1, &i2c);
 800018e:	463b      	mov	r3, r7
 8000190:	4619      	mov	r1, r3
 8000192:	4805      	ldr	r0, [pc, #20]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000194:	f000 fa1c 	bl	80005d0 <MCAL_I2C_Init>
	MCAL_I2C_GPIO_SetPin(I2C1);
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 800019a:	f000 fb63 	bl	8000864 <MCAL_I2C_GPIO_SetPin>



}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40005400 	.word	0x40005400

080001ac <HAL_EEPROM_Write_Nbytes>:


uint8_t HAL_EEPROM_Write_Nbytes(uint32_t memory_address, uint8_t *dataIn, uint32_t dataLen)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b0c8      	sub	sp, #288	; 0x120
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	f107 030c 	add.w	r3, r7, #12
 80001b6:	6018      	str	r0, [r3, #0]
 80001b8:	f107 0308 	add.w	r3, r7, #8
 80001bc:	6019      	str	r1, [r3, #0]
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	601a      	str	r2, [r3, #0]
	uint8_t iterator = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint8_t DataBuffer[256] = {0};
 80001c8:	f107 0314 	add.w	r3, r7, #20
 80001cc:	4618      	mov	r0, r3
 80001ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001d2:	461a      	mov	r2, r3
 80001d4:	2100      	movs	r1, #0
 80001d6:	f000 fee3 	bl	8000fa0 <memset>

	DataBuffer[0] = (uint8_t)(memory_address >> 8); 		//upper byte memory address
 80001da:	f107 030c 	add.w	r3, r7, #12
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	0a1b      	lsrs	r3, r3, #8
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = (uint8_t)memory_address;			//lower byte memory address
 80001ea:	f107 030c 	add.w	r3, r7, #12
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	705a      	strb	r2, [r3, #1]

	for(iterator = 2; iterator < (dataLen+2); iterator++)
 80001f8:	2302      	movs	r3, #2
 80001fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001fe:	e011      	b.n	8000224 <HAL_EEPROM_Write_Nbytes+0x78>
	{
		DataBuffer[iterator] = dataIn[iterator - 2];
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	3b02      	subs	r3, #2
 8000206:	f107 0208 	add.w	r2, r7, #8
 800020a:	6812      	ldr	r2, [r2, #0]
 800020c:	441a      	add	r2, r3
 800020e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000212:	7811      	ldrb	r1, [r2, #0]
 8000214:	f107 0214 	add.w	r2, r7, #20
 8000218:	54d1      	strb	r1, [r2, r3]
	for(iterator = 2; iterator < (dataLen+2); iterator++)
 800021a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800021e:	3301      	adds	r3, #1
 8000220:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000224:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3302      	adds	r3, #2
 800022e:	429a      	cmp	r2, r3
 8000230:	d3e6      	bcc.n	8000200 <HAL_EEPROM_Write_Nbytes+0x54>
	}

	MCAL_I2C_Trasmitt(I2C1, DataBuffer, (dataLen+2), EEPROM_SLAVE_ADDRESS, Start, With_Stop);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	1c9a      	adds	r2, r3, #2
 8000238:	f107 0114 	add.w	r1, r7, #20
 800023c:	2300      	movs	r3, #0
 800023e:	9301      	str	r3, [sp, #4]
 8000240:	2300      	movs	r3, #0
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	232a      	movs	r3, #42	; 0x2a
 8000246:	4804      	ldr	r0, [pc, #16]	; (8000258 <HAL_EEPROM_Write_Nbytes+0xac>)
 8000248:	f000 fb54 	bl	80008f4 <MCAL_I2C_Trasmitt>

	return 0;
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40005400 	.word	0x40005400

0800025c <HAL_EEPROM_Read_Nbytes>:


uint8_t HAL_EEPROM_Read_Nbytes(uint32_t memory_address, uint8_t *dataOut, uint32_t dataLen)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b088      	sub	sp, #32
 8000260:	af02      	add	r7, sp, #8
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
	uint8_t AddressBuffer[2] = {0};
 8000268:	2300      	movs	r3, #0
 800026a:	82bb      	strh	r3, [r7, #20]
	AddressBuffer[0] = (uint8_t)(memory_address >> 8);    	//upper byte memory address
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	0a1b      	lsrs	r3, r3, #8
 8000270:	b2db      	uxtb	r3, r3
 8000272:	753b      	strb	r3, [r7, #20]
	AddressBuffer[1] = (uint8_t)memory_address;				//lower byte memory address
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	b2db      	uxtb	r3, r3
 8000278:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Trasmitt(I2C1, AddressBuffer, 2, EEPROM_SLAVE_ADDRESS, Start, Without_Stop);	//write address
 800027a:	f107 0114 	add.w	r1, r7, #20
 800027e:	2301      	movs	r3, #1
 8000280:	9301      	str	r3, [sp, #4]
 8000282:	2300      	movs	r3, #0
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	232a      	movs	r3, #42	; 0x2a
 8000288:	2202      	movs	r2, #2
 800028a:	4809      	ldr	r0, [pc, #36]	; (80002b0 <HAL_EEPROM_Read_Nbytes+0x54>)
 800028c:	f000 fb32 	bl	80008f4 <MCAL_I2C_Trasmitt>

	MCAL_I2C_Receive(I2C1, dataOut, dataLen, EEPROM_SLAVE_ADDRESS, Repeated_satrt, With_Stop); //read data
 8000290:	2300      	movs	r3, #0
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	2301      	movs	r3, #1
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	232a      	movs	r3, #42	; 0x2a
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	68b9      	ldr	r1, [r7, #8]
 800029e:	4804      	ldr	r0, [pc, #16]	; (80002b0 <HAL_EEPROM_Read_Nbytes+0x54>)
 80002a0:	f000 fb92 	bl	80009c8 <MCAL_I2C_Receive>

	return 0;
 80002a4:	2300      	movs	r3, #0
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3718      	adds	r7, #24
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40005400 	.word	0x40005400

080002b4 <Get_Position>:

#include"STM32_GPIO.h"


uint8_t Get_Position(uint16_t PinNumber)
{	
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	80fb      	strh	r3, [r7, #6]

	volatile uint8_t Start_Position;

	switch(PinNumber)
 80002be:	88fb      	ldrh	r3, [r7, #6]
 80002c0:	2b10      	cmp	r3, #16
 80002c2:	d840      	bhi.n	8000346 <Get_Position+0x92>
 80002c4:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <Get_Position+0x18>)
 80002c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ca:	bf00      	nop
 80002cc:	08000311 	.word	0x08000311
 80002d0:	08000317 	.word	0x08000317
 80002d4:	0800031d 	.word	0x0800031d
 80002d8:	08000323 	.word	0x08000323
 80002dc:	08000329 	.word	0x08000329
 80002e0:	0800032f 	.word	0x0800032f
 80002e4:	08000335 	.word	0x08000335
 80002e8:	0800033b 	.word	0x0800033b
 80002ec:	08000311 	.word	0x08000311
 80002f0:	08000317 	.word	0x08000317
 80002f4:	0800031d 	.word	0x0800031d
 80002f8:	08000323 	.word	0x08000323
 80002fc:	08000329 	.word	0x08000329
 8000300:	0800032f 	.word	0x0800032f
 8000304:	08000335 	.word	0x08000335
 8000308:	0800033b 	.word	0x0800033b
 800030c:	08000341 	.word	0x08000341
	{	

	case GPIO_PIN_0:
	case GPIO_PIN_8:

		Start_Position = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	73fb      	strb	r3, [r7, #15]
		break;
 8000314:	e017      	b.n	8000346 <Get_Position+0x92>

	case GPIO_PIN_1:
	case GPIO_PIN_9:

		Start_Position = 4;
 8000316:	2304      	movs	r3, #4
 8000318:	73fb      	strb	r3, [r7, #15]
		break;
 800031a:	e014      	b.n	8000346 <Get_Position+0x92>

	case GPIO_PIN_2:
	case GPIO_PIN_10:

		Start_Position = 8;
 800031c:	2308      	movs	r3, #8
 800031e:	73fb      	strb	r3, [r7, #15]
		break;
 8000320:	e011      	b.n	8000346 <Get_Position+0x92>


	case GPIO_PIN_3:
	case GPIO_PIN_11:

		Start_Position = 12;
 8000322:	230c      	movs	r3, #12
 8000324:	73fb      	strb	r3, [r7, #15]
		break;
 8000326:	e00e      	b.n	8000346 <Get_Position+0x92>

	case GPIO_PIN_4:
	case GPIO_PIN_12:

		Start_Position = 16;
 8000328:	2310      	movs	r3, #16
 800032a:	73fb      	strb	r3, [r7, #15]
		break;
 800032c:	e00b      	b.n	8000346 <Get_Position+0x92>

	case GPIO_PIN_5:
	case GPIO_PIN_13:

		Start_Position = 20;
 800032e:	2314      	movs	r3, #20
 8000330:	73fb      	strb	r3, [r7, #15]
		break;
 8000332:	e008      	b.n	8000346 <Get_Position+0x92>

	case GPIO_PIN_6:
	case GPIO_PIN_14:

		Start_Position = 24;
 8000334:	2318      	movs	r3, #24
 8000336:	73fb      	strb	r3, [r7, #15]
		break;
 8000338:	e005      	b.n	8000346 <Get_Position+0x92>

	case GPIO_PIN_7:
	case GPIO_PIN_15:

		Start_Position = 28;
 800033a:	231c      	movs	r3, #28
 800033c:	73fb      	strb	r3, [r7, #15]
		break;
 800033e:	e002      	b.n	8000346 <Get_Position+0x92>

	case GPIO_PIN_All:
		Start_Position = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	73fb      	strb	r3, [r7, #15]
		break;
 8000344:	bf00      	nop

	}

	return  Start_Position;
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	b2db      	uxtb	r3, r3
}
 800034a:	4618      	mov	r0, r3
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <MCAL_GPIO_Init>:


=======================================*/

void MCAL_GPIO_Init(GPIO_TypeDef *GPIO_Instant, GPIO_PinConfig_t *PinConfig)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
	volatile uint32_t * GPIO_ConfigReg = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
	volatile uint8_t Start_Position    = Get_Position(PinConfig->GPIO_PinNumber);
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffa4 	bl	80002b4 <Get_Position>
 800036c:	4603      	mov	r3, r0
 800036e:	72fb      	strb	r3, [r7, #11]

	if(PinConfig->GPIO_PinNumber > GPIO_PIN_7)
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	2b07      	cmp	r3, #7
 8000376:	d903      	bls.n	8000380 <MCAL_GPIO_Init+0x2c>
	{
		GPIO_ConfigReg = (uint32_t *) &(GPIO_Instant->GPIOx_CRH);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3304      	adds	r3, #4
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	e005      	b.n	800038c <MCAL_GPIO_Init+0x38>
	}
	else if(PinConfig->GPIO_PinNumber < GPIO_PIN_8)
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	2b07      	cmp	r3, #7
 8000386:	d801      	bhi.n	800038c <MCAL_GPIO_Init+0x38>
	{
		GPIO_ConfigReg = (uint32_t *) &(GPIO_Instant->GPIOx_CRL);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	60fb      	str	r3, [r7, #12]


	//clear CNF and MODE at configuration register
	//configure MODE if PIN is input

	* GPIO_ConfigReg &= ~(0xF << Start_Position);
 800038c:	7afb      	ldrb	r3, [r7, #11]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	461a      	mov	r2, r3
 8000392:	230f      	movs	r3, #15
 8000394:	4093      	lsls	r3, r2
 8000396:	43da      	mvns	r2, r3
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	401a      	ands	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	601a      	str	r2, [r3, #0]



	//configure CNF if PIN is output or input
	switch(PinConfig->GPIO_PinMode)
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	789b      	ldrb	r3, [r3, #2]
 80003a6:	2b08      	cmp	r3, #8
 80003a8:	d864      	bhi.n	8000474 <MCAL_GPIO_Init+0x120>
 80003aa:	a201      	add	r2, pc, #4	; (adr r2, 80003b0 <MCAL_GPIO_Init+0x5c>)
 80003ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b0:	080003d5 	.word	0x080003d5
 80003b4:	080003eb 	.word	0x080003eb
 80003b8:	080003eb 	.word	0x080003eb
 80003bc:	080003d5 	.word	0x080003d5
 80003c0:	08000475 	.word	0x08000475
 80003c4:	08000435 	.word	0x08000435
 80003c8:	0800044b 	.word	0x0800044b
 80003cc:	080003d5 	.word	0x080003d5
 80003d0:	08000475 	.word	0x08000475
	{
	case GPIO_MODE_INPUT_FLOATING:
	case GPIO_MODE_AFIO_INPUT:
	case GPIO_MODE_OUTPUT_OPEN_DRAIN:

		SET_BIT(*GPIO_ConfigReg, (Start_Position+2));
 80003d4:	7afb      	ldrb	r3, [r7, #11]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	3302      	adds	r3, #2
 80003da:	2201      	movs	r2, #1
 80003dc:	409a      	lsls	r2, r3
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	431a      	orrs	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	601a      	str	r2, [r3, #0]
		break;
 80003e8:	e044      	b.n	8000474 <MCAL_GPIO_Init+0x120>

	case GPIO_MODE_INPUT_PULL_UP:
	case GPIO_MODE_INPUT_PULL_DOWN:

		SET_BIT(*GPIO_ConfigReg, (Start_Position+3));
 80003ea:	7afb      	ldrb	r3, [r7, #11]
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	3303      	adds	r3, #3
 80003f0:	2201      	movs	r2, #1
 80003f2:	409a      	lsls	r2, r3
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	431a      	orrs	r2, r3
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	601a      	str	r2, [r3, #0]

		//according to Table 20. Port bit configuration table p.161
		if(PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_PULL_UP)
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	789b      	ldrb	r3, [r3, #2]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d10a      	bne.n	800041c <MCAL_GPIO_Init+0xc8>
		{
			SET_BIT(GPIO_Instant->GPIOx_ODR, PinConfig->GPIO_PinNumber);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	68da      	ldr	r2, [r3, #12]
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	4619      	mov	r1, r3
 8000410:	2301      	movs	r3, #1
 8000412:	408b      	lsls	r3, r1
 8000414:	431a      	orrs	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	60da      	str	r2, [r3, #12]
		else
		{
			CLEAR_BIT(GPIO_Instant->GPIOx_ODR, PinConfig->GPIO_PinNumber);
		}

		break;
 800041a:	e02b      	b.n	8000474 <MCAL_GPIO_Init+0x120>
			CLEAR_BIT(GPIO_Instant->GPIOx_ODR, PinConfig->GPIO_PinNumber);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	68da      	ldr	r2, [r3, #12]
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	4619      	mov	r1, r3
 8000426:	2301      	movs	r3, #1
 8000428:	408b      	lsls	r3, r1
 800042a:	43db      	mvns	r3, r3
 800042c:	401a      	ands	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	60da      	str	r2, [r3, #12]
		break;
 8000432:	e01f      	b.n	8000474 <MCAL_GPIO_Init+0x120>
		//Already CNF Cleared
		break;

	case GPIO_MODE_AFIO_OUTPUT_PUSH_PULL:

		SET_BIT(*GPIO_ConfigReg, (Start_Position+3));
 8000434:	7afb      	ldrb	r3, [r7, #11]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	3303      	adds	r3, #3
 800043a:	2201      	movs	r2, #1
 800043c:	409a      	lsls	r2, r3
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	431a      	orrs	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	601a      	str	r2, [r3, #0]
		break;
 8000448:	e014      	b.n	8000474 <MCAL_GPIO_Init+0x120>

	case GPIO_MODE_AFIO_OUTPUT_OPEN_DRAIN:

		SET_BIT(*GPIO_ConfigReg, (Start_Position+2));
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	b2db      	uxtb	r3, r3
 800044e:	3302      	adds	r3, #2
 8000450:	2201      	movs	r2, #1
 8000452:	409a      	lsls	r2, r3
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	431a      	orrs	r2, r3
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	601a      	str	r2, [r3, #0]
		SET_BIT(*GPIO_ConfigReg, (Start_Position+3));
 800045e:	7afb      	ldrb	r3, [r7, #11]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	3303      	adds	r3, #3
 8000464:	2201      	movs	r2, #1
 8000466:	409a      	lsls	r2, r3
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	431a      	orrs	r2, r3
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	601a      	str	r2, [r3, #0]
		break;
 8000472:	bf00      	nop

	}


	//if pin is output
	if( (PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OPEN_DRAIN) || (PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PUSH_PULL) || (PinConfig->GPIO_PinMode == GPIO_MODE_AFIO_OUTPUT_PUSH_PULL) || (PinConfig->GPIO_PinMode == GPIO_MODE_AFIO_OUTPUT_OPEN_DRAIN) )
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	789b      	ldrb	r3, [r3, #2]
 8000478:	2b03      	cmp	r3, #3
 800047a:	d00b      	beq.n	8000494 <MCAL_GPIO_Init+0x140>
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	789b      	ldrb	r3, [r3, #2]
 8000480:	2b04      	cmp	r3, #4
 8000482:	d007      	beq.n	8000494 <MCAL_GPIO_Init+0x140>
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	789b      	ldrb	r3, [r3, #2]
 8000488:	2b05      	cmp	r3, #5
 800048a:	d003      	beq.n	8000494 <MCAL_GPIO_Init+0x140>
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	789b      	ldrb	r3, [r3, #2]
 8000490:	2b06      	cmp	r3, #6
 8000492:	d135      	bne.n	8000500 <MCAL_GPIO_Init+0x1ac>
	{
		//configure MODE if PIN is output
		switch(PinConfig->GPIO_PinSpeed)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	78db      	ldrb	r3, [r3, #3]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d010      	beq.n	80004be <MCAL_GPIO_Init+0x16a>
 800049c:	2b02      	cmp	r3, #2
 800049e:	d019      	beq.n	80004d4 <MCAL_GPIO_Init+0x180>
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d000      	beq.n	80004a6 <MCAL_GPIO_Init+0x152>
			break;
		}
	}


}
 80004a4:	e02c      	b.n	8000500 <MCAL_GPIO_Init+0x1ac>
			SET_BIT(*GPIO_ConfigReg, Start_Position);
 80004a6:	7afb      	ldrb	r3, [r7, #11]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	461a      	mov	r2, r3
 80004ac:	2301      	movs	r3, #1
 80004ae:	fa03 f202 	lsl.w	r2, r3, r2
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	431a      	orrs	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	601a      	str	r2, [r3, #0]
			break;
 80004bc:	e020      	b.n	8000500 <MCAL_GPIO_Init+0x1ac>
			SET_BIT(*GPIO_ConfigReg, (Start_Position+1));
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	3301      	adds	r3, #1
 80004c4:	2201      	movs	r2, #1
 80004c6:	409a      	lsls	r2, r3
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	431a      	orrs	r2, r3
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	601a      	str	r2, [r3, #0]
			break;
 80004d2:	e015      	b.n	8000500 <MCAL_GPIO_Init+0x1ac>
			SET_BIT(*GPIO_ConfigReg, Start_Position);
 80004d4:	7afb      	ldrb	r3, [r7, #11]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	461a      	mov	r2, r3
 80004da:	2301      	movs	r3, #1
 80004dc:	fa03 f202 	lsl.w	r2, r3, r2
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	431a      	orrs	r2, r3
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	601a      	str	r2, [r3, #0]
			SET_BIT(*GPIO_ConfigReg, (Start_Position+1));
 80004ea:	7afb      	ldrb	r3, [r7, #11]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	3301      	adds	r3, #1
 80004f0:	2201      	movs	r2, #1
 80004f2:	409a      	lsls	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	431a      	orrs	r2, r3
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	601a      	str	r2, [r3, #0]
			break;
 80004fe:	bf00      	nop
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <I2C_Generate_Start>:
			Generic APIs
===========================================
 */

void I2C_Generate_Start(I2C_TypeDef* I2C_Instant, StartStatus start)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
	if(start == Start)
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10d      	bne.n	8000536 <I2C_Generate_Start+0x2e>
	{
		while(READ_BIT(I2C_Instant->I2C_SR2, I2C_SR2_BUSY_Pos) != Reset_Flag);	// the bus is busy
 800051a:	bf00      	nop
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0302 	and.w	r3, r3, #2
 8000524:	2b00      	cmp	r3, #0
 8000526:	d1f9      	bne.n	800051c <I2C_Generate_Start+0x14>
		SET_BIT(I2C_Instant->I2C_CR1, I2C_CR1_START_Pos);				//Generate Start Condition after checking the Bus
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	601a      	str	r2, [r3, #0]
	else
	{
		SET_BIT(I2C_Instant->I2C_CR1, I2C_CR1_START_Pos);				//Generate Repeated Start without checking the Bus
	}

}
 8000534:	e005      	b.n	8000542 <I2C_Generate_Start+0x3a>
		SET_BIT(I2C_Instant->I2C_CR1, I2C_CR1_START_Pos);				//Generate Repeated Start without checking the Bus
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	601a      	str	r2, [r3, #0]
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <I2C_SendAddress>:
}
 */


void I2C_SendAddress(I2C_TypeDef* I2C_Instant, uint16_t address, I2C_Direction dir)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	807b      	strh	r3, [r7, #2]
 8000558:	4613      	mov	r3, r2
 800055a:	707b      	strb	r3, [r7, #1]
	//supported only 7 bit addressing mode
	address = address << 1;
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	807b      	strh	r3, [r7, #2]

	address |= dir;
 8000562:	787b      	ldrb	r3, [r7, #1]
 8000564:	b29a      	uxth	r2, r3
 8000566:	887b      	ldrh	r3, [r7, #2]
 8000568:	4313      	orrs	r3, r2
 800056a:	807b      	strh	r3, [r7, #2]

	I2C_Instant->I2C_DR = address;
 800056c:	887a      	ldrh	r2, [r7, #2]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	611a      	str	r2, [r3, #16]


}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <I2C_Generate_Stop_Condition>:


void I2C_Generate_Stop_Condition(I2C_TypeDef* I2C_Instant)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	//Generate Stop Condition
	SET_BIT(I2C_Instant->I2C_CR1, I2C_CR1_STOP_Pos);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <I2C_AcknowledgeConfig>:

void I2C_AcknowledgeConfig(I2C_TypeDef * I2C_Instant, Function_State FNstate)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	460b      	mov	r3, r1
 80005a4:	70fb      	strb	r3, [r7, #3]
	if(FNstate == Enable)
 80005a6:	78fb      	ldrb	r3, [r7, #3]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d106      	bne.n	80005ba <I2C_AcknowledgeConfig+0x20>
	{
		//Enable ACK
		SET_BIT(I2C_Instant->I2C_CR1, I2C_CR1_ACK_Pos);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]
	else
	{
		//Disable ACK
		CLEAR_BIT(I2C_Instant->I2C_CR1, I2C_CR1_ACK_Pos);
	}
}
 80005b8:	e005      	b.n	80005c6 <I2C_AcknowledgeConfig+0x2c>
		CLEAR_BIT(I2C_Instant->I2C_CR1, I2C_CR1_ACK_Pos);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <MCAL_I2C_Init>:
• 2 MHz in Sm mode
• 4 MHz in Fm mode
 */

void MCAL_I2C_Init(I2C_TypeDef * I2C_Instant, I2C_Config * I2C_CFG)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	uint16_t TempReg = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	82fb      	strh	r3, [r7, #22]
	uint32_t PCLK1 = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
	uint8_t Freq = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
	uint16_t CCR = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	82bb      	strh	r3, [r7, #20]

	if(I2C_Instant == I2C1)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a91      	ldr	r2, [pc, #580]	; (8000834 <MCAL_I2C_Init+0x264>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d106      	bne.n	8000600 <MCAL_I2C_Init+0x30>
	{
		Global_I2C_Config[I2C1_INDEX] = * I2C_CFG;
 80005f2:	4a91      	ldr	r2, [pc, #580]	; (8000838 <MCAL_I2C_Init+0x268>)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	4614      	mov	r4, r2
 80005f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005fe:	e007      	b.n	8000610 <MCAL_I2C_Init+0x40>
	}
	else
	{
		Global_I2C_Config[I2C2_INDEX] = * I2C_CFG;
 8000600:	4b8d      	ldr	r3, [pc, #564]	; (8000838 <MCAL_I2C_Init+0x268>)
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	f103 0410 	add.w	r4, r3, #16
 8000608:	4613      	mov	r3, r2
 800060a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}


	//------------------------------------------------
	//I2C_Mode
	if(I2C_CFG->I2C_Mode == I2C_Mode_I2C)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	2b00      	cmp	r3, #0
 8000616:	f040 80cb 	bne.w	80007b0 <MCAL_I2C_Init+0x1e0>
	{

		//Bit 1 SMBUS: SMBus mode
		//0: I2C mode
		//1: SMBus mode
		CLEAR_BIT(I2C_Instant->I2C_CR1, I2C_CR1_SMBUS_Pos); // to select SM
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f023 0202 	bic.w	r2, r3, #2
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]

		/* Program the peripheral input clock in I2C_CR2 Register in order to generate correct
		timings*/
		PCLK1 = MCAL_RCC_GetPCLK1_Freq(); // Frequency of APB1 Bus
 8000626:	f000 fa67 	bl	8000af8 <MCAL_RCC_GetPCLK1_Freq>
 800062a:	6138      	str	r0, [r7, #16]

		Freq = (uint8_t)(PCLK1/(uint32_t)1000000);
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	4a83      	ldr	r2, [pc, #524]	; (800083c <MCAL_I2C_Init+0x26c>)
 8000630:	fba2 2303 	umull	r2, r3, r2, r3
 8000634:	0c9b      	lsrs	r3, r3, #18
 8000636:	73fb      	strb	r3, [r7, #15]

		TempReg |= Freq;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	b29a      	uxth	r2, r3
 800063c:	8afb      	ldrh	r3, [r7, #22]
 800063e:	4313      	orrs	r3, r2
 8000640:	82fb      	strh	r3, [r7, #22]

		I2C_Instant->I2C_CR2 = TempReg;
 8000642:	8afa      	ldrh	r2, [r7, #22]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	605a      	str	r2, [r3, #4]

		//------------------------------------------------
		//Configure the clock control registers
		TempReg = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	82fb      	strh	r3, [r7, #22]


		//I2C Operates in Standard Mode (SM) >>> [This Device Driver Not Supported Fast Mode (FM)]
		CLEAR_BIT(TempReg, 15);
 800064c:	8afb      	ldrh	r3, [r7, #22]
 800064e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000652:	82fb      	strh	r3, [r7, #22]

		//Configure CCR which Controls the SCL clock in master mode

		CLEAR_BIT(I2C_Instant->I2C_CR1, I2C_CR1_PE_Pos); //Disable I2C Peripheral before Configure It's Clock
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f023 0201 	bic.w	r2, r3, #1
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	601a      	str	r2, [r3, #0]

		switch(I2C_CFG->I2C_CLK_Speed)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b09      	cmp	r3, #9
 8000666:	d860      	bhi.n	800072a <MCAL_I2C_Init+0x15a>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <MCAL_I2C_Init+0xa0>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000699 	.word	0x08000699
 8000674:	080006a7 	.word	0x080006a7
 8000678:	080006b5 	.word	0x080006b5
 800067c:	080006c3 	.word	0x080006c3
 8000680:	080006d1 	.word	0x080006d1
 8000684:	080006e1 	.word	0x080006e1
 8000688:	080006ef 	.word	0x080006ef
 800068c:	080006fd 	.word	0x080006fd
 8000690:	0800070b 	.word	0x0800070b
 8000694:	0800071b 	.word	0x0800071b
		{
		case I2C_CLK_Speed_SM_10KHz:
			CCR = PCLK1/(2*10000);
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	4a69      	ldr	r2, [pc, #420]	; (8000840 <MCAL_I2C_Init+0x270>)
 800069c:	fba2 2303 	umull	r2, r3, r2, r3
 80006a0:	0b9b      	lsrs	r3, r3, #14
 80006a2:	82bb      	strh	r3, [r7, #20]
			break;
 80006a4:	e041      	b.n	800072a <MCAL_I2C_Init+0x15a>

		case I2C_CLK_Speed_SM_20KHz:
			CCR = PCLK1/(2*20000);
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	4a65      	ldr	r2, [pc, #404]	; (8000840 <MCAL_I2C_Init+0x270>)
 80006aa:	fba2 2303 	umull	r2, r3, r2, r3
 80006ae:	0bdb      	lsrs	r3, r3, #15
 80006b0:	82bb      	strh	r3, [r7, #20]
			break;
 80006b2:	e03a      	b.n	800072a <MCAL_I2C_Init+0x15a>

		case I2C_CLK_Speed_SM_30KHz:
			CCR = PCLK1/(2*30000);
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4a63      	ldr	r2, [pc, #396]	; (8000844 <MCAL_I2C_Init+0x274>)
 80006b8:	fba2 2303 	umull	r2, r3, r2, r3
 80006bc:	0b9b      	lsrs	r3, r3, #14
 80006be:	82bb      	strh	r3, [r7, #20]
			break;
 80006c0:	e033      	b.n	800072a <MCAL_I2C_Init+0x15a>

		case I2C_CLK_Speed_SM_40KHz:
			CCR = PCLK1/(2*40000);
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	4a5e      	ldr	r2, [pc, #376]	; (8000840 <MCAL_I2C_Init+0x270>)
 80006c6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ca:	0c1b      	lsrs	r3, r3, #16
 80006cc:	82bb      	strh	r3, [r7, #20]
			break;
 80006ce:	e02c      	b.n	800072a <MCAL_I2C_Init+0x15a>

		case I2C_CLK_Speed_SM_50KHz:
			CCR = PCLK1/(2*50000);
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	095b      	lsrs	r3, r3, #5
 80006d4:	4a5c      	ldr	r2, [pc, #368]	; (8000848 <MCAL_I2C_Init+0x278>)
 80006d6:	fba2 2303 	umull	r2, r3, r2, r3
 80006da:	09db      	lsrs	r3, r3, #7
 80006dc:	82bb      	strh	r3, [r7, #20]
			break;
 80006de:	e024      	b.n	800072a <MCAL_I2C_Init+0x15a>

		case I2C_CLK_Speed_SM_60KHz:
			CCR = PCLK1/(2*60000);
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	4a58      	ldr	r2, [pc, #352]	; (8000844 <MCAL_I2C_Init+0x274>)
 80006e4:	fba2 2303 	umull	r2, r3, r2, r3
 80006e8:	0bdb      	lsrs	r3, r3, #15
 80006ea:	82bb      	strh	r3, [r7, #20]
			break;
 80006ec:	e01d      	b.n	800072a <MCAL_I2C_Init+0x15a>

		case I2C_CLK_Speed_SM_70KHz:
			CCR = PCLK1/(2*70000);
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	4a56      	ldr	r2, [pc, #344]	; (800084c <MCAL_I2C_Init+0x27c>)
 80006f2:	fba2 2303 	umull	r2, r3, r2, r3
 80006f6:	0b9b      	lsrs	r3, r3, #14
 80006f8:	82bb      	strh	r3, [r7, #20]
			break;
 80006fa:	e016      	b.n	800072a <MCAL_I2C_Init+0x15a>

		case I2C_CLK_Speed_SM_80KHz:
			CCR = PCLK1/(2*80000);
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	4a50      	ldr	r2, [pc, #320]	; (8000840 <MCAL_I2C_Init+0x270>)
 8000700:	fba2 2303 	umull	r2, r3, r2, r3
 8000704:	0c5b      	lsrs	r3, r3, #17
 8000706:	82bb      	strh	r3, [r7, #20]
			break;
 8000708:	e00f      	b.n	800072a <MCAL_I2C_Init+0x15a>

		case I2C_CLK_Speed_SM_90KHz:
			CCR = PCLK1/(2*90000);
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	095b      	lsrs	r3, r3, #5
 800070e:	4a50      	ldr	r2, [pc, #320]	; (8000850 <MCAL_I2C_Init+0x280>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	09db      	lsrs	r3, r3, #7
 8000716:	82bb      	strh	r3, [r7, #20]
			break;
 8000718:	e007      	b.n	800072a <MCAL_I2C_Init+0x15a>

		case I2C_CLK_Speed_SM_100KHz:
			CCR = PCLK1/(2*100000);
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	099b      	lsrs	r3, r3, #6
 800071e:	4a4d      	ldr	r2, [pc, #308]	; (8000854 <MCAL_I2C_Init+0x284>)
 8000720:	fba2 2303 	umull	r2, r3, r2, r3
 8000724:	099b      	lsrs	r3, r3, #6
 8000726:	82bb      	strh	r3, [r7, #20]
			break;
 8000728:	bf00      	nop

		}

		CCR &= ~(0xF<<12);
 800072a:	8abb      	ldrh	r3, [r7, #20]
 800072c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000730:	82bb      	strh	r3, [r7, #20]

		TempReg |= CCR;
 8000732:	8afa      	ldrh	r2, [r7, #22]
 8000734:	8abb      	ldrh	r3, [r7, #20]
 8000736:	4313      	orrs	r3, r2
 8000738:	82fb      	strh	r3, [r7, #22]

		I2C_Instant->I2C_CCR = TempReg;
 800073a:	8afa      	ldrh	r2, [r7, #22]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	61da      	str	r2, [r3, #28]

		//------------------------------------------------
		//Configure the rise time register

		I2C_Instant->I2C_TRISE = Freq + 1;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	3301      	adds	r3, #1
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	621a      	str	r2, [r3, #32]


		//------------------------------------------------
		//Configure Clock Stretching (Slave Mode)
		TempReg = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	82fb      	strh	r3, [r7, #22]

		if(I2C_CFG->I2C_CLK_Strerch == I2C_CLK_Strerch_EN)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	785b      	ldrb	r3, [r3, #1]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d104      	bne.n	8000760 <MCAL_I2C_Init+0x190>
		{
			CLEAR_BIT(TempReg, 7);
 8000756:	8afb      	ldrh	r3, [r7, #22]
 8000758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800075c:	82fb      	strh	r3, [r7, #22]
 800075e:	e003      	b.n	8000768 <MCAL_I2C_Init+0x198>
		}
		else
		{
			SET_BIT(TempReg, 7);
 8000760:	8afb      	ldrh	r3, [r7, #22]
 8000762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000766:	82fb      	strh	r3, [r7, #22]
		}

		//------------------------------------------------
		//ACK Control
		SET_BIT(TempReg, I2C_CR1_ACK_Pos);
 8000768:	8afb      	ldrh	r3, [r7, #22]
 800076a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800076e:	82fb      	strh	r3, [r7, #22]

		I2C_Instant->I2C_CR1 = TempReg;
 8000770:	8afa      	ldrh	r2, [r7, #22]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	601a      	str	r2, [r3, #0]

		//------------------------------------------------
		//if the Device operates as a slave
		TempReg = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	82fb      	strh	r3, [r7, #22]

		if(I2C_CFG->I2C_Slave_Addressing_Mode.Enable_Dual_Address == I2C_Addressing_Mode_Dual_EN)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d005      	beq.n	800078e <MCAL_I2C_Init+0x1be>
		{
			//[Dual Addressing Mode Not Supported for Now]
		}
		else
		{
			CLEAR_BIT(I2C_Instant->I2C_OAR2, 0);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	f023 0201 	bic.w	r2, r3, #1
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60da      	str	r2, [r3, #12]
		}


		TempReg = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	82fb      	strh	r3, [r7, #22]

		if(I2C_CFG->I2C_Slave_Addressing_Mode.Addressing_Mode == I2C_Slave_Addressing_Mode_7bit)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	7a5b      	ldrb	r3, [r3, #9]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d107      	bne.n	80007aa <MCAL_I2C_Init+0x1da>
		{
			TempReg = I2C_CFG->I2C_Slave_Addressing_Mode.Primary_Address   << 1;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	88db      	ldrh	r3, [r3, #6]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	82fb      	strh	r3, [r7, #22]

			CLEAR_BIT(TempReg, 15); //  7-bit slave address (10-bit address not acknowledged)
 80007a2:	8afb      	ldrh	r3, [r7, #22]
 80007a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007a8:	82fb      	strh	r3, [r7, #22]
		else
		{
			//[10 bit addressing mode not supported]
		}

		I2C_Instant->I2C_OAR1 = TempReg;
 80007aa:	8afa      	ldrh	r2, [r7, #22]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	609a      	str	r2, [r3, #8]

	//------------------------------------------------
	//Master  >>> Polling Mechanism
	//Slave   >>> Interrupt Mechanism
	//Interrupt Enable (Slave Mode)
	if(I2C_CFG->P_Slave_Event_CallBack != NULL) //if CallBack Function != NULL ,then the I2C is salve
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d032      	beq.n	800081e <MCAL_I2C_Init+0x24e>
	{
		SET_BIT(I2C_Instant->I2C_CR2, 8);	//Enable  Error interrupt Mask
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	605a      	str	r2, [r3, #4]
		SET_BIT(I2C_Instant->I2C_CR2, 9);	//Enable Event interrupt Mask
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	605a      	str	r2, [r3, #4]
		SET_BIT(I2C_Instant->I2C_CR2, 10);	//Enable Buffer interrupt Mask
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	605a      	str	r2, [r3, #4]

		if(I2C_Instant == I2C1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MCAL_I2C_Init+0x264>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d10c      	bne.n	80007fe <MCAL_I2C_Init+0x22e>
		{
			NVIC_Enable_I2C1_EV_IRQ31;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MCAL_I2C_Init+0x288>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MCAL_I2C_Init+0x288>)
 80007ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ee:	6013      	str	r3, [r2, #0]
			NVIC_Enable_I2C1_ER_IRQ32;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MCAL_I2C_Init+0x28c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <MCAL_I2C_Init+0x28c>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e00f      	b.n	800081e <MCAL_I2C_Init+0x24e>
		}
		else if(I2C_Instant == I2C2)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <MCAL_I2C_Init+0x290>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d10b      	bne.n	800081e <MCAL_I2C_Init+0x24e>
		{
			NVIC_Enable_I2C2_EV_IRQ33;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MCAL_I2C_Init+0x28c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <MCAL_I2C_Init+0x28c>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6013      	str	r3, [r2, #0]
			NVIC_Enable_I2C2_ER_IRQ34;
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <MCAL_I2C_Init+0x28c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <MCAL_I2C_Init+0x28c>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6013      	str	r3, [r2, #0]
		}

	}

	//Enable I2C Peripheral
	SET_BIT(I2C_Instant->I2C_CR1, 0);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f043 0201 	orr.w	r2, r3, #1
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	601a      	str	r2, [r3, #0]

}
 800082a:	bf00      	nop
 800082c:	371c      	adds	r7, #28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd90      	pop	{r4, r7, pc}
 8000832:	bf00      	nop
 8000834:	40005400 	.word	0x40005400
 8000838:	2000002c 	.word	0x2000002c
 800083c:	431bde83 	.word	0x431bde83
 8000840:	d1b71759 	.word	0xd1b71759
 8000844:	45e7b273 	.word	0x45e7b273
 8000848:	0a7c5ac5 	.word	0x0a7c5ac5
 800084c:	1df5959f 	.word	0x1df5959f
 8000850:	05d34edf 	.word	0x05d34edf
 8000854:	053e2d63 	.word	0x053e2d63
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000e104 	.word	0xe000e104
 8000860:	40005800 	.word	0x40005800

08000864 <MCAL_I2C_GPIO_SetPin>:
	}
}


void MCAL_I2C_GPIO_SetPin(I2C_TypeDef * I2C_Instant)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	//I2C1_SMBAl >>> PB.5

	GPIO_PinConfig_t I2C_Pin;

	if(I2C_Instant == I2C1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <MCAL_I2C_GPIO_SetPin+0x84>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d118      	bne.n	80008a6 <MCAL_I2C_GPIO_SetPin+0x42>
	{
		//I2C1_SCL   >>> PB.6
		I2C_Pin.GPIO_PinNumber = 6;
 8000874:	2306      	movs	r3, #6
 8000876:	81bb      	strh	r3, [r7, #12]
		I2C_Pin.GPIO_PinMode   = GPIO_MODE_AFIO_OUTPUT_OPEN_DRAIN;
 8000878:	2306      	movs	r3, #6
 800087a:	73bb      	strb	r3, [r7, #14]
		I2C_Pin.GPIO_PinSpeed  = GPIO_OUTPUT_SPEED_10MHz;
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]

		MCAL_GPIO_Init(GPIOB, &I2C_Pin);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4819      	ldr	r0, [pc, #100]	; (80008ec <MCAL_I2C_GPIO_SetPin+0x88>)
 8000888:	f7ff fd64 	bl	8000354 <MCAL_GPIO_Init>

		//I2C1_SDA   >>> PB.7
		I2C_Pin.GPIO_PinNumber = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	81bb      	strh	r3, [r7, #12]
		I2C_Pin.GPIO_PinMode   = GPIO_MODE_AFIO_OUTPUT_OPEN_DRAIN;
 8000890:	2306      	movs	r3, #6
 8000892:	73bb      	strb	r3, [r7, #14]
		I2C_Pin.GPIO_PinSpeed  = GPIO_OUTPUT_SPEED_10MHz;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]

		MCAL_GPIO_Init(GPIOB, &I2C_Pin);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <MCAL_I2C_GPIO_SetPin+0x88>)
 80008a0:	f7ff fd58 	bl	8000354 <MCAL_GPIO_Init>
	}


	//2C2_SMBAl >>> PB.12

}
 80008a4:	e01b      	b.n	80008de <MCAL_I2C_GPIO_SetPin+0x7a>
	else if(I2C_Instant == I2C2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <MCAL_I2C_GPIO_SetPin+0x8c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d117      	bne.n	80008de <MCAL_I2C_GPIO_SetPin+0x7a>
		I2C_Pin.GPIO_PinNumber = 10;
 80008ae:	230a      	movs	r3, #10
 80008b0:	81bb      	strh	r3, [r7, #12]
		I2C_Pin.GPIO_PinMode   = GPIO_MODE_AFIO_OUTPUT_OPEN_DRAIN;
 80008b2:	2306      	movs	r3, #6
 80008b4:	73bb      	strb	r3, [r7, #14]
		I2C_Pin.GPIO_PinSpeed  = GPIO_OUTPUT_SPEED_10MHz;
 80008b6:	2300      	movs	r3, #0
 80008b8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_Pin);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <MCAL_I2C_GPIO_SetPin+0x88>)
 80008c2:	f7ff fd47 	bl	8000354 <MCAL_GPIO_Init>
		I2C_Pin.GPIO_PinNumber = 11;
 80008c6:	230b      	movs	r3, #11
 80008c8:	81bb      	strh	r3, [r7, #12]
		I2C_Pin.GPIO_PinMode   = GPIO_MODE_AFIO_OUTPUT_OPEN_DRAIN;
 80008ca:	2306      	movs	r3, #6
 80008cc:	73bb      	strb	r3, [r7, #14]
		I2C_Pin.GPIO_PinSpeed  = GPIO_OUTPUT_SPEED_10MHz;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_Pin);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MCAL_I2C_GPIO_SetPin+0x88>)
 80008da:	f7ff fd3b 	bl	8000354 <MCAL_GPIO_Init>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40005400 	.word	0x40005400
 80008ec:	40010c00 	.word	0x40010c00
 80008f0:	40005800 	.word	0x40005800

080008f4 <MCAL_I2C_Trasmitt>:


void MCAL_I2C_Trasmitt(I2C_TypeDef *I2C_Instant, uint8_t *dataOut, uint32_t dataLen, uint16_t devadd, StartStatus start_bit, StopCondition_State stop_state)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	807b      	strh	r3, [r7, #2]
	uint32_t iterator = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]

	//1. set the start bit
	I2C_Generate_Start(I2C_Instant, start_bit);
 8000906:	f897 3020 	ldrb.w	r3, [r7, #32]
 800090a:	4619      	mov	r1, r3
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f7ff fdfb 	bl	8000508 <I2C_Generate_Start>

	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	//2. wait till SB = 1
	while(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_SB_Pos) != Set_Flag); //EV5
 8000912:	bf00      	nop
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d1f9      	bne.n	8000914 <MCAL_I2C_Trasmitt+0x20>

	//3. write DR with address
	I2C_SendAddress(I2C_Instant, devadd, I2C_Transmit);
 8000920:	887b      	ldrh	r3, [r7, #2]
 8000922:	2200      	movs	r2, #0
 8000924:	4619      	mov	r1, r3
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f7ff fe10 	bl	800054c <I2C_SendAddress>

	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	//4. wait till ADDR = 1
	while(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_ADDR_Pos) != Set_Flag);
 800092c:	bf00      	nop
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	085b      	lsrs	r3, r3, #1
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b01      	cmp	r3, #1
 800093a:	d1f8      	bne.n	800092e <MCAL_I2C_Trasmitt+0x3a>
	dummy_read = I2C_Instant->I2C_SR2;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <MCAL_I2C_Trasmitt+0xd0>)
 8000944:	801a      	strh	r2, [r3, #0]

	//EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR
	while(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_TXE_Pos) != Set_Flag);
 8000946:	bf00      	nop
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	09db      	lsrs	r3, r3, #7
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	2b01      	cmp	r3, #1
 8000954:	d1f8      	bne.n	8000948 <MCAL_I2C_Trasmitt+0x54>

	//6. write data on data register
	for(iterator = 0; iterator < dataLen; iterator++)
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	e011      	b.n	8000980 <MCAL_I2C_Trasmitt+0x8c>
	{
		I2C_Instant->I2C_DR = dataOut[iterator];
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4413      	add	r3, r2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	611a      	str	r2, [r3, #16]

		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_TXE_Pos) != Set_Flag);
 800096a:	bf00      	nop
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	09db      	lsrs	r3, r3, #7
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	2b01      	cmp	r3, #1
 8000978:	d1f8      	bne.n	800096c <MCAL_I2C_Trasmitt+0x78>
	for(iterator = 0; iterator < dataLen; iterator++)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	d3e9      	bcc.n	800095c <MCAL_I2C_Trasmitt+0x68>
	}

	//EV8_2: TxE=1, BTF(Byte transfer finished) = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	while( (READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_TXE_Pos) && READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_BTF_Pos)) != Set_Flag);
 8000988:	bf00      	nop
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000992:	2b00      	cmp	r3, #0
 8000994:	d007      	beq.n	80009a6 <MCAL_I2C_Trasmitt+0xb2>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MCAL_I2C_Trasmitt+0xb2>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <MCAL_I2C_Trasmitt+0xb4>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d1ee      	bne.n	800098a <MCAL_I2C_Trasmitt+0x96>

	//Generate Stop Condition
	if(stop_state == With_Stop)
 80009ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <MCAL_I2C_Trasmitt+0xc6>
	{
		I2C_Generate_Stop_Condition(I2C_Instant);
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fde1 	bl	800057c <I2C_Generate_Stop_Condition>
	}



}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000028 	.word	0x20000028

080009c8 <MCAL_I2C_Receive>:


void MCAL_I2C_Receive(I2C_TypeDef *I2C_Instant, uint8_t *dataIn, uint32_t dataLen, uint16_t devadd, StartStatus start_bit, StopCondition_State stop_state)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	807b      	strh	r3, [r7, #2]
	uint32_t iterator = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]

	//1. set the start bit
	I2C_Generate_Start(I2C_Instant, start_bit);
 80009da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009de:	4619      	mov	r1, r3
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f7ff fd91 	bl	8000508 <I2C_Generate_Start>

	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	//2. wait till SB = 1
	while(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_SB_Pos) != Set_Flag); //EV5
 80009e6:	bf00      	nop
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d1f9      	bne.n	80009e8 <MCAL_I2C_Receive+0x20>

	//3. write DR with address
	I2C_SendAddress(I2C_Instant, devadd, I2C_Receive);
 80009f4:	887b      	ldrh	r3, [r7, #2]
 80009f6:	2201      	movs	r2, #1
 80009f8:	4619      	mov	r1, r3
 80009fa:	68f8      	ldr	r0, [r7, #12]
 80009fc:	f7ff fda6 	bl	800054c <I2C_SendAddress>

	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	//4. wait till ADDR = 1
	while(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_ADDR_Pos) != Set_Flag);
 8000a00:	bf00      	nop
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	085b      	lsrs	r3, r3, #1
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d1f8      	bne.n	8000a02 <MCAL_I2C_Receive+0x3a>
	dummy_read = I2C_Instant->I2C_SR2;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MCAL_I2C_Receive+0xb8>)
 8000a18:	801a      	strh	r2, [r3, #0]

	//to make sure that the ACK is Enabled before receiving data
	I2C_AcknowledgeConfig(I2C_Instant, Enable);
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f7ff fdbc 	bl	800059a <I2C_AcknowledgeConfig>

	if(dataLen != 0)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01b      	beq.n	8000a60 <MCAL_I2C_Receive+0x98>
	{
		//reading data
		for(iterator = dataLen; iterator > 1; iterator--) //LIFO Mechanism
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e011      	b.n	8000a52 <MCAL_I2C_Receive+0x8a>
		{
			//wait until data register being empty
			while(READ_BIT(I2C_Instant->I2C_SR1, I2C_SR1_RXNE_Pos) != Set_Flag);
 8000a2e:	bf00      	nop
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	099b      	lsrs	r3, r3, #6
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d1f8      	bne.n	8000a30 <MCAL_I2C_Receive+0x68>

			dataIn[iterator] = I2C_Instant->I2C_DR;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	6919      	ldr	r1, [r3, #16]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	4413      	add	r3, r2
 8000a48:	b2ca      	uxtb	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
		for(iterator = dataLen; iterator > 1; iterator--) //LIFO Mechanism
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d8ea      	bhi.n	8000a2e <MCAL_I2C_Receive+0x66>
		}

		//Send NACK
		I2C_AcknowledgeConfig(I2C_Instant, Disable);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f7ff fd9d 	bl	800059a <I2C_AcknowledgeConfig>

	}

	//Generate Stop Condition
	if(stop_state == With_Stop)
 8000a60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <MCAL_I2C_Receive+0xa6>
	{
		I2C_Generate_Stop_Condition(I2C_Instant);
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f7ff fd87 	bl	800057c <I2C_Generate_Stop_Condition>
	}



	//reEnable ACKing
	I2C_AcknowledgeConfig(I2C_Instant, Enable);
 8000a6e:	2101      	movs	r1, #1
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fd92 	bl	800059a <I2C_AcknowledgeConfig>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000028 	.word	0x20000028

08000a84 <MCAL_RCC_GetSYSCLK_Freq>:
const uint8_t APB1_Prescaler [] = {0, 0, 0, 0, 1, 2, 3, 4};
const uint8_t APB2_Prescaler [] = {0, 0, 0, 0, 1, 2, 3, 4};
const uint8_t AHB_Prescaler  [] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

uint32_t MCAL_RCC_GetSYSCLK_Freq(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
	uint32_t SYS_CLK = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]

	//consider that
	switch((RCC->RCC_CFGR >> 2) & 0b11)
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MCAL_RCC_GetSYSCLK_Freq+0x40>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d007      	beq.n	8000aac <MCAL_RCC_GetSYSCLK_Freq+0x28>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d302      	bcc.n	8000aa6 <MCAL_RCC_GetSYSCLK_Freq+0x22>
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d006      	beq.n	8000ab2 <MCAL_RCC_GetSYSCLK_Freq+0x2e>
 8000aa4:	e008      	b.n	8000ab8 <MCAL_RCC_GetSYSCLK_Freq+0x34>
	{
	case 0:
		SYS_CLK = HSI_RC_CLK;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MCAL_RCC_GetSYSCLK_Freq+0x44>)
 8000aa8:	607b      	str	r3, [r7, #4]
		break;
 8000aaa:	e005      	b.n	8000ab8 <MCAL_RCC_GetSYSCLK_Freq+0x34>

	case 1:
		SYS_CLK = HSE_RC_CLK;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MCAL_RCC_GetSYSCLK_Freq+0x48>)
 8000aae:	607b      	str	r3, [r7, #4]
		break;
 8000ab0:	e002      	b.n	8000ab8 <MCAL_RCC_GetSYSCLK_Freq+0x34>

	case 2:
		SYS_CLK = PLL_RC_CLK;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MCAL_RCC_GetSYSCLK_Freq+0x48>)
 8000ab4:	607b      	str	r3, [r7, #4]
		break;
 8000ab6:	bf00      	nop
	}

	return SYS_CLK;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	007a1200 	.word	0x007a1200
 8000acc:	00f42400 	.word	0x00f42400

08000ad0 <MCAL_RCC_GetHCLK_Freq>:


uint32_t MCAL_RCC_GetHCLK_Freq(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYSCLK_Freq() >> AHB_Prescaler[(RCC->RCC_CFGR >> 4) & 0xF]);
 8000ad4:	f7ff ffd6 	bl	8000a84 <MCAL_RCC_GetSYSCLK_Freq>
 8000ad8:	4601      	mov	r1, r0
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <MCAL_RCC_GetHCLK_Freq+0x20>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	091b      	lsrs	r3, r3, #4
 8000ae0:	f003 030f 	and.w	r3, r3, #15
 8000ae4:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <MCAL_RCC_GetHCLK_Freq+0x24>)
 8000ae6:	5cd3      	ldrb	r3, [r2, r3]
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	08000fd8 	.word	0x08000fd8

08000af8 <MCAL_RCC_GetPCLK1_Freq>:
	return (MCAL_RCC_GetHCLK_Freq() >> APB2_Prescaler[(RCC->RCC_CFGR >> 11) & 0b111]);
}


uint32_t MCAL_RCC_GetPCLK1_Freq(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK_Freq() >> APB1_Prescaler[(RCC->RCC_CFGR >> 8) & 0b111]);
 8000afc:	f7ff ffe8 	bl	8000ad0 <MCAL_RCC_GetHCLK_Freq>
 8000b00:	4601      	mov	r1, r0
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <MCAL_RCC_GetPCLK1_Freq+0x20>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <MCAL_RCC_GetPCLK1_Freq+0x24>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	08000fd0 	.word	0x08000fd0

08000b20 <SPI1_IRQHandler>:
===========================================
 */


void SPI1_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;

	irq_src.TXE   = READ_BIT((SPI1->SPI_SR), 1);
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <SPI1_IRQHandler+0x54>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	793b      	ldrb	r3, [r7, #4]
 8000b34:	f362 0300 	bfi	r3, r2, #0, #1
 8000b38:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = READ_BIT((SPI1->SPI_SR), 0);
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <SPI1_IRQHandler+0x54>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	793b      	ldrb	r3, [r7, #4]
 8000b46:	f362 0341 	bfi	r3, r2, #1, #1
 8000b4a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = READ_BIT((SPI1->SPI_SR), 4);
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <SPI1_IRQHandler+0x54>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	793b      	ldrb	r3, [r7, #4]
 8000b5a:	f362 0382 	bfi	r3, r2, #2, #1
 8000b5e:	713b      	strb	r3, [r7, #4]



	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SPI1_IRQHandler+0x58>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	7938      	ldrb	r0, [r7, #4]
 8000b68:	4798      	blx	r3
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40013000 	.word	0x40013000
 8000b78:	2000005c 	.word	0x2000005c

08000b7c <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;

	irq_src.TXE   = READ_BIT((SPI1->SPI_SR), 1);
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <SPI2_IRQHandler+0x54>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	085b      	lsrs	r3, r3, #1
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	793b      	ldrb	r3, [r7, #4]
 8000b90:	f362 0300 	bfi	r3, r2, #0, #1
 8000b94:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = READ_BIT((SPI1->SPI_SR), 0);
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <SPI2_IRQHandler+0x54>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	793b      	ldrb	r3, [r7, #4]
 8000ba2:	f362 0341 	bfi	r3, r2, #1, #1
 8000ba6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = READ_BIT((SPI1->SPI_SR), 4);
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <SPI2_IRQHandler+0x54>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	793b      	ldrb	r3, [r7, #4]
 8000bb6:	f362 0382 	bfi	r3, r2, #2, #1
 8000bba:	713b      	strb	r3, [r7, #4]


	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SPI2_IRQHandler+0x58>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	7938      	ldrb	r0, [r7, #4]
 8000bc4:	4798      	blx	r3
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40013000 	.word	0x40013000
 8000bd4:	2000005c 	.word	0x2000005c

08000bd8 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	GP_USART1_Config->P_IRQ_CallBack();
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <USART1_IRQHandler+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	4798      	blx	r3
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000001c 	.word	0x2000001c

08000bec <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	GP_USART2_Config->P_IRQ_CallBack();
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <USART2_IRQHandler+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	4798      	blx	r3
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000020 	.word	0x20000020

08000c00 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	GP_USART3_Config->P_IRQ_CallBack();
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <USART3_IRQHandler+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	4798      	blx	r3
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000024 	.word	0x20000024

08000c14 <EXTI0_IRQHandler>:

/*********ISR***********/


void EXTI0_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//clear padding status to prevent entering in infinite loop of calling the ISR
	EXTI->EXTI_PR |= 1<<0 ;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <EXTI0_IRQHandler+0x1c>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <EXTI0_IRQHandler+0x1c>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6153      	str	r3, [r2, #20]

	//Call IRQ_CallBack_Function
	GP_IRQ_CallBack[0]();
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <EXTI0_IRQHandler+0x20>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4798      	blx	r3

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010400 	.word	0x40010400
 8000c34:	20000074 	.word	0x20000074

08000c38 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	//clear padding status to prevent entering in infinite loop of calling the ISR
	EXTI->EXTI_PR |= 1<<1 ;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <EXTI1_IRQHandler+0x1c>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <EXTI1_IRQHandler+0x1c>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	6153      	str	r3, [r2, #20]

	//Call IRQ_CallBack_Function
	GP_IRQ_CallBack[1]();
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <EXTI1_IRQHandler+0x20>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	4798      	blx	r3

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40010400 	.word	0x40010400
 8000c58:	20000074 	.word	0x20000074

08000c5c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	//clear padding status to prevent entering in infinite loop of calling the ISR
	EXTI->EXTI_PR |= 1<<2 ;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <EXTI2_IRQHandler+0x1c>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <EXTI2_IRQHandler+0x1c>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6153      	str	r3, [r2, #20]

	//Call IRQ_CallBack_Function
	GP_IRQ_CallBack[2]();
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <EXTI2_IRQHandler+0x20>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	4798      	blx	r3

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40010400 	.word	0x40010400
 8000c7c:	20000074 	.word	0x20000074

08000c80 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	//clear padding status to prevent entering in infinite loop of calling the ISR
	EXTI->EXTI_PR |= 1<<3 ;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <EXTI3_IRQHandler+0x1c>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <EXTI3_IRQHandler+0x1c>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6153      	str	r3, [r2, #20]

	//Call IRQ_CallBack_Function
	GP_IRQ_CallBack[3]();
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <EXTI3_IRQHandler+0x20>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	4798      	blx	r3

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010400 	.word	0x40010400
 8000ca0:	20000074 	.word	0x20000074

08000ca4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	//clear padding status to prevent entering in infinite loop of calling the ISR
	EXTI->EXTI_PR |= 1<<4 ;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <EXTI4_IRQHandler+0x1c>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <EXTI4_IRQHandler+0x1c>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6153      	str	r3, [r2, #20]

	//Call IRQ_CallBack_Function
	GP_IRQ_CallBack[4]();
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <EXTI4_IRQHandler+0x20>)
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	4798      	blx	r3

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40010400 	.word	0x40010400
 8000cc4:	20000074 	.word	0x20000074

08000cc8 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

	if(READ_BIT(EXTI->EXTI_PR, 5) == 1 )
 8000ccc:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	095b      	lsrs	r3, r3, #5
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d108      	bne.n	8000cec <EXTI9_5_IRQHandler+0x24>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<5;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a24      	ldr	r2, [pc, #144]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000ce0:	f043 0320 	orr.w	r3, r3, #32
 8000ce4:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[5]();
 8000ce6:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <EXTI9_5_IRQHandler+0xac>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4798      	blx	r3

	}
	if(READ_BIT(EXTI->EXTI_PR, 6) == 1)
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	099b      	lsrs	r3, r3, #6
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d108      	bne.n	8000d0c <EXTI9_5_IRQHandler+0x44>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<6;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d04:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[6]();
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <EXTI9_5_IRQHandler+0xac>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4798      	blx	r3
	}
	if(READ_BIT(EXTI->EXTI_PR, 7) == 1)
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	09db      	lsrs	r3, r3, #7
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <EXTI9_5_IRQHandler+0x64>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<7;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[7]();
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <EXTI9_5_IRQHandler+0xac>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4798      	blx	r3
	}
	if(READ_BIT(EXTI->EXTI_PR, 8) == 1)
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d108      	bne.n	8000d4c <EXTI9_5_IRQHandler+0x84>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<8;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d44:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[8]();
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <EXTI9_5_IRQHandler+0xac>)
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	4798      	blx	r3
	}
	if(READ_BIT(EXTI->EXTI_PR, 9) == 1)
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	0a5b      	lsrs	r3, r3, #9
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d108      	bne.n	8000d6c <EXTI9_5_IRQHandler+0xa4>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<9;
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <EXTI9_5_IRQHandler+0xa8>)
 8000d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d64:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[9]();
 8000d66:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <EXTI9_5_IRQHandler+0xac>)
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	4798      	blx	r3
	}


}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010400 	.word	0x40010400
 8000d74:	20000074 	.word	0x20000074

08000d78 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	if(READ_BIT(EXTI->EXTI_PR, 10) == 1 )
 8000d7c:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	0a9b      	lsrs	r3, r3, #10
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d108      	bne.n	8000d9c <EXTI15_10_IRQHandler+0x24>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<10;
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000d90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d94:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[10]();
 8000d96:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <EXTI15_10_IRQHandler+0xcc>)
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	4798      	blx	r3

	}
	if(READ_BIT(EXTI->EXTI_PR, 11) == 1)
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	0adb      	lsrs	r3, r3, #11
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d108      	bne.n	8000dbc <EXTI15_10_IRQHandler+0x44>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<11;
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db4:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[11]();
 8000db6:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <EXTI15_10_IRQHandler+0xcc>)
 8000db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dba:	4798      	blx	r3
	}
	if(READ_BIT(EXTI->EXTI_PR, 12) == 1)
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	0b1b      	lsrs	r3, r3, #12
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d108      	bne.n	8000ddc <EXTI15_10_IRQHandler+0x64>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<12;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd4:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[12]();
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <EXTI15_10_IRQHandler+0xcc>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4798      	blx	r3

	}
	if(READ_BIT(EXTI->EXTI_PR, 13) == 1)
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	0b5b      	lsrs	r3, r3, #13
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d108      	bne.n	8000dfc <EXTI15_10_IRQHandler+0x84>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<13;
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000df0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000df4:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[13]();
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <EXTI15_10_IRQHandler+0xcc>)
 8000df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfa:	4798      	blx	r3

	}
	if(READ_BIT(EXTI->EXTI_PR, 14) == 1)
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	0b9b      	lsrs	r3, r3, #14
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d108      	bne.n	8000e1c <EXTI15_10_IRQHandler+0xa4>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<14;
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[14]();
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <EXTI15_10_IRQHandler+0xcc>)
 8000e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1a:	4798      	blx	r3
	}
	if(READ_BIT(EXTI->EXTI_PR, 15) == 1)
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	0bdb      	lsrs	r3, r3, #15
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d108      	bne.n	8000e3c <EXTI15_10_IRQHandler+0xc4>
	{
		//clear padding status to prevent entering in infinite loop of calling the ISR
		EXTI->EXTI_PR |= 1<<15;
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <EXTI15_10_IRQHandler+0xc8>)
 8000e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e34:	6153      	str	r3, [r2, #20]

		//Call IRQ_CallBack_Function
		GP_IRQ_CallBack[15]();
 8000e36:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <EXTI15_10_IRQHandler+0xcc>)
 8000e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3a:	4798      	blx	r3

	}


}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40010400 	.word	0x40010400
 8000e44:	20000074 	.word	0x20000074

08000e48 <Clock_Init>:
#include "stm32f103x8.h"
#include "STM32_I2C.h"
#include "I2C_Slave_EEPROM.h"

void Clock_Init(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_DIS();
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <Clock_Init+0x3c>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <Clock_Init+0x3c>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	60d3      	str	r3, [r2, #12]
	RCC_GPIOB_CLK_DIS();
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <Clock_Init+0x3c>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <Clock_Init+0x3c>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	60d3      	str	r3, [r2, #12]
	RCC_AFIO_CLK_EN();
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <Clock_Init+0x3c>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <Clock_Init+0x3c>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6193      	str	r3, [r2, #24]
	RCC_I2C1_CLK_EN();
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <Clock_Init+0x3c>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <Clock_Init+0x3c>)
 8000e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e7a:	61d3      	str	r3, [r2, #28]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	40021000 	.word	0x40021000

08000e88 <main>:


int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
    Clock_Init();
 8000e8e:	f7ff ffdb 	bl	8000e48 <Clock_Init>

	//Test Case 1
    uint8_t buff1[] = {1, 2, 3, 4, 5, 6, 7};
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <main+0x78>)
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9c:	6018      	str	r0, [r3, #0]
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	8019      	strh	r1, [r3, #0]
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	0c0a      	lsrs	r2, r1, #16
 8000ea6:	701a      	strb	r2, [r3, #0]
	uint8_t buff2[7] = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	f8c3 2003 	str.w	r2, [r3, #3]

	HAL_EEPROM_Init();
 8000eb2:	f7ff f95d 	bl	8000170 <HAL_EEPROM_Init>
	HAL_EEPROM_Write_Nbytes(0xAF, buff1, 7);
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2207      	movs	r2, #7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	20af      	movs	r0, #175	; 0xaf
 8000ec0:	f7ff f974 	bl	80001ac <HAL_EEPROM_Write_Nbytes>
	HAL_EEPROM_Read_Nbytes(0xAF, buff2, 7);
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	4619      	mov	r1, r3
 8000eca:	20af      	movs	r0, #175	; 0xaf
 8000ecc:	f7ff f9c6 	bl	800025c <HAL_EEPROM_Read_Nbytes>


	//Test Case 2
	buff1[0] = 10;
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	723b      	strb	r3, [r7, #8]
	buff1[1] = 11;
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	727b      	strb	r3, [r7, #9]
	buff1[2] = 12;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	72bb      	strb	r3, [r7, #10]
	buff1[3] = 13;
 8000edc:	230d      	movs	r3, #13
 8000ede:	72fb      	strb	r3, [r7, #11]

	HAL_EEPROM_Write_Nbytes(0xFFF, buff1, 4);
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000eec:	f7ff f95e 	bl	80001ac <HAL_EEPROM_Write_Nbytes>
	HAL_EEPROM_Read_Nbytes(0xFFF, buff2, 4);
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000efa:	f7ff f9af 	bl	800025c <HAL_EEPROM_Read_Nbytes>

	while(1)
 8000efe:	e7fe      	b.n	8000efe <main+0x76>
 8000f00:	08000fc8 	.word	0x08000fc8

08000f04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f06:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LoopForever+0xe>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	; (8000f50 <LoopForever+0x16>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f32:	f000 f811 	bl	8000f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f36:	f7ff ffa7 	bl	8000e88 <main>

08000f3a <LoopForever>:

LoopForever:
    b LoopForever
 8000f3a:	e7fe      	b.n	8000f3a <LoopForever>
  ldr   r0, =_estack
 8000f3c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f48:	08000ff0 	.word	0x08000ff0
  ldr r2, =_sbss
 8000f4c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f50:	200000b0 	.word	0x200000b0

08000f54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC1_2_IRQHandler>
	...

08000f58 <__libc_init_array>:
 8000f58:	b570      	push	{r4, r5, r6, lr}
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	4e0c      	ldr	r6, [pc, #48]	; (8000f90 <__libc_init_array+0x38>)
 8000f5e:	4c0d      	ldr	r4, [pc, #52]	; (8000f94 <__libc_init_array+0x3c>)
 8000f60:	1ba4      	subs	r4, r4, r6
 8000f62:	10a4      	asrs	r4, r4, #2
 8000f64:	42a5      	cmp	r5, r4
 8000f66:	d109      	bne.n	8000f7c <__libc_init_array+0x24>
 8000f68:	f000 f822 	bl	8000fb0 <_init>
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	4e0a      	ldr	r6, [pc, #40]	; (8000f98 <__libc_init_array+0x40>)
 8000f70:	4c0a      	ldr	r4, [pc, #40]	; (8000f9c <__libc_init_array+0x44>)
 8000f72:	1ba4      	subs	r4, r4, r6
 8000f74:	10a4      	asrs	r4, r4, #2
 8000f76:	42a5      	cmp	r5, r4
 8000f78:	d105      	bne.n	8000f86 <__libc_init_array+0x2e>
 8000f7a:	bd70      	pop	{r4, r5, r6, pc}
 8000f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f80:	4798      	blx	r3
 8000f82:	3501      	adds	r5, #1
 8000f84:	e7ee      	b.n	8000f64 <__libc_init_array+0xc>
 8000f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f8a:	4798      	blx	r3
 8000f8c:	3501      	adds	r5, #1
 8000f8e:	e7f2      	b.n	8000f76 <__libc_init_array+0x1e>
 8000f90:	08000fe8 	.word	0x08000fe8
 8000f94:	08000fe8 	.word	0x08000fe8
 8000f98:	08000fe8 	.word	0x08000fe8
 8000f9c:	08000fec 	.word	0x08000fec

08000fa0 <memset>:
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4402      	add	r2, r0
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d100      	bne.n	8000faa <memset+0xa>
 8000fa8:	4770      	bx	lr
 8000faa:	f803 1b01 	strb.w	r1, [r3], #1
 8000fae:	e7f9      	b.n	8000fa4 <memset+0x4>

08000fb0 <_init>:
 8000fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb2:	bf00      	nop
 8000fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb6:	bc08      	pop	{r3}
 8000fb8:	469e      	mov	lr, r3
 8000fba:	4770      	bx	lr

08000fbc <_fini>:
 8000fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fbe:	bf00      	nop
 8000fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc2:	bc08      	pop	{r3}
 8000fc4:	469e      	mov	lr, r3
 8000fc6:	4770      	bx	lr
